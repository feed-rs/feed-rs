<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:planet="http://planet.intertwingly.net/" xmlns:indexing="urn:atom-extension:indexing" indexing:index="no"><access:restriction xmlns:access="http://www.bloglines.com/about/specs/fac-1.0" relationship="deny"/>
  <title>Planet GNOME</title>
  <updated>2020-04-07T21:04:24Z</updated>
  <generator uri="http://intertwingly.net/code/venus/">Venus</generator>
  <author>
    <name>GNOME Sysadmin Team</name>
    <email>gnome-sysadmin@gnome.org</email>
  </author>
  <id>https://planet.gnome.org/atom.xml</id>
  <link href="https://planet.gnome.org/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="http://pubsubhubbub.appspot.com/" rel="hub"/>
  <link href="https://planet.gnome.org/" rel="alternate"/>

  <entry xml:lang="en">
    <id>http://feaneron.com/?p=5230</id>
    <link href="https://feaneron.com/2020/04/06/timelines-on-calendar/" rel="alternate" type="text/html"/>
    <title>Timelines on Calendar</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">It’s been a long time since I last wrong a blog post about GNOME Calendar only. That doesn’t mean work has stalled! Since pretty much its inception, Calendar used copy-pasted code from Evolution to retrieve events from Evolution Data Server (EDS). It was a pair of classes called ECalDataModelSubscriber, and ECalDataModel. The first is an … <a class="more-link" href="https://feaneron.com/2020/04/06/timelines-on-calendar/">Continue reading <span class="screen-reader-text">Timelines on Calendar</span> <span class="meta-nav">→</span></a></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>It’s been a long time since I last wrong a blog post about GNOME Calendar only. That doesn’t mean work has stalled!</p>



<p>Since pretty much its inception, Calendar used copy-pasted code from Evolution to retrieve events from Evolution Data Server (EDS). It was a pair of classes called ECalDataModelSubscriber, and ECalDataModel. The first is an interface that classes implement when they handle adding, updating, and removing events. It was implemented by the week, month, and year views. The second Evolution class, ECalDataModel, is responsible for storing multiple subscribers, the time range of each subscriber, fetching the calendar data from EDS, and keeping subscribers aware of which events they should display.</p>



<p>ECalDataModel is a fairly complicated code, full of threads and locks and synchronization points. It was hard to investigate and fix bugs related to it. In addition to that, Calendar tries to use the GDateTime API everywhere, but ECalDataModel (and most Evolution-related code) uses other time types such as <code>time_t</code> and <code>GTimeVal</code>. Over time, those points were growing the pain of maintaining Calendar.</p>



<p>Even though ECalDataModel and ECalDataModelSubscriber worked mostly well for a long time, I thought it wouldn’t hurt to experiment with a new backend that uses more modern APIs and techniques, threads the heavy stuff away, and is closer to the style and idiosyncrasy of Calendar.</p>



<p>After some testing and validating the core concepts of the new backend, and asking a few community members for targeted testing, I finally landed it. I’ll be fixing a few remaining bugs introduced by it, but so far so good!</p>



<h2>Timeline</h2>



<p>The core component of this new engine is what I called “timeline”. Conceptually, a timeline is a straightforward concept: it’s a virtual representation of the time.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img alt="" class="wp-image-5249" src="https://feaneron.files.wordpress.com/2020/04/timeline1-1.png?w=749"/></figure></div>



<p>Events are added to this timeline, and subscribers can subscriber to a well defined time slice. The timeline matches which events are visible by which subscribers, and updates subscribers accordingly.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img alt="" class="wp-image-5255" src="https://feaneron.files.wordpress.com/2020/04/timeline2.png?w=648"/></figure></div>



<p>In the picture above, the timeline object would detect that “Subscriber 1” should only display “Event 1”, whereas “Subscriber 2” would display all the 3 events available.</p>



<p>The subscriber concept is directly borrowed from Evolution’s design. Anything can be a subscriber, as long as it knows what slice of time it wants to display. The week, month, and year views continue to implement this concept, but so does the search – which uses a more sophisticated calculation of time, but is still time-based – and the shell search provider.</p>



<p>GcalTimeline takes over the responsibility of aggregating events and subscribers, and deciding which events each subscriber should display. Gathering the events from EDS is done in a different class called GcalCalendarMonitor. This class is very specific and limited in what it does, and is where most of the complexities of multiple threads is handled. It also tries really hard to be efficient and never do heavy operations in tight loops in the main thread.</p>



<h2>Augmented Tree</h2>



<p>In order to implement that, the data structure used by Calendar to store and query time ranges was further improved to be able to handle a much larger range of dates and times.</p>



<p>Calendar implements an augmented AVL tree that stores data based on ranges instead of single values. This allows us to have a good compromise of memory efficiency, lookup speeds, and insertion and removal speeds. For practical purposes, on a daily usage, the time ranges this range tree is capable of handling is virtually infinite. People will be able to schedule their appointments from year 1 to 9999 in the Gregorian calendar.</p>



<h2>Next Steps</h2>



<p>I have a few more improvements in the pipeline, such as the introduction of another data structure to handle ranges and compare them with potentially different comparison strategies, since sometimes we want to compare non-exclusive ranges with exclusive ones, or half-exclusive ranges between each other.</p>



<p>Personally, I’m quite satisfied with this new architecture and how much it is a better fit for Calendar. Slowly but steadily, Calendar is being reworked to be more consistent internally and ultimately that will mean less bugs and, who knows!, more features as well.</p></div>
    </content>
    <updated>2020-04-07T02:53:50Z</updated>
    <published>2020-04-07T02:53:50Z</published>
    <category term="GNOME"/>
    <category term="GNOME Calendar"/>
    <category term="gnome"/>
    <category term="gnome-calendar"/>
    <author>
      <name>feaneron</name>
    </author>
    <source>
      <id>https://feaneron.com</id>
      <logo>https://secure.gravatar.com/blavatar/e3643c29c84a9daba626af7eb1b792a1?s=96&amp;d=https%3A%2F%2Fs0.wp.com%2Fi%2Fbuttonw-com.png</logo>
      <link href="https://feaneron.com/feed/" rel="self" type="application/rss+xml"/>
      <link href="https://feaneron.com" rel="alternate" type="text/html"/>
      <link href="https://feaneron.com/osd.xml" rel="search" title="Georges Stavracas" type="application/opensearchdescription+xml"/>
      <link href="https://feaneron.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Personal website &amp; development blog</subtitle>
      <title>Georges Stavracas</title>
      <updated>2020-04-07T02:56:02Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://jimmac.musichall.cz/blog/2020-04-06-art-vs-design/</id>
    <link href="http://jimmac.musichall.cz/blog/2020-04-06-art-vs-design/" rel="alternate" type="text/html"/>
    <title>Art vs Design</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Over the weekend I was forced to unload all my photos from my phone due to limited storage space. As I went through a nice capture of Builder nighly caught my attention and I couldn’t help but <a href="https://twitter.com/jimmac/status/1246208150233112577">post it on twitter</a>.</p>

<div class="image ">
      <img alt="Cyberdyne Builder" src="http://jimmac.musichall.cz/feed.xml/index/cyberdine.jpeg"/>
      <small>Cyberdyne Builder</small>
    </div>

<p>Obviously posting on twitter meant it was misunderstood immediately and quipped with entitled adjectives. And rather than responding on the wrong platform, I finally have an excuse to post on my blog again. So let’s take a look at the <em>horrible situation</em> we ended up with.</p>

<p>Thanks to <a href="http://flatpak.org">Flatpak</a> you now have a way to install a stable and development versions of an app, concurrenly. You can easily tell them apart without resorting to Name suffices in the shell, where the actual name gets horribly truncated due to ellipsization, while still clearly being the same app on a first glimpse.</p>

<div class="image ">
      <img alt="Stable and Nightly Boxes" src="http://jimmac.musichall.cz/feed.xml/index/boxes-nightly.jpg"/>
      <small>Stable and Nightly Boxes</small>
    </div>

<p>There’s plenty of apps already making use of this. So how does an app developer get one? We actually have the tooling for that. If you have an app icon, you can easily generate a nightly variant with zero effort in most cases.</p>

<video class="full" controls="">
  <source src="http://jimmac.musichall.cz/blog/2020-04-06-art-vs-design/index/nightly-icons.mp4" type="video/mp4"/>
  <source src="http://jimmac.musichall.cz/blog/2020-04-06-art-vs-design/index/nightly-icons.webm" type="video/webm"/>
Your browser does not support the video tag.
</video>

<p>So what was the situation twitter was praising? Let’s count on how many GNOME applications shipped a custom nighly icon. Umm, how about zero?</p>

<p>A pretty picture an artist spends hours on, modelling, texturing, lighting, adjusting for low resolution screens is <em>not</em> a visual framework nor a reasonable thing to ask app developers to do. </p></div>
    </content>
    <updated>2020-04-06T03:41:00Z</updated>
    <published>2020-04-06T03:41:00Z</published>
    <author>
      <name>Article Author</name>
    </author>
    <source>
      <id>http://jimmac.musichall.cz/blog</id>
      <author>
        <name>Jakub Steiner</name>
      </author>
      <link href="http://jimmac.musichall.cz/blog" rel="alternate" type="text/html"/>
      <link href="http://jimmac.musichall.cz/feed.xml" rel="self" type="application/atom+xml"/>
      <subtitle>Designer. Camera Pilot.</subtitle>
      <title>Jakub Steiner</title>
      <updated>2020-04-06T03:41:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-5968355124473522212.post-9009118234509375679</id>
    <link href="http://nibblestew.blogspot.com/feeds/9009118234509375679/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/>
    <link href="http://nibblestew.blogspot.com/2020/04/meson-manual-sales-status-and-price.html#comment-form" rel="replies" title="0 Comments" type="text/html"/>
    <link href="http://www.blogger.com/feeds/5968355124473522212/posts/default/9009118234509375679" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/5968355124473522212/posts/default/9009118234509375679" rel="self" type="application/atom+xml"/>
    <link href="http://nibblestew.blogspot.com/2020/04/meson-manual-sales-status-and-price.html" rel="alternate" title="Meson manual sales status and price adjustment" type="text/html"/>
    <title>Meson manual sales status and price adjustment</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">The sales dashboard of the Meson manual currently looks like this.<br/><br/><div class="separator" style="clear: both; text-align: center;"><a href="https://1.bp.blogspot.com/-9HuCXhdyU3E/XonBwUeIFnI/AAAAAAAACxU/lMbmYhto1y04WKVjZZzpICFT5NtWT4sNACNcBGAsYHQ/s1600/sendowl-dashboard.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="148" src="https://1.bp.blogspot.com/-9HuCXhdyU3E/XonBwUeIFnI/AAAAAAAACxU/lMbmYhto1y04WKVjZZzpICFT5NtWT4sNACNcBGAsYHQ/s320/sendowl-dashboard.png" width="320"/></a></div>It splits up quite nicely into three parts. The first one is the regular sales from the beginning of the year, which is on average less than one sale per day.<br/><br/>The second part (marked with a line) indicates when I was <a href="https://cppcast.com/jussi-pakkanen-meson-manual/">a guest on CppCast</a> talking about Meson and the book. As an experiment I created a time limited discount coupon so that all listeners could buy it with €10 off. As you can tell from the graph it did have an immediate response, which again proves that marketing and visibility are the things that actually matter when trying to sell any product.<br/><br/>After that we have the "new normal", which means no sales at all. I don't know if this is caused by the coronavirus isolation or whether this is the natural end of life for the product (hopefully the former but you can never really tell in advance).<br/><h2>Price reduction</h2><div>Thus, effective immediately, the price of the book has been reduced to €24.95. You can purchase it from <a href="https://meson-manual.com/">the official site</a>.</div></div>
    </content>
    <updated>2020-04-05T11:46:00Z</updated>
    <published>2020-04-05T11:46:00Z</published>
    <author>
      <name>Jussi</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/03370287682352908292</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-5968355124473522212</id>
      <author>
        <name>Jussi</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/03370287682352908292</uri>
      </author>
      <link href="http://nibblestew.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/5968355124473522212/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://nibblestew.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="http://www.blogger.com/feeds/5968355124473522212/posts/default?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <title>Nibble Stew - a gathering of development thoughts</title>
      <updated>2020-04-07T13:58:30Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-6112936277054198647.post-1097972507907717676</id>
    <link href="https://who-t.blogspot.com/feeds/1097972507907717676/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/>
    <link href="https://www.blogger.com/comment.g?blogID=6112936277054198647&amp;postID=1097972507907717676" rel="replies" title="3 Comments" type="text/html"/>
    <link href="https://www.blogger.com/feeds/6112936277054198647/posts/default/1097972507907717676" rel="edit" type="application/atom+xml"/>
    <link href="https://www.blogger.com/feeds/6112936277054198647/posts/default/1097972507907717676" rel="self" type="application/atom+xml"/>
    <link href="https://who-t.blogspot.com/2020/04/high-resolution-wheel-scrolling-in.html" rel="alternate" title="High resolution wheel scrolling in the desktop stack" type="text/html"/>
    <title>High resolution wheel scrolling in the desktop stack</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This is a follow up from <a href="https://who-t.blogspot.com/2018/12/high-resolution-wheel-scrolling-on.html">the kernel support for high-resolution wheel scrolling</a> which you totally forgot about because it's already more then a year in the past and seriously, who has the attention span these days to remember this. Anyway, I finally found time and motivation to pick this up again and I started lining up the pieces like cans, for it only to be shot down by the commentary of strangers on the internet. The <a href="https://gitlab.freedesktop.org/wayland/wayland/-/merge_requests/72">Wayland merge request</a> lists the various pieces (libinput, wayland, weston, mutter, gtk and Xwayland) but for the impatient there's also an <a href="https://copr.fedorainfracloud.org/coprs/whot/high-resolution-wheel-scrolling/">Fedora 32 COPR</a>. For all you weirdos inexplicably not running the latest Fedora, well, you'll have to compile this yourself, just like I did. </p> <p>Let's recap: in v5.0 the kernel added new axes <b>REL_WHEEL_HI_RES</b> and <b>REL_HWHEEL_HI_RES</b> for all devices. On devices that actually support high-resolution wheel scrolling (Logitech and Microsoft mice, primarily) you'll get multiple hires events before the now-legacy <b>REL_WHEEL</b> events. On all other devices those two are in sync. </p> <p>Integrating this into the userspace stack was a bit of a mess at first, but I think the solution is good enough, even if it has a rather verbose explanation on how to handle it. The actual patches to integrate ended up being relatively simple. So let's see why it's a bit weird: </p> <p>When Wayland started, back in WhoahReallyThatLongAgo, scrolling was specified as the <b>wl_pointer.axis</b> event with a value in pixels. This works fine for touchpads, not so much for wheels. The early versions of Weston decreed that one wheel click was 10 pixels [1] and, perhaps surprisingly, the world kept on turning. When libinput was forked from Weston <a href="https://who-t.blogspot.com/2015/01/providing-physical-movement-of-wheel.html">an early change</a> was that wheel events would have two values - degrees of movement and click count ("discrete steps"). The wayland protocol was expanded to include the discrete steps as <b>wl_pointer.axis_discrete</b> as well. Then backwards compatibility reared its ugly head and Mutter, Weston, GTK all basically said: one discrete step equals 10 pixels so we multiply the discrete value by 10 and, perhaps surprisingly, the world kept on turning. </p> <p>This worked out well enough for a few years but with high resolution wheels we ran into a problem. Discrete steps are integers, so we can't send partial values. And the protocol is defined in a way that any tweaking of the behaviour would result in broken clients which, perhaps surprisingly, is a Bad Thing. This lead to the current proposal of separate events. <b>LIBINPUT_EVENT_POINTER_AXIS_WHEEL</b> and for Wayland the <b>wl_pointer.axis_v120</b> event, linked to above. These events are (like the kernel events) a parallel event stream to the previous events and effectively replace the <b>LIBINPUT_EVENT_POINTER_AXIS</b> and Wayland <b>wl_pointer.axis/axis_discrete</b> pair for wheel events (not so for touchpad or button scrolling though). </p> <p>The compositor side of things is relatively simple: take the events from libinput and pass the hires ones as v120 events and the lowres ones as v120 events with a value of zero. The client side takes the v120 events and uses them over <b>wl_pointer.axis/axis_discrete</b> unless one is zero in which case you can discard all axis events in that <b>wl_pointer.frame</b>. Since most client implementation already have the support for smooth scrolling (because, well, touchpads do exist) it's relatively simple to integrate - the new events just feed into the smooth scrolling code. And since you already have to do wheel emulation for that (because, well, old clients exist) wheel emulation is handled easily too. </p> <p>All that to provide buttery smooth [2] wheel scrolling. Or not, if your hardware doesn't support it. In which case, well, live with the warm fuzzy feeling that someone else has a better user experience now. Or soon, anyway. </p> <p><small>[1] with, I suspect, the scientific measurement of "yeah, that seems about alright"<br/>[2] like butter out of a fridge, so still chunky but at least less so than before<br/></small></p></div>
    </content>
    <updated>2020-04-04T04:00:00Z</updated>
    <published>2020-04-04T04:00:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="libinput. wayland"/>
    <author>
      <name>Peter Hutterer</name>
      <email>noreply@blogger.com</email>
      <uri>https://www.blogger.com/profile/17204066043271384535</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-6112936277054198647</id>
      <category term="git"/>
      <category term="kernel"/>
      <category term="compiz"/>
      <category term="gitlab"/>
      <category term="configuration"/>
      <category term="xkb"/>
      <category term="x"/>
      <category term="fedora"/>
      <category term="tig"/>
      <category term="multitouch"/>
      <category term="libratbag"/>
      <category term="tutorial"/>
      <category term="wayland"/>
      <category term="xorg.conf"/>
      <category term="input device properties"/>
      <category term="tuhi"/>
      <category term="workflow"/>
      <category term="hid"/>
      <category term="gnome-device-setup"/>
      <category term="mpx"/>
      <category term="outdoors"/>
      <category term="gnome"/>
      <category term="libevdev"/>
      <category term="xds"/>
      <category term="xi2"/>
      <category term="wacom"/>
      <category term="evemu"/>
      <category term="xorg"/>
      <category term="xlib"/>
      <category term="libinput"/>
      <category term="hal"/>
      <category term="synaptics"/>
      <category term="freedesktop.org"/>
      <category term="xts"/>
      <category term="evtest"/>
      <category term="evdev"/>
      <category term="libinput. wayland"/>
      <author>
        <name>Peter Hutterer</name>
        <email>noreply@blogger.com</email>
        <uri>https://www.blogger.com/profile/17204066043271384535</uri>
      </author>
      <link href="https://www.blogger.com/feeds/6112936277054198647/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="https://www.blogger.com/feeds/6112936277054198647/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://who-t.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="https://www.blogger.com/feeds/6112936277054198647/posts/default?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <title>Who-T</title>
      <updated>2020-04-07T10:45:18Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>https://blogs.gnome.org/shell-dev/?p=493</id>
    <link href="https://blogs.gnome.org/shell-dev/2020/04/03/this-month-in-mutter-gnome-shell-march-2020/" rel="alternate" type="text/html"/>
    <title>This Month in Mutter &amp; GNOME Shell | March 2020</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">During March, GNOME Shell and Mutter saw their 3.36.0 and 3.36.1 releases, and the beginning of the 3.38 development cycle. We’ve focused most of the development efforts Â on fixing bugs before starting the new development cycle. From the development perspective, the 3.36.0 release was fantastic, and the number of regressions relative to the massive amount … <p class="link-more"><a class="more-link" href="https://blogs.gnome.org/shell-dev/2020/04/03/this-month-in-mutter-gnome-shell-march-2020/">Continue reading<span class="screen-reader-text"> "This Month in Mutter &amp; GNOME Shell | March 2020"</span></a></p></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>During March, GNOME Shell and Mutter saw their 3.36.0 and 3.36.1 releases, and the beginning of the 3.38 development cycle. We’ve focused most of the development efforts  on fixing bugs before starting the new development cycle.</p>
<p>From the development perspective, the 3.36.0 release was fantastic, and the number of regressions relative to the massive amount of changes that happened during the last cycle was remarkably small.</p>
<h1>GNOME Shell</h1>
<p>GNOME Shell saw continued improvements in its new Extensions app. New APIs were added to the Shell, which allows moving the Extensions app away into its own codebase. It also allows Shell to expose fewer interfaces through D-Bus.  The Extensions app is now available <a href="https://flathub.org/apps/details/org.gnome.Extensions">on Flathub</a>.</p>
<p>A number of other small bugs and crashes were fixed for 3.36.1. Notably, the blur effect now works properly with fractional scaling.</p>
<p>Initial 3.38 work includes an improved Bluetooth state reporting, and the usage of JavaScript promises to simplify various asynchronous operations.</p>
<h1>Mutter</h1>
<p>Following the 3.36.0 release, Mutter received various fixes to window streaming support. In contrast to streaming entire monitors, which was working properly, window streaming had a few quirks and misbehaviors. For 3.36.1, we’ve tracked down many issues around it and fixed them. Streaming windows is also done using DMA buffer sharing mechanisms.</p>
<p>On Wayland, sometimes new windows would use the wrong position to animate, leading to the zoom in animation look broken. This issue was fixed as well. Pasting images from Firefox does not freeze apps, specially Xwayland apps, anymore. We also fixed a series of bugs where Xwayland windows would show a black border when resizing.</p>
<p>Mutter now properly handles hardware cursors when hotplugging GPUs, and cursor hotspots now work correctly again on virtual machines. Sometimes cursors would rotate wrongly when on already rotated displays, and this was also fixed.</p>
<p>On the X11 front, Mutter now respects manually configured RandR panning on X11, and a bug preventing the correct monitor scale from being applied on X11 was also fixed.</p>
<p>Mutter now also finally respects the “middle mouse button” emulation setting exposed via GSettings.</p></div>
    </content>
    <updated>2020-04-03T15:50:33Z</updated>
    <published>2020-04-03T15:50:33Z</published>
    <category term="Uncategorized"/>
    <author>
      <name>feaneron</name>
    </author>
    <source>
      <id>https://blogs.gnome.org/shell-dev</id>
      <link href="https://blogs.gnome.org/shell-dev/author/feaneron/feed/" rel="self" type="application/rss+xml"/>
      <link href="https://blogs.gnome.org/shell-dev" rel="alternate" type="text/html"/>
      <subtitle>Development blog for GNOME Shell and Mutter</subtitle>
      <title>feaneron – GNOME Shell &amp; Mutter</title>
      <updated>2020-04-03T15:50:33Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://wingolog.org/2020/04/03/multi-value-webassembly-in-firefox-from-1-to-n</id>
    <link href="http://wingolog.org/archives/2020/04/03/multi-value-webassembly-in-firefox-from-1-to-n" rel="alternate" type="text/html"/>
    <title>multi-value webassembly in firefox: from 1 to n</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div><p>Greetings, hackers!  Today I'd like to write about something I worked on recently: implementation of the <a href="https://github.com/WebAssembly/multi-value/blob/master/proposals/multi-value/Overview.md">multi-value</a> future feature of WebAssembly in Firefox, as sponsored by <a href="https://techatbloomberg.com/">Bloomberg</a>.</p><p>In the "minimum viable product" version of WebAssembly published in 2018, there were a few artificial restrictions placed on the language.  <a href="https://webassembly.github.io/spec/core/valid/types.html#function-types">Functions could only return a single value</a>; if a function would naturally return two values, it would have to return at least one of them by writing to memory.  <a href="https://webassembly.github.io/spec/core/valid/instructions.html#xref-syntax-instructions-syntax-instr-control-mathsf-loop-t-xref-syntax-instructions-syntax-instr-mathit-instr-ast-xref-syntax-instructions-syntax-instr-control-mathsf-end">Loops couldn't take parameters</a>; any loop state variables had to be stored to and loaded from indexed local variables at each iteration.  Similarly, any block that would naturally return more than one result would also have to do so via locals.</p><p>This restruction is lifted with the multi-value proposal.  <a href="https://webassembly.github.io/multi-value/core/syntax/types.html#function-types">Function types now map from <i>result type</i> to <i>result type</i></a>, where a <a href="https://webassembly.github.io/multi-value/core/syntax/types.html#result-types">result type is a sequence of value types</a>.  That is to say, just as functions can take multiple arguments, they can return multiple results.  Similarly, with the multi-value proposal, <a href="https://webassembly.github.io/multi-value/core/syntax/instructions.html#syntax-blocktype">block types are now the same as function types</a>: loops and blocks can take arguments and return any number of results.  This change improves the expressiveness of WebAssembly as a compilation target; a C++ program compiled to multi-value WebAssembly can be encoded in fewer bytes than before.  Multi-value also establishes a base for other language extensions.  For example, the exception handling proposal builds on multi-value to <a href="https://github.com/WebAssembly/exception-handling/blob/master/proposals/Exceptions.md#exception-data-extraction">pass multiple values to catch blocks</a>.</p><p>So, that's multi-value.  You would think that relaxing a restriction would be easy, but you'd be wrong!  This task took me 5 months and had a number of interesting gnarly bits.  This article is part one of two about interesting aspects of implementing multi-value in Firefox, specifically focussing on blocks.  We'll talk about multi-value function calls next week.</p><p><b>multi-value in blocks</b></p><p>In the last article, I presented the <a href="https://wingolog.org/archives/2020/03/25/firefoxs-low-latency-webassembly-compiler">basic structure of Firefox's WebAssembly support</a>: there is a <a href="https://searchfox.org/mozilla-central/rev/4ccefc3181f9d237ef4ca8bd17b4e7c101ddf7b5//js/src/wasm/WasmBaselineCompile.cpp">baseline compiler optimized for low latency</a> and an <a href="https://searchfox.org/mozilla-central/rev/4ccefc3181f9d237ef4ca8bd17b4e7c101ddf7b5/js/src/wasm/WasmIonCompile.cpp">optimizing compiler optimized for throughput</a>.  (There is also <a href="https://github.com/bytecodealliance/wasmtime/tree/master/cranelift">Cranelift</a>, a new experimental compiler that may replace the current implementation of the optimizing compiler; but that doesn't affect the basic structure.)</p><p>The optimizing compiler applies traditional compiler techniques: SSA graph construction, where values flow into and out of graphs using the usual defs-dominate-uses relationship.  The only control-flow joins are loop entry and (possibly) block exit, so the addition of loop parameters means in multi-value there are some new phi variables in that case, and the expansion of block result count from [0,1] to [0,<i>n</i>] means that you may have more block exit phi variables.  But these compilers are built to handle these situations; you just build the SSA and let the optimizing compiler go to town.</p><p>The problem comes in the baseline compiler.</p><p><b>from 1 to <i>n</i></b></p><p>Recall that the baseline compiler is optimized for compiler speed, not compiled speed.  If there are only ever going to be 0 or 1 result from a block, for example, the baseline compiler's internal data structures will use something like a <tt>Maybe&lt;ValType&gt;</tt> to represent that block result.</p><p>If you then need to expand this to hold a vector of values, the naïve approach of using a <tt>Vector&lt;ValType&gt;</tt> would mean heap allocation and indirection, and thus would regress the baseline compiler.</p><p>In this case, and in many other similar cases, the solution is to use <a href="https://searchfox.org/mozilla-central/rev/4ccefc3181f9d237ef4ca8bd17b4e7c101ddf7b5/js/src/wasm/WasmOpIter.h#35">value tagging</a> to represent 0 or 1 value type directly in a word, and the general case by linking out to an external vector.  As block types are function types, they actually appear as function types in the WebAssembly type section, so they are already parsed; the BlockType in that case can just refer out to already-allocated memory.</p><p>In fact this value-tagging pattern applies <a href="https://searchfox.org/mozilla-central/rev/4ccefc3181f9d237ef4ca8bd17b4e7c101ddf7b5/js/src/wasm/WasmOpIter.h#109">all</a> <a href="https://searchfox.org/mozilla-central/rev/4ccefc3181f9d237ef4ca8bd17b4e7c101ddf7b5/js/src/wasm/WasmOpIter.h#224">over</a> <a href="https://searchfox.org/mozilla-central/rev/4ccefc3181f9d237ef4ca8bd17b4e7c101ddf7b5/js/src/jit/LIR.h#109">the</a> <a href="https://searchfox.org/mozilla-central/rev/4ccefc3181f9d237ef4ca8bd17b4e7c101ddf7b5/js/src/jit/BacktrackingAllocator.h#115">place</a>.  (The <tt>jit/</tt> links above are for the optimizing compiler, but they relate to function calls; will write about that next week.)  I have a bit of pause about value tagging, in that it's gnarly complexity and I didn't measure the speed of alternative implementations, but it was a useful migration strategy: value tagging minimizes performance risk to existing specialized use cases while adding support for new general cases.  Gnarly it is, then.</p><p><b>control-flow joins</b></p><p>I didn't mention it in the last article, but there are two important invariants regarding stack discipline in the baseline compiler.  Recall that there's a virtual stack, and that some elements of the virtual stack might be present on the machine stack.  There are four kinds of virtual stack entry: <a href="https://searchfox.org/mozilla-central/rev/4ccefc3181f9d237ef4ca8bd17b4e7c101ddf7b5/js/src/wasm/WasmBaselineCompile.cpp#2102">register, constant, local, and spilled</a>.  Locals indicate local variable reads and are mostly like registers in practice; when registers spill to the stack, locals do too.  (Why spill to the temporary stack instead of leaving the value in the local variable slot?  Because locals are mutable.  A <tt>local.get</tt> captures a local variable value at its point of execution.  If future code changes the local variable value, you wouldn't want the captured value to change.)</p><p>Digressing, the stack invariants:</p><ol>
<li><p>Spilled values precede registers and locals on the virtual stack.  If <i>u</i> and <i>v</i> are virtual stack entries and <i>u</i> is older than <i>v</i>, then if <i>u</i> is in a register or is a local, then <i>v</i> is not spilled.</p></li>
<li><p>Older values precede newer values on the machine stack.  Again for <i>u</i> and <i>v</i>, if they are both spilled, then <i>u</i> will be farther from the stack pointer than <i>v</i>.</p></li>
</ol><p>There are five fundamental stack operations in the baseline compiler; let's examine them to see how the invariants are guaranteed.  Recall that before multi-value, targets of non-local exits (e.g. of the <a href="https://webassembly.github.io/spec/core/syntax/instructions.html#syntax-instr-control"><tt>br</tt> instruction</a>) could only receive 0 or 1 value; if there is a value, it's passed in a well-known register (e.g. <tt>%rax</tt> or <tt>%xmm0</tt>).  (On 32-bit machines, 64-bit values use a well-known pair of registers.)</p><dl>
<dt><a href="https://searchfox.org/mozilla-central/rev/4ccefc3181f9d237ef4ca8bd17b4e7c101ddf7b5/js/src/wasm/WasmBaselineCompile.cpp#3664-3725">push(<i>v</i>)</a></dt>
<dd>Results of WebAssembly operations never push spilled values, neither onto the virtual nor the machine stack. <i>v</i> is either a register, a constant, or a reference to a local.  Thus we guarantee both (1) and (2).</dd>
<dt><a href="https://searchfox.org/mozilla-central/rev/4ccefc3181f9d237ef4ca8bd17b4e7c101ddf7b5/js/src/wasm/WasmBaselineCompile.cpp#3727-4073">pop() -&gt; <i>v</i></a></dt>
<dd>Doesn't affect older stack entries, so (1) is preserved.  If the newest stack entry is spilled, you know that it is closest to the stack pointer, so you can pop it by first loading it to a register and then incrementing the stack pointer; this preserves (2).  Therefore if it is later pushed on the stack again, it will not be as a spilled value, preserving (1).</dd>
<dt><a href="https://searchfox.org/mozilla-central/rev/4ccefc3181f9d237ef4ca8bd17b4e7c101ddf7b5/js/src/wasm/WasmBaselineCompile.cpp#3456-3579">spill()</a></dt>
<dd>When spilling the virtual stack to the machine stack, you first traverse stack entries from new to old to see how far you need to spill. Once you get to a virtual stack entry that's already on the stack, you know that everything older has already been spilled, because of (1), so you switch to iterating back towards the new end of the stack, pushing registers and locals onto the machine stack and updating their virtual stack entries to be spilled along the way.  This iteration order preserves (2).  Note that because known constants never need to be on the machine stack, they can be interspersed with any other value on the virtual stack.</dd>
<dt><a href="https://searchfox.org/mozilla-central/rev/4ccefc3181f9d237ef4ca8bd17b4e7c101ddf7b5/js/src/wasm/WasmBaselineCompile.cpp#4084-4283">return(<i>height</i>, <i>v</i>)</a></dt>
<dd>This is the stack operation corresponding to a block exit (local or nonlocal).  We drop items from the virtual and machine stack until the stack height is <i>height</i>.  In WebAssembly 1.0, if the target continuation takes a value, then the jump passes a value also; in that case, before popping the stack, <i>v</i> is placed in a well-known register appropriate to the value type.  Note however that <i>v</i> is not pushed on the virtual stack at the return point.  Popping the virtual stack preserves (1), because a stack and its prefix have the same invariants; popping the machine stack also preserves (2).</dd>
<dt><a href="https://searchfox.org/mozilla-central/rev/4ccefc3181f9d237ef4ca8bd17b4e7c101ddf7b5/js/src/wasm/WasmBaselineCompile.cpp#4285-4338">capture(<i>t</i>)</a></dt>
<dd>Whereas return operations happen at block exits, capture operations happen at the target of block exits (the continuation).  If no value is passed to the continuation, a capture is a no-op.  If a value is passed, it's in a register, so we just push that register onto the virtual stack.  Both invariants are obviously preserved.</dd>
</dl><p>Note that a value passed to a continuation via return() has a brief instant in which it has no name -- it's not on the virtual stack -- but only a location -- it's in a well-known place.  capture() then gives that floating value a name.</p><p>Relatedly, there is another invariant, that the allocation of old values on block entry is the same as their allocation on block exit, so that all predecessors of the block exit flow all values via the same places.  This is preserved by <a href="https://searchfox.org/mozilla-central/rev/4ccefc3181f9d237ef4ca8bd17b4e7c101ddf7b5/js/src/wasm/WasmBaselineCompile.cpp#8673-8699">spilling on block entry</a>.  It's a big hammer, but effective.</p><p>So, given all this, how do we pass multiple values via return()?  We don't have unlimited registers, so the <tt>%rax</tt> strategy isn't going to work.</p><p>The answer for the baseline compiler is informed by our <i>lean into the stack machine</i> principle.  Multi-value returns are allocated in such a way that a capture() can push them onto the virtual stack.  Because spilled values must precede registers, we therefore <a href="https://searchfox.org/mozilla-central/rev/4ccefc3181f9d237ef4ca8bd17b4e7c101ddf7b5/js/src/wasm/WasmStubs.h#128-239">allocate older results on the stack, and put the last result in a register (or register pair for i64 on 32-bit platforms)</a>.  Note that it's possible in theory to allocate multiple results to registers; we'll touch on this next week.</p><p>Therefore the implementation of return(<i>height</i>, <i>v<sub>1</sub></i>..<i>v<sub>n</sub></i>) is straightforward: we first pop register results, then spill the remaining virtual stack items, then shuffle stack results down towards <i>height</i>.  This should result in a <tt>memmove</tt> of contiguous stack results towards the frame pointer.  However because const values aren't present on the machine stack, depending on the stack height difference, it may mean a split between <a href="https://searchfox.org/mozilla-central/rev/4ccefc3181f9d237ef4ca8bd17b4e7c101ddf7b5/js/src/wasm/WasmBaselineCompile.cpp#4156-4253">moving some values toward the frame pointer and some towards the stack pointer, then filling in by spilling constants</a>.  It's gnarly, but it is what it is.  Note that the links to the return and capture implementations above are to the post-multi-value world, so you can see all the details there.</p><p><b>that's it!</b></p><p>In summary, the hard part of multi-value blocks was reworking internal compiler data structures to be able to represent multi-value block types, and then figuring out the low-level stack manipulations in the baseline compiler.  The optimizing compiler on the other hand was pretty easy.</p><p>When it comes to calls though, that's another story.  We'll get to that one next week.  Thanks again to <a href="https://techatbloomberg.com/">Bloomberg</a> for supporting this work; I'm really delighted that <a href="https://igalia.com">Igalia</a> and Bloomberg have been working together for a long time (coming on 10 years now!) to push the web platform forward.  A special thanks also to Mozilla's Lars Hansen for his patience reviewing these patches.  Until next week, then, stay at home &amp; happy hacking!</p></div></div>
    </content>
    <updated>2020-04-03T10:56:29Z</updated>
    <published>2020-04-03T10:56:29Z</published>
    <author>
      <name>Andy Wingo</name>
      <uri>http://wingolog.org/</uri>
    </author>
    <source>
      <id>http://wingolog.org/feed/atom</id>
      <link href="http://wingolog.org/" rel="alternate" type="text/html"/>
      <link href="http://wingolog.org/feed/atom" rel="self" type="application/atom+xml"/>
      <subtitle>A mostly dorky weblog by Andy Wingo</subtitle>
      <title>wingolog</title>
      <updated>2020-04-03T10:56:29Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>https://blogs.gnome.org/engagement/?p=7630</id>
    <link href="https://blogs.gnome.org/engagement/2020/04/02/scale-18x/" rel="alternate" type="text/html"/>
    <title>SCaLE 18x</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Melissa Wu is organizing the Community Education Challenge. She attended her first conference with the GNOME Foundation at SCaLE. The 18th annual Southern California Linux Expo (SCaLE) took place on March 5â€“8, 2020 in Pasadena, CA. As the largest community-run open source and free software conference in North America, it was interesting to see the … <a class="more-link" href="https://blogs.gnome.org/engagement/2020/04/02/scale-18x/">Continue reading<span class="screen-reader-text"> "SCaLE 18x"</span></a></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><em>Melissa Wu is organizing the <a href="http://www.gnome.org/challenge">Community Education Challenge</a>. She attended her first conference with the GNOME Foundation at SCaLE.</em></p>
<p>The 18th annual <a href="https://www.socallinuxexpo.org/scale/18x">Southern California Linux Expo</a> (SCaLE) took place on March 5â€“8, 2020 in Pasadena, CA. As the largest community-run open source and free software conference in North America, it was interesting to see the variety of corporate and non-profit exhibitors all united under their passion for open source.</p>
<p><img alt="A photo of the GNOME booth, featuring a blue GNOME table cloth and exciting GNOME swag, including bugs, t-shirts, and a tote bag." class="aligncenter size-medium wp-image-7636" height="222" src="https://blogs.gnome.org/engagement/files/2020/04/IMG_20200306_131739-300x222.jpg" width="300"/></p>
<p>The GNOME presence was felt throughout the conference with a special GNOME Beers and pre-release party on the first day of the conference, Thursday, March 5th. GNOME information flyers were also included inside every attendee bag.</p>
<p>This presence carried on to our booth where we were able to connect with GNOME community members, contributors, and enthusiasts as well as tote our merchandise, including a brand new GNOME t-shirt, and stickers. Thank you to the number of supporters who assisted us at the booth including Foundation staff, Melissa Wu, Caroline Henriksen, Neil McGovern, and Rosanna Yuen, along with Foundation members Matthias Clasen, Sriram Ramkrishna, and Nuritzi Sanchez.</p>
<p><img alt="A photo of three people showing off temporary tattoos of the GNOME logo." class="aligncenter size-medium wp-image-7633" height="225" src="https://blogs.gnome.org/engagement/files/2020/04/SCALEBooth-300x225.jpg" width="300"/></p></div>
    </content>
    <updated>2020-04-02T19:06:20Z</updated>
    <published>2020-04-02T19:06:20Z</published>
    <category term="Uncategorized"/>
    <category term="Conferences"/>
    <category term="trip reports"/>
    <author>
      <name>mdeblanc</name>
    </author>
    <source>
      <id>https://blogs.gnome.org/engagement</id>
      <link href="https://blogs.gnome.org/engagement/author/mdeblanc/feed/" rel="self" type="application/rss+xml"/>
      <link href="https://blogs.gnome.org/engagement" rel="alternate" type="text/html"/>
      <subtitle>Featuring the people side of GNOME</subtitle>
      <title>mdeblanc – Getting to know GNOME</title>
      <updated>2020-04-02T19:06:20Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://aplazas.pages.gitlab.gnome.org/blog/blog/2020/04/02/coloring-api</id>
    <link href="https://aplazas.pages.gitlab.gnome.org/blog/blog/2020/04/02/coloring-api.html" rel="alternate" title="A Coloring API for GTK" type="text/html"/>
    <title>A Coloring API for GTK</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>In GUADEC 2019 we had a <a href="https://wiki.gnome.org/GUADEC/2019/Hackingdays/VendorThemes">vendor themes BoF</a> which got expanded to the application developersâ€™ need to brand their app with color.
We agreed on the need of a recoloring API for apps and vendors to take advantage of.</p>

<p>This week we had the <a href="https://wiki.gnome.org/Hackfests/DesignTools2020">Design Tools Hackfest 2020</a>, virtualized because of COVID-19, where we discussed that recoloring API.
We came up with something I think is interesting enough to discuss more widely.</p>

<h2 id="the-need">The Need</h2>

<p>First letâ€™s define the need:</p>
<ul>
  <li>vendors want to inject their branding in applications, this is typically done by shipping a different theme which creates <a href="https://stopthemingmy.app/">a whole new set of problems</a>;</li>
  <li>application developers want to use their branding or inject colors in parts of the applicationâ€™s UI;</li>
  <li>users want to make the system more their own by setting the systemâ€™s colors.</li>
</ul>

<p>Common patterns in vendor themes are to change the accent color from the default blue to something better matching their brand like orange or green, another is to have a light theme but a dark titlebar as do Ubuntu and Pop!_OS.</p>

<figure><img src="https://aplazas.pages.gitlab.gnome.org/blog/assets/blog/ubuntu-19-10-yaru-nautilus.png"/><figcaption>Files with Ubuntu's Yaru GTK theme</figcaption></figure>

<p>Application developers want to convey information via color, e.g. <a href="https://wiki.gnome.org/Apps/Web">Web</a> uses a light blue titlebar to convey you are browsing in private mode, and <a href="https://gitlab.gnome.org/ZanderBrown/kgx">Kingâ€™s Cross</a> uses a red titlebar to convey you are in super user mode and a purple one to convey you are not on the hostâ€™s shell (e.g. in a container or in SSH).</p>

<figure><img src="https://aplazas.pages.gitlab.gnome.org/blog/assets/blog/epiphany-private-titlebar.png"/><figcaption>Web in private mode</figcaption></figure>

<figure><img src="https://aplazas.pages.gitlab.gnome.org/blog/assets/blog/kgx-titlebars.png"/><figcaption>King's Cross' titlebar in super user mode and remote mode</figcaption></figure>

<p>Application developers want to inject their branding via color, e.g. Ciano has a cyan titlebar and Tootle has a desaturated blue one.
I could easily see GNOME Twitch use a purple titlebar too.</p>

<figure><img src="https://aplazas.pages.gitlab.gnome.org/blog/assets/blog/elementary-branded-titlebars.png"/><figcaption>The elementary apps Ciano and Tootle have branded titlebars</figcaption></figure>

<p>Application developers color the UI for the material meaning they convey, e.g. Notes gives a color to the notes; when viewing a specific one, almost all the window takes the noteâ€™s color, I could imagine the whole window take the noteâ€™s color.</p>

<figure><img src="https://aplazas.pages.gitlab.gnome.org/blog/assets/blog/notes-color.png"/><figcaption>Notes could have the whole UI match the colors of the note</figcaption></figure>

<p>Users want to set the systemâ€™s accent color, to make the device they use feel more like their own; to do so Windows lets its user set an accent color that will be used in the applications as the titlebar color and accent color.</p>

<h2 id="how-to-get-there">How to Get There</h2>

<p>We need to define a set of color variables and what they should be used for, like <em>selected foreground color</em> or <em>unfocused border color</em>, and these color variables should be made public and defined as the coloring API.
Adwaita already has a list of color variables which could serve as a base to forge that API.</p>

<p>To add some variety, each of these color variables would come in a specific variant; during the hackfest we defined three variants so far: <em>regular</em>, <em>titlebar</em> and <em>alternate</em> which would correspond to CSS classes you can use to automatically color elements.
<em>regular</em> would be the default color used in the whole UI, <em>titlebar</em> would correspond to the <em>titlebar</em> style class that GTK already gives by default to window titlebars, and the <em>alternate</em> style class would let the application developer apply a third style wherever they want in the UI.</p>

<p>Applications would be able to redefine the colors for all their windows via CSS, like this:</p>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@define-color</span> <span class="n">titlebar_bg_color</span> <span class="m">#f00</span><span class="p">;</span>
</code></pre></div></div>

<p>For that to work, themes would only be allowed to use these public color variables in CSS.
Given SASS hardcodes its variablesâ€™ values, its functionsâ€™ results, and the selected conditional branches in the compiled CSS, you canâ€™t affect the style by overriding the public color variables in your application.</p>

<p>In order to change the style by redefining public color variables, you have to make the color computation logic appear directly in the generated CSS, which is fortunately doable using some tricks (see the code example below).
Same limitations of not being able to use the full power of SASS can pretty easily be mitigated by offering similar color functions in GTK, but color-dependant conditional branching would have to be abandonned.</p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Here is how you can call the alpha() GTK CSS color function from SASS.</span>
<span class="k">@function</span> <span class="nf">gtkalpha</span><span class="p">(</span><span class="nv">$color</span><span class="o">,</span> <span class="nv">$alpha</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">@return</span> <span class="nf">unquote</span><span class="p">(</span><span class="s2">"alpha(</span><span class="si">#{</span><span class="nv">$color</span><span class="si">}</span><span class="s2">, </span><span class="si">#{</span><span class="nv">$alpha</span><span class="si">}</span><span class="s2">)"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Because CSS doesn't have conditional branching, this bit from Adwaita</span>
<span class="c1">// would have to be abandonned, unless we create a very specific color</span>
<span class="c1">// function in GTK for each and every case.</span>
<span class="k">@if</span> <span class="nf">lightness</span><span class="p">(</span><span class="nv">$c</span><span class="p">)</span><span class="o">&gt;</span><span class="m">95%</span> <span class="p">{</span> <span class="k">@return</span> <span class="no">white</span><span class="p">;</span> <span class="p">}</span>
<span class="k">@else</span> <span class="n">if</span> <span class="nf">lightness</span><span class="p">(</span><span class="nv">$c</span><span class="p">)</span><span class="o">&gt;</span><span class="m">90%</span> <span class="p">{</span> <span class="k">@return</span> <span class="nf">transparentize</span><span class="p">(</span><span class="no">white</span><span class="o">,</span> <span class="m">0</span><span class="mi">.2</span><span class="p">);</span> <span class="p">}</span>
<span class="k">@else</span> <span class="n">if</span> <span class="nf">lightness</span><span class="p">(</span><span class="nv">$c</span><span class="p">)</span><span class="o">&gt;</span><span class="m">80%</span> <span class="p">{</span> <span class="k">@return</span> <span class="nf">transparentize</span><span class="p">(</span><span class="no">white</span><span class="o">,</span> <span class="m">0</span><span class="mi">.5</span><span class="p">);</span> <span class="p">}</span>
<span class="k">@else</span> <span class="n">if</span> <span class="nf">lightness</span><span class="p">(</span><span class="nv">$c</span><span class="p">)</span><span class="o">&gt;</span><span class="m">50%</span> <span class="p">{</span> <span class="k">@return</span> <span class="nf">transparentize</span><span class="p">(</span><span class="no">white</span><span class="o">,</span> <span class="m">0</span><span class="mi">.8</span><span class="p">);</span> <span class="p">}</span>
<span class="k">@else</span> <span class="n">if</span> <span class="nf">lightness</span><span class="p">(</span><span class="nv">$c</span><span class="p">)</span><span class="o">&gt;</span><span class="m">40%</span> <span class="p">{</span> <span class="k">@return</span> <span class="nf">transparentize</span><span class="p">(</span><span class="no">white</span><span class="o">,</span> <span class="m">0</span><span class="mi">.9</span><span class="p">);</span> <span class="p">}</span>
<span class="k">@else</span> <span class="p">{</span> <span class="k">@return</span> <span class="nf">transparentize</span><span class="p">(</span><span class="no">white</span><span class="o">,</span> <span class="m">0</span><span class="mi">.98</span><span class="p">);</span> <span class="p">}</span>
</code></pre></div></div>

<p>Application developers too shouldnâ€™t deviate from this API as their source of colors; unless of course there is a very valid reason to opt-out.</p>

<p>This color API would be a contract between the GTK developers, theme developers, and application developers that they all should follow for colors to be tweakable.</p>

<h2 id="implementing-variants-in-adwaita">Implementing Variants in Adwaita</h2>

<p>The bulk of Adwaita is implemented in a file named <code class="highlighter-rouge">_common.scss</code>, which is then imported by the files implementing its different variants (light and dark).
In it, the label color would be set that way:</p>
<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">label</span> <span class="p">{</span> <span class="nl">color</span><span class="p">:</span> <span class="nv">$fg_color</span><span class="p">;</span> <span class="p">}</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">$fg_color</code> is a color hardcoded in Adwaita and then exported as <code class="highlighter-rouge">@theme_fg_color</code>, if we assume itâ€™s pure white, the following CSS would be generated:</p>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">label</span> <span class="p">{</span> <span class="nl">color</span><span class="p">:</span> <span class="m">#fff</span><span class="p">;</span> <span class="p">}</span>
</code></pre></div></div>

<p>To implement the color API we have two problems: Adwaita should use the overrideable color variabless from the color API in its CSS instead of hardcoded colors, and it should offer the different color variants.</p>

<p>Adwaita implements one of its theme variants that way:</p>
<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$variant</span><span class="p">:</span> <span class="s1">'light'</span><span class="p">;</span>

<span class="k">@import</span> <span class="s1">'colors'</span><span class="p">;</span>
<span class="k">@import</span> <span class="s1">'drawing'</span><span class="p">;</span>
<span class="k">@import</span> <span class="s1">'common'</span><span class="p">;</span>
<span class="k">@import</span> <span class="s1">'colors-public'</span><span class="p">;</span>
</code></pre></div></div>

<p>As you can see, <code class="highlighter-rouge">_common.scss</code> in imported via <code class="highlighter-rouge">@import 'common';</code>, and variables can be set before importing the file and used in it, like <code class="highlighter-rouge">$variant: 'light';</code>.
We could import <code class="highlighter-rouge">_common.scss</code> for each of the variants of the color API, tweaking a few variables for each import:</p>
<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$variant</span><span class="p">:</span> <span class="s1">'light'</span><span class="p">;</span>

<span class="k">@import</span> <span class="s1">'colors'</span><span class="p">;</span>
<span class="k">@import</span> <span class="s1">'drawing'</span><span class="p">;</span>

<span class="c1">// The default color variant</span>
<span class="nv">$color_selector</span><span class="p">:</span> <span class="s1">'&amp;'</span><span class="p">;</span>
<span class="nv">$fg_color</span><span class="p">:</span> <span class="nf">unquote</span><span class="p">(</span><span class="s1">'@theme_fg_color'</span><span class="p">);</span>
<span class="k">@import</span> <span class="s1">'common'</span><span class="p">;</span>

<span class="c1">// The titlebar color variant</span>
<span class="nv">$color_variant</span><span class="p">:</span> <span class="s1">'titlebar'</span><span class="p">;</span>
<span class="nv">$color_selector</span><span class="p">:</span> <span class="s1">'&amp;.</span><span class="si">#{</span><span class="nv">$color_variant</span><span class="si">}</span><span class="s1">, .</span><span class="si">#{</span><span class="nv">$color_variant</span><span class="si">}</span><span class="s1"> &amp;'</span><span class="p">;</span>
<span class="nv">$fg_color</span><span class="p">:</span> <span class="nf">unquote</span><span class="p">(</span><span class="s1">'@titlebar_fg_color'</span><span class="p">);</span>
<span class="k">@import</span> <span class="s1">'common'</span><span class="p">;</span>

<span class="c1">// The alternate color variant</span>
<span class="nv">$color_variant</span><span class="p">:</span> <span class="s1">'alternate'</span><span class="p">;</span>
<span class="nv">$color_selector</span><span class="p">:</span> <span class="s1">'&amp;.</span><span class="si">#{</span><span class="nv">$color_variant</span><span class="si">}</span><span class="s1">, .</span><span class="si">#{</span><span class="nv">$color_variant</span><span class="si">}</span><span class="s1"> &amp;'</span><span class="p">;</span>
<span class="nv">$fg_color</span><span class="p">:</span> <span class="nf">unquote</span><span class="p">(</span><span class="s1">'@alternate_fg_color'</span><span class="p">);</span>
<span class="k">@import</span> <span class="s1">'common'</span><span class="p">;</span>

<span class="k">@import</span> <span class="s1">'colors-public'</span><span class="p">;</span>
</code></pre></div></div>

<p>Then in <code class="highlighter-rouge">_common.scss</code>, every time we use a public color we would do this:</p>
<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">label</span> <span class="p">{</span> <span class="si">#{</span><span class="nv">$api_selector</span><span class="si">}</span> <span class="p">{</span> <span class="nl">color</span><span class="p">:</span> <span class="nv">$fg_color</span><span class="p">;</span> <span class="p">}</span> <span class="p">}</span>
</code></pre></div></div>

<p>The following CSS would then be generated:</p>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">label</span> <span class="p">{</span> <span class="nl">color</span><span class="p">:</span> <span class="err">@</span><span class="n">theme_fg_color</span><span class="p">;</span> <span class="p">}</span>
<span class="nt">label</span><span class="nc">.titlebar</span><span class="o">,</span> <span class="nc">.titlebar</span> <span class="nt">label</span> <span class="p">{</span> <span class="nl">color</span><span class="p">:</span> <span class="err">@</span><span class="n">titlebar_fg_color</span><span class="p">;</span> <span class="p">}</span>
<span class="nt">label</span><span class="nc">.alternate</span><span class="o">,</span> <span class="nc">.alternate</span> <span class="nt">label</span> <span class="p">{</span> <span class="nl">color</span><span class="p">:</span> <span class="err">@</span><span class="n">alternate_fg_color</span><span class="p">;</span> <span class="p">}</span>
</code></pre></div></div>

<p>By default, Adwaita would use the same color values for all color variants.</p>

<p>Tada~ ğŸ�‰ï¸�, all labels in a titlebar would have the overrideable titlebar color and all labels marked to use the alternate color would do so.</p>

<h2 id="settings-and-priorities">Settings and Priorities</h2>

<p>So far I detailed how such a coloring API could be implemented by themes and taken advantage of by apps, but I didnâ€™t explain how we could support vendor theming or user customization.
While I donâ€™t think this should be supported and implemented, and I think this API should only be between the GTK team and application developers, Iâ€™ll explain how I think we can extend it to let the vendors and the users set the colors.</p>

<p>GSettings seems like a good candidate to offer that API to vendors and users: GTK could offer to set the color variables from the API via GSetting, that means vendors could override them by a simple GSettings override, and users could override them to set their prefered colors over the default and vendor ones.</p>

<p>GTK allows different sources to provide styling, and each style provider is given a priority: GTK offers the <em>fallback</em>, <em>theme</em>, <em>settings</em>, <em>application</em>, and <em>user</em> priorities, from the lowest to the highest.
If we follow these priorities and GTK loads the colors from the settings with the <em>settings</em> priority, it means we offer what I consider the perfect priority order, from the lowest to the highest:</p>
<ul>
  <li>theme provided colors (<em>theme</em> priority);</li>
  <li>vendor provided colors (<em>settings</em> priority);</li>
  <li>user provided colors (<em>settings</em> priority, overriding the vendorâ€™s default);</li>
  <li>application provided colors (<em>application</em> priority).</li>
</ul></div>
    </content>
    <updated>2020-04-02T00:00:00Z</updated>
    <published>2020-04-02T00:00:00Z</published>
    <category term="gtk"/>
    <category term="color"/>
    <category term="vendor"/>
    <category term="branding"/>
    <category term="theming"/>
    <author>
      <name/>
    </author>
    <source>
      <id>https://aplazas.pages.gitlab.gnome.org/blog/feed.xml</id>
      <link href="https://aplazas.pages.gitlab.gnome.org/blog/feed.xml" rel="self" type="application/atom+xml"/>
      <link href="https://aplazas.pages.gitlab.gnome.org/blog/" rel="alternate" type="text/html"/>
      <title>Adrien Plazas</title>
      <updated>2020-04-07T18:33:31Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>https://hpjansson.org/blag/?p=596</id>
    <link href="https://hpjansson.org/blag/2020/04/01/chafa-1-4-0-now-with-sixels/" rel="alternate" type="text/html"/>
    <title>Chafa 1.4.0: Now with sixels</title>
    <summary>April 1st seems like as good a time as any for a new Chafa release â€” though note that Chafa is no joke. At least not anymore, what with the extremely enterprise-ready sixel pipeline and all. As usual, you can …</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>April 1st seems like as good a time as any for a new <a href="https://hpjansson.org/chafa/">Chafa</a> release <em>—</em> though note that Chafa is no joke. At least not anymore, what with the extremely enterprise-ready sixel pipeline and all.</p>



<p>As usual, you can get it <a href="https://hpjansson.org/chafa/download/">from the download page</a> or <a href="https://github.com/hpjansson/chafa">from Github</a>. There are also <a href="https://github.com/hpjansson/chafa/releases/tag/1.4.0">release notes</a>. Here are the highlights:</p>



<h2>Sixel output</h2>



<div class="wp-block-image"><figure class="aligncenter size-large"><img alt="" class="wp-image-598" src="https://hpjansson.org/blag/wp-content/uploads/2020/04/mlterm-rondane.jpg"/></figure></div>



<p>Thanks to this 90s-era technology, you can print excellent-looking graphics directly in the terminal with no need for character cell mosaics or hacky solutions like w3mimagedisplay (from <a href="https://sourceforge.net/projects/w3m/">w3m</a>) or <a href="https://github.com/seebye/ueberzug">Überzug</a>. It works entirely using ANSI escape sequence extensions, so it’s usable over ssh, telnet and that old 2400 baud modem you found in grandma’s shed.</p>



<p>The most complete existing implementation is probably Hayaki Saito’s <a href="https://github.com/saitoha/libsixel">libsixel</a>, but I chose to write one from scratch for Chafa, since sixel output is remarkably intensive computationally, and I wanted to employ a combination of advanced techniques (parallelism, quantization using a PCA approach, SIMD scaling) and corner-cutting that wouldn’t have been appropriate in that library. This gets me fast animation playback and makes it easier to phase out the ImageMagick dependency in the long term.</p>



<p>There are at least two widely available virtual terminals that support sixels: One is XTerm (when compiled with <code>--enable-sixel</code>), and the other is mlterm. Unfortunately, I don’t think either is widely <em>used</em> compared to distribution defaults like GNOME Terminal and Konsole, so here’s hoping for more mainstream support for this feature.</p>



<h2>Glyph import</h2>



<div class="wp-block-image"><figure class="aligncenter size-large"><img alt="" class="wp-image-600" src="https://hpjansson.org/blag/wp-content/uploads/2020/04/chafa-hebrew-wireframe.png"/></figure></div>



<p>If sixels aren’t your cup of tea, symbol mode has a new trick for you too. It’s <code>--glyph-file</code>, which allows you to load glyphs from external fonts into Chafa’s symbol map. This can give it a better idea of what your terminal font looks like and allows support for more exotic symbols or <a href="https://style64.org/c64-truetype">custom fonts</a> to suit any respectable retro graphics art project.</p>



<p>Keep in mind that you still need to select the appropriate symbol ranges with <code>--symbols</code> and/or <code>--fill</code>. These options now allow specifying precise Unicode ranges, e.g. <code>--symbols 20,41..5a</code> to emit only ASCII spaces and uppercase letters.</p>



<h2>Color extraction</h2>



<div class="wp-block-image"><figure class="aligncenter size-large"><img alt="" class="wp-image-599" src="https://hpjansson.org/blag/wp-content/uploads/2020/04/chafa-color-extractor.gif"/></figure></div>



<p>In symbol mode, each cell’s color pair is now based on the median color of the underlying pixels instead of the average. Now this isn’t exactly a huge feature, at least not in terms of effort, but it can make a big difference for certain images, especially line art. You can get the old behavior back with <code>--color-extractor average</code>.</p></div>
    </content>
    <updated>2020-04-01T21:25:15Z</updated>
    <published>2020-04-01T21:25:15Z</published>
    <category term="Computing"/>
    <category term="Technical"/>
    <category term="ansi art"/>
    <category term="chafa"/>
    <category term="release"/>
    <category term="terminal graphics"/>
    <author>
      <name>Hans Petter Jansson</name>
    </author>
    <source>
      <id>https://hpjansson.org/blag</id>
      <link href="https://hpjansson.org/blag/feed/" rel="self" type="application/rss+xml"/>
      <link href="https://hpjansson.org/blag" rel="alternate" type="text/html"/>
      <title>Et tu, Cthulhu</title>
      <updated>2020-04-01T21:31:05Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>http://blog.gtk.org/?p=7696</id>
    <link href="https://blog.gtk.org/2020/04/01/gtk-3-98-2/" rel="alternate" type="text/html"/>
    <title>GTK 3.98.2</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">When we released 3.98.0, we promised more frequent snapshots, as the remaining GTK 4 features are landing. Here we are a few weeks later, and 3.98.1 and 3.98.2 snapshots have quietly made it out. So, what is new ? Features There is still work left to do, but a few more big features have landed. … <a class="more-link" href="https://blog.gtk.org/2020/04/01/gtk-3-98-2/">Continue reading<span class="screen-reader-text"> "GTK 3.98.2"</span></a></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>When we released 3.98.0, we promised more frequent snapshots, as the remaining GTK 4 features are landing. Here we are a few weeks later, and 3.98.1 and 3.98.2 snapshots have quietly made it out.</p>
<p>So, what is new ?</p>
<h3>Features</h3>
<p>There is still work left to do, but a few more big features have landed.</p>
<p>The first is that we have completed the reimplementation of GtkPopovers as xdg-popup surfaces, and split up the GdkSurface API into separate <a href="https://developer.gnome.org/gdk4/3.98/GdkToplevel.html"><em>GdkToplevel</em></a> and <a href="https://developer.gnome.org/gdk4/3.98/GdkPopup.html"><em>GdkPopup</em></a> interfaces (there’s a GdkDragSurface interface too), which reflect the different roles of surfaces:</p>
<ul>
<li>Toplevels are sovereign windows that are placed by the user and can be maximized, fullscreened, etc.</li>
<li>Popups are positioned relative to a parent surface and often grab input, e.g. when used for menus.</li>
</ul>
<p>In GTK, popovers have lost their :relative-to property, since they are now part of the regular hierarchy like any other widget, and GtkWindow has lost its :window-type property, since all instances of GTK_WINDOW_POPUP have been converted to popovers, and windows are just used for proper toplevels.</p>
<p>Another major feature is the new infrastructure for keyboard shortcuts. In the past, GTK has had a plethora of APIs to implement key bindings, mnemonics and accelerators. In GTK 4, all of this is handled by event controllers. <em>GtkShortcutController</em> is a bit more complex than typical event controllers, since it handles all the different kinds of shortcuts with a unified API.</p>
<p>Thankfully, most of the complexity is hidden. For widget implementors, the important APIs are the variants of gtk_widget_class_add_shortcut(), which are used to add key bindings. For applications, mnemonics and global accels (with gtk_application_set_accels_for_action()) work the same as before. Additionally, it is possible to create shortcut controllers and shortcuts in ui files.</p>
<p>A set of smaller features has landed in the form of a few GtkTextTag properties that expose new <em>pango features</em> such as overlines, visible rendering of spaces and control over hyphenation. These can now be controlled in a GtkTextView via tags. In entries, they can already be controlled by directly adding pango attributes.</p>
<h3>Completions</h3>
<p>When I wrote about 3.98, I said that the Drag-and-Drop refactoring was complete. That turned out to be not quite correct, and another round of DND work has landed since. These changes were informed by developer feedback on the Drag-and-Drop API. Yay for user testing!</p>
<p>We introduced separate GtkDropTarget and GtkDropTargetAsync event controllers, with the former being simplified to avoid all async API, which makes it very easy to handle local cases.</p>
<p>We also cleaned up internals of the DND implementation to group DND events into event sequences, handle them in just the same way as normal motion events,Â  and introduced GtkDropControllerMotion, which is an event controller that is designed to handle things like tab switching during a DND operation.</p>
<p>Finally, we could remove the remnants of X11-style property and selection APIs; GtkSelectionData and GdkAtom are gone.</p>
<h3>Cleanups and fixes</h3>
<p>As always, there’s a large number of smaller cleanups and fixes that have happened.</p>
<p>The biggest group of cleanups happened in the file chooser, where a number of marginally useful APIs (extra widgets, overwrite confirmation, :local-only, GTK_FILE_CHOOSER_ACTION_CREATE_FOLDER, etc) have been dropped. To make up for it, the portal implementation of the native file chooser supports selecting folders now.</p>
<p>Another big cleanup was that GdkEvent is now an immutable boxed type. This was mainly an internal cleanup; the effect on application-level APIs is small, since event controllers have replaced direct event handling for the most part.</p>
<p>One new such event controller is GdkEventControllerFocus, which was split of from the key event controller to provide just focus handling.</p>
<p>GtkMenuButton lost its ability to have mnemonics when it was turned from a GtkButton subclass into a plain widget. This functionality has been reinstated, with a :use-underline property.</p>
<p>The HighContrast and HighContrastInverse themes that are included in GTK are now derived from Adwaita, for a much reduced maintainance burden and improved quality. Trying these themes out in gtk4-widget-factory is now easier, since we added a style menu.</p>
<p><a href="https://blog.gtk.org/files/2020/04/Screenshot-from-2020-04-01-15-10-40.png"><img alt="" class="alignnone size-full wp-image-7723" height="1080" src="https://blog.gtk.org/files/2020/04/Screenshot-from-2020-04-01-15-10-40.png" width="1920"/></a></p>
<p>The new HighContrast theme has also been backported to GTK 3.</p>
<h3>Whats ahead</h3>
<p>We will continue our snapshots and hope to get more developer feedback on the new APIs and features described above.</p>
<p>Here are things that we still want to integrate before GTK 4:</p>
<ul>
<li>Row-recycling list and grid views</li>
<li>Revamped accessibility infrastructure</li>
<li>Animation API</li>
</ul>
<p>If you want to follow the GTK 4 work, go <a href="https://gitlab.gnome.org/GNOME/gtk/-/milestones/1">here</a>.</p></div>
    </content>
    <updated>2020-04-01T19:15:41Z</updated>
    <published>2020-04-01T19:15:41Z</published>
    <category term="uncategorized"/>
    <author>
      <name>mclasen</name>
    </author>
    <source>
      <id>https://blog.gtk.org</id>
      <link href="https://blog.gtk.org/author/mclasen/feed/" rel="self" type="application/rss+xml"/>
      <link href="https://blog.gtk.org" rel="alternate" type="text/html"/>
      <subtitle>All things GTK</subtitle>
      <title>mclasen – GTK Development Blog</title>
      <updated>2020-04-01T19:15:41Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-977684764667858073.post-6523900109144977946</id>
    <link href="http://www.hadess.net/feeds/6523900109144977946/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/>
    <link href="http://www.blogger.com/comment.g?blogID=977684764667858073&amp;postID=6523900109144977946" rel="replies" title="0 Comments" type="text/html"/>
    <link href="http://www.blogger.com/feeds/977684764667858073/posts/default/6523900109144977946" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/977684764667858073/posts/default/6523900109144977946" rel="self" type="application/atom+xml"/>
    <link href="http://www.hadess.net/2020/04/pam-testing-using-pamwrapper-and.html" rel="alternate" title="PAM testing using pam_wrapper and dbusmock" type="text/html"/>
    <title>PAM testing using pam_wrapper and dbusmock</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">On the road to <a href="https://www.hadess.net/2019/08/libfprint-10-and-fprintd-090.html">libfprint and fprintd 2.0</a>, we've been fixing some long-standing bugs, including one that required porting our PAM module from dbus-glib to sd-bus, systemd's D-Bus library implementation.<br/><br/>As you can imagine, I have confidence in my ability to write bug-free code at the first attempt, but the foresight to know that this code will be buggy if it's not tested (and to know there's probably a bug in the tests if they run successfully the first time around). So we will have to test that PAM module, thoroughly, before and after the port.<br/><br/><b>Replacing fprintd</b><br/><br/>First, to make it easier to run and instrument, we needed to replace fprintd itself. For this, we used <a href="https://github.com/martinpitt/python-dbusmock/">dbusmock</a>, which is both a convenience Python library and way to write instrumentable D-Bus services, and wrote a <a href="https://gitlab.freedesktop.org/libfprint/fprintd/-/tree/master/tests%2Fdbusmock">template</a>. There are a number of <a href="https://github.com/martinpitt/python-dbusmock/tree/master/dbusmock/templates">existing templates</a> for a lot of session and system services, in case you want to test the integration of your code with NetworkManager, low-memory-monitor, or any number of other services.<br/><br/>We then used this to write <a href="https://gitlab.freedesktop.org/libfprint/fprintd/-/blob/master/tests/test_fprintd_utils.py">tests for the command-line utilities</a>, so we can both test our new template and test the command-line utilities themselves.<br/><br/><b>Replacing gdm</b><br/><br/>Now that we've got a way to replace fprintd and a physical fingerprint reader, we should write some tests for the (old) PAM module to replace sudo, gdm, or the login authentication services.<br/><br/>Co-workers Andreas Schneier and Jakub Hrozek worked on <a href="https://gitlab.com/cwrap/pam_wrapper/">pam_wrapper</a>, an <span>LD_PRELOAD</span> library to mock the PAM library, and Python helpers to write simple PAM services. <a href="https://lwn.net/Articles/671094/">This LWN article</a> explains how to test PAM applications, and PAM modules.<br/><br/>After fixing a few bugs in pam_wrapper, and combining with the fprintd dbusmock work above, we could <a href="https://gitlab.freedesktop.org/libfprint/fprintd/-/blob/master/tests/pam/test_pam_fprintd.py">wrap and test the fprintd PAM module</a> like it never was before.<br/><br/><b>Porting to sd-bus</b><br/><br/>Finally, porting the PAM module to sd-bus was pretty trivial, a loop of 1) writing tests that work against the old PAM module, 2) porting a section of the code (like the fingerprint reader enumeration, or the timeout support), and 3) testing against the new sd-bus based code. The result was no regressions that we could test for.<br/><br/><b>Conclusion</b><br/><br/>Both <a href="https://github.com/martinpitt/python-dbusmock/">dbusmock</a>, and <a href="https://gitlab.com/cwrap/pam_wrapper/">pam_wrapper</a> are useful tools in your arsenal to write tests, and given those (fairly) easy to use CIs in GNOME and FreeDesktop.org's GitLabs, it would be a shame not to.<br/><br/>You might also be interested in <a href="https://github.com/martinpitt/umockdev">umockdev</a>, to mock a number of device types, and <a href="https://code.google.com/archive/p/mocklibc/">mocklibc</a> (which combined with dbusmock <a href="https://gitlab.freedesktop.org/polkit/polkit/-/merge_requests/46">powers polkit's unattended CI</a>)</div>
    </content>
    <updated>2020-04-01T16:53:00Z</updated>
    <published>2020-04-01T16:53:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="dbus"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="dbusmock"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="fprintd"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="libfprint"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="pam"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="pam_wrapper"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="python"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="systemd"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="udev"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="umockdev"/>
    <author>
      <name>Bastien Nocera</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/14621847888418739807</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-977684764667858073</id>
      <category term="gnome"/>
      <category term="totem"/>
      <category term="bluetooth"/>
      <category term="fedora"/>
      <category term="guadec"/>
      <category term="gnome-bluetooth"/>
      <category term="football"/>
      <category term="films"/>
      <category term="hackfest"/>
      <category term="funny"/>
      <category term="control-center"/>
      <category term="manutd"/>
      <category term="epiphany"/>
      <category term="gtk+"/>
      <category term="ps3"/>
      <category term="gnome-shell"/>
      <category term="grilo"/>
      <category term="gstreamer"/>
      <category term="kernel"/>
      <category term="linux"/>
      <category term="bugs"/>
      <category term="gnome 3"/>
      <category term="gvfs"/>
      <category term="webkit"/>
      <category term="bluez"/>
      <category term="fprint"/>
      <category term="freefa"/>
      <category term="geoclue"/>
      <category term="rhythmbox"/>
      <category term="videos"/>
      <category term="design"/>
      <category term="flatpak"/>
      <category term="freedesktop"/>
      <category term="pulseaudio"/>
      <category term="stripes"/>
      <category term="apple"/>
      <category term="gcds"/>
      <category term="gnome-phone-manager"/>
      <category term="gnome-settings-daemon"/>
      <category term="hardware"/>
      <category term="thumbnailer"/>
      <category term="NetworkManager"/>
      <category term="browser plugin"/>
      <category term="dell"/>
      <category term="empathy"/>
      <category term="france"/>
      <category term="glib"/>
      <category term="gnome-media"/>
      <category term="lirc"/>
      <category term="obex"/>
      <category term="upower"/>
      <category term="wayland"/>
      <category term="youtube"/>
      <category term="dbus"/>
      <category term="drivers"/>
      <category term="flash"/>
      <category term="games"/>
      <category term="gnokii"/>
      <category term="google"/>
      <category term="laptop"/>
      <category term="lua"/>
      <category term="nautilus"/>
      <category term="podcast"/>
      <category term="shared-mime-info"/>
      <category term="systemd"/>
      <category term="tablet"/>
      <category term="telepathy"/>
      <category term="touch"/>
      <category term="ubuntu"/>
      <category term="wacom"/>
      <category term="xdg"/>
      <category term="afc"/>
      <category term="amazon"/>
      <category term="bbc"/>
      <category term="fifa"/>
      <category term="gnome-control-center"/>
      <category term="gnome-lirc-properties"/>
      <category term="gnome-user-share"/>
      <category term="gnome3"/>
      <category term="gom"/>
      <category term="guardian"/>
      <category term="keyboard"/>
      <category term="libfprint"/>
      <category term="mythtv"/>
      <category term="playlist parser"/>
      <category term="power"/>
      <category term="red hat"/>
      <category term="remote control"/>
      <category term="upnp"/>
      <category term="volume control"/>
      <category term="xdg-app"/>
      <category term="xorg"/>
      <category term="arm"/>
      <category term="blog"/>
      <category term="bugzilla"/>
      <category term="chip"/>
      <category term="codec buddy"/>
      <category term="dvd"/>
      <category term="ebay"/>
      <category term="features"/>
      <category term="firefox"/>
      <category term="foundation"/>
      <category term="freebox"/>
      <category term="gdk-pixbuf"/>
      <category term="git"/>
      <category term="gjs"/>
      <category term="gnome-session"/>
      <category term="gobject-introspection"/>
      <category term="iphone"/>
      <category term="itunes"/>
      <category term="jdll"/>
      <category term="libgweather"/>
      <category term="lyon"/>
      <category term="movie"/>
      <category term="nokia"/>
      <category term="pocket"/>
      <category term="politics"/>
      <category term="rawhide"/>
      <category term="release"/>
      <category term="releases"/>
      <category term="retro"/>
      <category term="ross"/>
      <category term="settings"/>
      <category term="sony ericsson"/>
      <category term="subtitles"/>
      <category term="suspend"/>
      <category term="theme"/>
      <category term="thomson"/>
      <category term="toys"/>
      <category term="translations"/>
      <category term="tv"/>
      <category term="udev"/>
      <category term="video"/>
      <category term="wishlist"/>
      <category term="a11y"/>
      <category term="accelerometer"/>
      <category term="als"/>
      <category term="application"/>
      <category term="birthday"/>
      <category term="bluetooth-sendto"/>
      <category term="builder"/>
      <category term="ca va pas"/>
      <category term="champions"/>
      <category term="cheese"/>
      <category term="cinema"/>
      <category term="clutter"/>
      <category term="comics"/>
      <category term="compass"/>
      <category term="contacts"/>
      <category term="critics"/>
      <category term="cross compilation"/>
      <category term="desktop summit"/>
      <category term="development"/>
      <category term="documentation"/>
      <category term="dual-gpu"/>
      <category term="dvb"/>
      <category term="ebook"/>
      <category term="ebooks"/>
      <category term="eeepc"/>
      <category term="epub"/>
      <category term="euro 08"/>
      <category term="ffmpeg"/>
      <category term="firewall"/>
      <category term="gdb"/>
      <category term="geeksphone"/>
      <category term="geocoding"/>
      <category term="gnome-books"/>
      <category term="gnome-builder"/>
      <category term="gnome-power-manager"/>
      <category term="google video"/>
      <category term="hadouken"/>
      <category term="humble bundle"/>
      <category term="icons"/>
      <category term="igalia"/>
      <category term="interviews"/>
      <category term="ipad"/>
      <category term="ipod touch"/>
      <category term="javascript"/>
      <category term="joypad"/>
      <category term="kde"/>
      <category term="languages"/>
      <category term="libimobiledevice"/>
      <category term="libreoffice"/>
      <category term="light"/>
      <category term="low-memory-monitor"/>
      <category term="macos x"/>
      <category term="moblin"/>
      <category term="motorola"/>
      <category term="multitouch"/>
      <category term="nautilus-sendto"/>
      <category term="ninja gaiden"/>
      <category term="nintendo ds"/>
      <category term="notifications"/>
      <category term="office-runner"/>
      <category term="ogg"/>
      <category term="old age"/>
      <category term="old farts"/>
      <category term="olivier"/>
      <category term="online desktop"/>
      <category term="opengl"/>
      <category term="optimus"/>
      <category term="pedant"/>
      <category term="playstation"/>
      <category term="plumbers"/>
      <category term="privacy"/>
      <category term="python"/>
      <category term="qemu"/>
      <category term="radio"/>
      <category term="rip"/>
      <category term="rotation"/>
      <category term="samsung"/>
      <category term="script"/>
      <category term="search"/>
      <category term="series"/>
      <category term="shit-in-a-box"/>
      <category term="sixaxis"/>
      <category term="sms"/>
      <category term="sound"/>
      <category term="spam"/>
      <category term="speaker"/>
      <category term="stripes-guy"/>
      <category term="svn"/>
      <category term="symbolic"/>
      <category term="tango"/>
      <category term="usability"/>
      <category term="usb"/>
      <category term="vim"/>
      <category term="website"/>
      <category term="wine"/>
      <category term="wireless"/>
      <category term="xcompile"/>
      <category term="xfce"/>
      <category term="xine-lib"/>
      <category term="10 years"/>
      <category term="3g"/>
      <category term="5 years"/>
      <category term="8-bit"/>
      <category term="C.H.I.P."/>
      <category term="PolicyKit"/>
      <category term="RAM"/>
      <category term="abrt"/>
      <category term="adafruit"/>
      <category term="adb"/>
      <category term="adobe"/>
      <category term="adreno"/>
      <category term="adwaita"/>
      <category term="airplane mode"/>
      <category term="alsa"/>
      <category term="ambient light sensor"/>
      <category term="android"/>
      <category term="animation"/>
      <category term="article"/>
      <category term="audio"/>
      <category term="avahi"/>
      <category term="avr"/>
      <category term="backlight"/>
      <category term="bank holidays"/>
      <category term="basket-ball"/>
      <category term="beer"/>
      <category term="bemused"/>
      <category term="berlin"/>
      <category term="best practices"/>
      <category term="blu-ray"/>
      <category term="board"/>
      <category term="bolso"/>
      <category term="boo hiss"/>
      <category term="boston"/>
      <category term="brasil"/>
      <category term="brazil"/>
      <category term="bretzel"/>
      <category term="brightness"/>
      <category term="brno"/>
      <category term="broadband"/>
      <category term="bug day"/>
      <category term="bundle"/>
      <category term="cairo"/>
      <category term="calendar"/>
      <category term="call for papers"/>
      <category term="canonical"/>
      <category term="capitalism"/>
      <category term="captive"/>
      <category term="cfp"/>
      <category term="chema"/>
      <category term="chpe"/>
      <category term="chrome"/>
      <category term="chrome os"/>
      <category term="chuck norris"/>
      <category term="clang"/>
      <category term="click"/>
      <category term="client-side windows"/>
      <category term="clocks"/>
      <category term="clothes"/>
      <category term="clutter-gtk"/>
      <category term="comedy club"/>
      <category term="comic relief"/>
      <category term="compression"/>
      <category term="computer"/>
      <category term="con"/>
      <category term="conduit"/>
      <category term="contact-lookup-applet"/>
      <category term="content apps"/>
      <category term="contest"/>
      <category term="contributors"/>
      <category term="corey"/>
      <category term="corporation"/>
      <category term="coscup"/>
      <category term="crack"/>
      <category term="culture beat"/>
      <category term="d420"/>
      <category term="daily mail"/>
      <category term="danny stone"/>
      <category term="dbusmock"/>
      <category term="dd-wrt"/>
      <category term="deadly snail"/>
      <category term="debian"/>
      <category term="debugging"/>
      <category term="defective bodyparts"/>
      <category term="dell mini"/>
      <category term="delta airlines"/>
      <category term="den haag"/>
      <category term="desktop"/>
      <category term="devicekit"/>
      <category term="devil"/>
      <category term="diego"/>
      <category term="dirty scouse"/>
      <category term="discident"/>
      <category term="displaylink"/>
      <category term="divx"/>
      <category term="dns"/>
      <category term="domestic"/>
      <category term="dri3"/>
      <category term="ds4"/>
      <category term="ebbsfleet united"/>
      <category term="elantech"/>
      <category term="elsass"/>
      <category term="embedded"/>
      <category term="emoji"/>
      <category term="endless"/>
      <category term="esperanto"/>
      <category term="event box"/>
      <category term="everton"/>
      <category term="evil"/>
      <category term="evince"/>
      <category term="fail"/>
      <category term="fake"/>
      <category term="fallback"/>
      <category term="filesystems"/>
      <category term="fingerprint reader"/>
      <category term="flathub"/>
      <category term="fleet street"/>
      <category term="floods"/>
      <category term="fluendo"/>
      <category term="folks"/>
      <category term="fonz"/>
      <category term="fprintd"/>
      <category term="france inter"/>
      <category term="fran&#xE7;ais"/>
      <category term="freedreno"/>
      <category term="freestylers"/>
      <category term="freud"/>
      <category term="frog"/>
      <category term="gadget"/>
      <category term="galago"/>
      <category term="gandi"/>
      <category term="geoip"/>
      <category term="gesture"/>
      <category term="gettext"/>
      <category term="gift"/>
      <category term="gimp"/>
      <category term="giveaway"/>
      <category term="gizmo"/>
      <category term="gmyth"/>
      <category term="gnapplet"/>
      <category term="gnome-documents"/>
      <category term="gnome-multiwriter"/>
      <category term="gnome-music"/>
      <category term="gnome-obex-send"/>
      <category term="gnome-obex-server"/>
      <category term="gnome-online-accounts"/>
      <category term="gnome-pilot"/>
      <category term="gobject"/>
      <category term="gog"/>
      <category term="golf"/>
      <category term="goom"/>
      <category term="gps"/>
      <category term="gromit"/>
      <category term="gthread"/>
      <category term="gtk-parasite"/>
      <category term="guilfest"/>
      <category term="gupnp"/>
      <category term="gwladys"/>
      <category term="gypsy"/>
      <category term="hackergotchi"/>
      <category term="hacking"/>
      <category term="hacks"/>
      <category term="halloween"/>
      <category term="harry"/>
      <category term="headphones"/>
      <category term="headset"/>
      <category term="heroes"/>
      <category term="hidden"/>
      <category term="house arrest"/>
      <category term="huawei"/>
      <category term="i18n"/>
      <category term="icedtea"/>
      <category term="icns"/>
      <category term="id theft"/>
      <category term="iio"/>
      <category term="iio-sensor-proxy"/>
      <category term="illustrator"/>
      <category term="im"/>
      <category term="imdb"/>
      <category term="imobiledevice"/>
      <category term="inhibit"/>
      <category term="instapaper"/>
      <category term="intel rapid start"/>
      <category term="interruptions"/>
      <category term="iso"/>
      <category term="istanbul"/>
      <category term="jack sensing"/>
      <category term="java"/>
      <category term="jds"/>
      <category term="jmp"/>
      <category term="job"/>
      <category term="kerberos"/>
      <category term="kid"/>
      <category term="kiosk"/>
      <category term="kobo"/>
      <category term="krita"/>
      <category term="last.fm"/>
      <category term="lazy"/>
      <category term="libarchive"/>
      <category term="libcanberra"/>
      <category term="licences"/>
      <category term="lightning talk"/>
      <category term="linux magazine"/>
      <category term="liverpool"/>
      <category term="llvm"/>
      <category term="locale"/>
      <category term="logitech"/>
      <category term="loki"/>
      <category term="london"/>
      <category term="lovefilm"/>
      <category term="lovelock"/>
      <category term="mac mini"/>
      <category term="maemo"/>
      <category term="mailman"/>
      <category term="maintainer"/>
      <category term="making"/>
      <category term="manchester"/>
      <category term="mandriva"/>
      <category term="maps"/>
      <category term="margarita"/>
      <category term="megadrive"/>
      <category term="meme"/>
      <category term="memory"/>
      <category term="microphone"/>
      <category term="microsoft"/>
      <category term="mo5"/>
      <category term="mobi"/>
      <category term="moron"/>
      <category term="mpris"/>
      <category term="mpv"/>
      <category term="mugshot"/>
      <category term="music"/>
      <category term="mypaint"/>
      <category term="nba"/>
      <category term="neologism"/>
      <category term="new statesman"/>
      <category term="nintendo"/>
      <category term="noddy"/>
      <category term="nostalgia"/>
      <category term="nurnberg"/>
      <category term="nutella"/>
      <category term="oled"/>
      <category term="openismus"/>
      <category term="openraster"/>
      <category term="opensubtitles"/>
      <category term="opera"/>
      <category term="opw"/>
      <category term="osd"/>
      <category term="owncloud"/>
      <category term="pam"/>
      <category term="pam_wrapper"/>
      <category term="pangram"/>
      <category term="panto"/>
      <category term="party"/>
      <category term="patches"/>
      <category term="paypal"/>
      <category term="perl"/>
      <category term="peter serafinowicz"/>
      <category term="phone"/>
      <category term="photos"/>
      <category term="pidgin"/>
      <category term="pimusicbox"/>
      <category term="pipewire"/>
      <category term="poche"/>
      <category term="portuguese"/>
      <category term="portugu&#xEA;s"/>
      <category term="poulsbo"/>
      <category term="powertop"/>
      <category term="presentation"/>
      <category term="printer"/>
      <category term="proxy"/>
      <category term="ps4"/>
      <category term="qmi"/>
      <category term="qualcomm"/>
      <category term="quicktime"/>
      <category term="rar"/>
      <category term="raspberry pi"/>
      <category term="ratchet and clank"/>
      <category term="record"/>
      <category term="rental"/>
      <category term="resolv.conf"/>
      <category term="retroarch"/>
      <category term="retrode"/>
      <category term="retromancave"/>
      <category term="reverse engineering"/>
      <category term="review"/>
      <category term="rfkill"/>
      <category term="rio"/>
      <category term="rio500"/>
      <category term="router"/>
      <category term="rpi"/>
      <category term="rpm"/>
      <category term="rtl8723bs"/>
      <category term="rugby"/>
      <category term="running man"/>
      <category term="rygel"/>
      <category term="safari"/>
      <category term="sagem"/>
      <category term="sal&#xFC;"/>
      <category term="scratch"/>
      <category term="screencast"/>
      <category term="screensaver"/>
      <category term="sd card"/>
      <category term="security"/>
      <category term="security errata"/>
      <category term="sega"/>
      <category term="sensor"/>
      <category term="service"/>
      <category term="sharing"/>
      <category term="shinobi"/>
      <category term="shop"/>
      <category term="silly"/>
      <category term="simple pairing"/>
      <category term="simpsons"/>
      <category term="sitcoms"/>
      <category term="smoking"/>
      <category term="snes"/>
      <category term="social"/>
      <category term="socks"/>
      <category term="software"/>
      <category term="sound-juicer"/>
      <category term="soundbox"/>
      <category term="speaker testing"/>
      <category term="spice"/>
      <category term="sponsors"/>
      <category term="spotify"/>
      <category term="sql"/>
      <category term="sqlite"/>
      <category term="stage6"/>
      <category term="stanza"/>
      <category term="starbucks"/>
      <category term="starsky"/>
      <category term="status icon"/>
      <category term="stormy"/>
      <category term="strasbourg"/>
      <category term="streaming"/>
      <category term="stupid"/>
      <category term="summer of code"/>
      <category term="sun"/>
      <category term="surface"/>
      <category term="suse"/>
      <category term="taipei"/>
      <category term="taxi"/>
      <category term="teensy"/>
      <category term="templates"/>
      <category term="test suite"/>
      <category term="the register"/>
      <category term="theora"/>
      <category term="tizen"/>
      <category term="tla"/>
      <category term="tmk"/>
      <category term="tories"/>
      <category term="toshiba"/>
      <category term="touchpad"/>
      <category term="touchscreen"/>
      <category term="trackball"/>
      <category term="tracker"/>
      <category term="triage"/>
      <category term="tripes"/>
      <category term="tvcatchup"/>
      <category term="twitter"/>
      <category term="udraw"/>
      <category term="ui hell"/>
      <category term="umockdev"/>
      <category term="unity"/>
      <category term="unlocking"/>
      <category term="upstream"/>
      <category term="utc"/>
      <category term="uwb"/>
      <category term="vaio"/>
      <category term="vichy"/>
      <category term="vimeo"/>
      <category term="vino"/>
      <category term="vlc"/>
      <category term="vnc"/>
      <category term="vorbis"/>
      <category term="vt"/>
      <category term="vuntz"/>
      <category term="wake-ups"/>
      <category term="walk500"/>
      <category term="wasting time"/>
      <category term="wedding"/>
      <category term="west wing"/>
      <category term="wetab"/>
      <category term="wifi"/>
      <category term="wiki"/>
      <category term="windowmaker"/>
      <category term="windows 8"/>
      <category term="windows media player"/>
      <category term="woking"/>
      <category term="work"/>
      <category term="xan"/>
      <category term="xbmc"/>
      <category term="xiph"/>
      <category term="xlib"/>
      <category term="zip"/>
      <category term="zlib"/>
      <category term="zombies"/>
      <category term="zonbu"/>
      <author>
        <name>Bastien Nocera</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/14621847888418739807</uri>
      </author>
      <link href="http://www.hadess.net/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/977684764667858073/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://www.hadess.net/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="http://www.blogger.com/feeds/977684764667858073/posts/default?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <title>/bɑs ˈtjɛ̃ no ˈse ʁɑ/  (hadess) | News</title>
      <updated>2020-04-05T11:56:23Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>https://blogs.gnome.org/mcatanzaro/?p=8928</id>
    <link href="https://blogs.gnome.org/mcatanzaro/2020/03/31/sandboxing-webkitgtk-apps/" rel="alternate" type="text/html"/>
    <title>Sandboxing WebKitGTK Apps</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">When you connect to a Wi-Fi network, that network might block your access to the wider internet until you’ve signed into the network’s captive portalÂ page. An untrusted network can disrupt your connection at any time by blocking secure requests and replacing the content of insecure requests with its login page. (Of course this can be … <p class="link-more"><a class="more-link" href="https://blogs.gnome.org/mcatanzaro/2020/03/31/sandboxing-webkitgtk-apps/">Continue reading<span class="screen-reader-text"> "Sandboxing WebKitGTK Apps"</span></a></p></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>When you connect to a Wi-Fi network, that network might block your access to the wider internet until you’ve signed into the network’s <a href="https://en.wikipedia.org/wiki/Captive_portal">captive portal</a> page. An untrusted network can disrupt your connection at any time by blocking secure requests and replacing the content of insecure requests with its login page. (Of course this can be done on wired networks as well, but in practice it mainly happens on Wi-Fi.) To detect a captive portal, NetworkManager sends a request to a special test address (e.g. http://fedoraproject.org/static/hotspot.txt) and checks to see whether it the content has been replaced. If so, GNOME Shell will open a little WebKitGTK browser window to display http://nmcheck.gnome.org, which, due to the captive portal, will be hijacked by your hotel or airport or whatever to display the portal login page. Rephrased in security lingo: an untrusted network may cause GNOME Shell to load arbitrary web content whenever it wants. If that doesn’t immediately sound dangerous to you, <a href="https://blogs.gnome.org/mcatanzaro/2016/02/01/on-webkit-security-updates/">let’s ask me from four years ago why that might be bad</a>:</p>
<blockquote><p>Web engines are full of security vulnerabilities, like buffer overflows and use-after-frees. The details don’t matter; what’s important is that skilled attackers can turn these vulnerabilities into exploits, using carefully-crafted HTML to gain total control of your user account on your computer (or your phone). They can then install malware, read all the files in your home directory, use your computer in a botnet to attack websites, and do basically whatever they want with it.</p>
<p>If the web engine is sandboxed, then a second type of attack, called a sandbox escape, is needed. This makes it dramatically more difficult to exploit vulnerabilities.</p></blockquote>
<p>The captive portal helper will pop up and load arbitrary web content <em>without user </em><i>interaction</i>, so there’s nothing you as a user could possibly do about it. This makes it a tempting target for attackers, so we want to ensure that users are safe in the absence of a sandbox escape. Accordingly, beginning with GNOME 3.36, the captive portal helper is now sandboxed.</p>
<p>How did we do it? With basically one line of code (plus a check to ensure the WebKitGTK version is new enough). To sandbox any WebKitGTK app, just call <code>webkit_web_context_set_sandbox_enabled()</code>. Ta-da, your application is now magically secure!</p>
<p>No, really, that’s all you need to do. So if it’s that simple, why isn’t the sandbox enabled by default? It can break applications that use WebKitWebExtension to run custom code in the sandboxed web process, so you’ll need to test to ensure that your application still works properly after enabling the sandbox. (The WebKitGTK sandbox will become mandatory in the future when porting applications to GTK 4. That’s thinking far ahead, though, because GTK 4 isn’t supported yet at all.) You may need to use <code>webkit_web_context_add_path_to_sandbox()</code> to give your web extension access to directories that would otherwise be blocked by the sandbox.</p>
<p>The sandbox is critically important for web browsers and email clients, which are constantly displaying untrusted web content. But really, every app should enable it. Fix your apps! Then thank Patrick Griffis from Igalia for developing WebKitGTK’s sandbox, and the bubblewrap, Flatpak, and xdg-desktop-portal developers for providing the groundwork that makes it all possible.</p></div>
    </content>
    <updated>2020-03-31T15:56:55Z</updated>
    <published>2020-03-31T15:56:55Z</published>
    <category term="GNOME"/>
    <category term="WebKit"/>
    <author>
      <name>Michael Catanzaro</name>
    </author>
    <source>
      <id>https://blogs.gnome.org/mcatanzaro</id>
      <link href="https://blogs.gnome.org/mcatanzaro/feed/" rel="self" type="application/rss+xml"/>
      <link href="https://blogs.gnome.org/mcatanzaro" rel="alternate" type="text/html"/>
      <title>Michael Catanzaro</title>
      <updated>2020-03-31T15:56:55Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://samthursfield.wordpress.com/?p=1370</id>
    <link href="https://samthursfield.wordpress.com/2020/03/31/api-changes-in-tracker-3-0/" rel="alternate" type="text/html"/>
    <title>API changes in Tracker 3.0</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This article has been updated to correct a misunderstanding I had about the CONSTRAINT feature. Apps will not need to explicitly add this to their queries, it will be added implicitly by the xdg-tracker-portal process.. Lots has happened in … <a href="https://samthursfield.wordpress.com/2020/03/31/api-changes-in-tracker-3-0/">Continue reading <span class="meta-nav">→</span></a></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p> </p>
<div class="wp-caption alignright" id="attachment_1372" style="width: 324px;"><img alt="OLYMPUS DIGITAL CAMERA" class="  wp-image-1372 alignright" height="236" src="https://samthursfield.files.wordpress.com/2020/03/ifton_meadows_covered_by_ifton_colliery_bing_-_geograph.org_.uk_-_68898.jpg?w=314&amp;h=236" width="314"/><p class="wp-caption-text" id="caption-attachment-1372"><a href="https://commons.wikimedia.org/wiki/File:Ifton_Meadows_covered_by_Ifton_Colliery_bing_-_geograph.org.uk_-_68898.jpg">Ifton Meadows</a></p></div>
<p><em>This article has been updated to correct a misunderstanding I had about the CONSTRAINT feature. Apps will not need to explicitly add this to their queries, it will be added implicitly by the <a href="https://gitlab.gnome.org/GNOME/tracker/-/merge_requests/180">xdg-tracker-portal process</a>.</em>.</p>
<p>Lots has happened in the 2 months since my last post, most notably the <a href="https://covid19info.live/">global coronavirus pandemic</a> … in Spain we’re in week 3 of quarantine lockdown already and noone knows when it is going to end.</p>
<p>Let’s take our mind off the pandemic and talk about Tracker 3.0. At the start of the year Carlos worked on some key <a href="https://gitlab.gnome.org/GNOME/tracker/-/merge_requests/172">API changes</a> which are now merged. It’s a good opportunity to recap what’s really changing in the new version.</p>
<p>I made the developer documentation for Tracker 3.0 <a href="https://gnome.pages.gitlab.gnome.org/tracker/docs/api-preview/libtracker-sparql/">available online</a>. Thanks to GitLab, this can be updated every time we merge a change in Git. The documentation a work in progress and we appreciate if you can <a href="https://gnome.pages.gitlab.gnome.org/tracker/community/">help us to improve it</a>.</p>
<p>The documentation contains a <a href="https://gnome.pages.gitlab.gnome.org/tracker/docs/api-preview/libtracker-sparql/tracker-migrating-2-to-3.html">migration guide</a>, but let’s have a broader look at some common use cases.</p>
<p>Tracker 3.0 is still in development and things may change! We very much welcome feedback from app developers who are going to use this API.</p>
<h1 id="browsing-and-searching">Browsing and searching</h1>
<p>The big news in Tracker 3.0 is decentralization. Each app can now manage its own private database! There’s no single “Tracker store” any longer.</p>
<p>Tracker 3.0 will index content from the filesystem to facilitate searching and browsing, as it does now. The filesystem miner will keep this in its own database, and Flatpak apps will access this database through a portal (currently <a href="https://gitlab.gnome.org/GNOME/tracker/-/merge_requests/180">in development</a>).</p>
<p>Apps access this data using a <a href="https://gnome.pages.gitlab.gnome.org/tracker/docs/api-preview/libtracker-sparql/TrackerSparqlConnection.html">TrackerSparqlConnection</a> just like now, but when we create the connection we need to specify that we want to connect to the filesystem miner’s database.</p>
<p>Here’s a Python example of listing all the music files in the user’s ~/Music directory:</p>
<pre><code>from gi.repository import Tracker

conn = Tracker.SparqlConnection.bus_new(
    "org.freedesktop.Tracker3.Miner.Files", None, None)
cursor = conn.query(
    'SELECT ?url { ?r a nmm:MusicPiece ; nie:url ?url }')
print("Found music files:\n")
while cursor.next():
    print(cursor.get_string()[0][0])</code></pre>
<p>Running a full text search will be similar. Here’s how you’d look for “bananas” in every file in the users ~/Documents folder:</p>
<pre><code>cursor = conn.query(
    'SELECT ?url fts:snippet(?r) { '
    '    ?r a nfo:Document ; '
    '        nie:url ?url ; '
    '        fts:match "Bananas" '
'}')
print("Found document files:\n")
while cursor.next():
    print("   url: {}".format(cursor.get_string()[0][0]))
    print("   snippet: {}".format(cursor.get_string()[0][0]))</code></pre>
<p>If you are running inside a Flatpak sandbox then there will be a portal between you and the org.freedesktop.Tracker3.Miner.Files database. The read-only <tt>/.flatpak-info</tt> file inside the sandbox, which is created when building the Flatpak, will declare what graphs your app can access. The <a href="https://gitlab.gnome.org/GNOME/tracker/-/merge_requests/180">xdg-tracker-portal</a> will add that information into the SPARQL query, using a Tracker-specific syntax like this: <code>CONSTRAINT GRAPH </code>, and the database will enforce the constraint ensuring that your app really does only see the graphs that it’s requested access to.</p>
<h1 id="storing-your-own-data">Storing your own data</h1>
<p>Tracker can be used as a data store by applications. One principle behind the design of Tracker 1.x was that by using a centralized store and a common vocabulary, different apps could easily share data. For example, when you create an album in GNOME Photos, it’s stored <a href="https://gitlab.gnome.org/GNOME/gnome-photos/-/blob/master/src/photos-query-builder.c#L202">in the Tracker database</a> using the standard <a href="https://developer.gnome.org/ontology/stable/nfo-DataContainer.html">nfo:DataContainer</a> class. Any other app, perhaps a file manager, or a photos app from a different platform, can show and edit albums stored in this way without having to know specifics about GNOME Photos. Playlists in GNOME Music and starred files in Nautilus are also stored this way.</p>
<p>This approach had some downsides. Having all data in a single database creates a single point of failure. It’s hard to backup the valuable user data without backing up the search and indexing data too – but since the index can be recreated from the filesystem, it’s a waste of resources to include that in a backup. Apps were also forced to share a single database schema which was maintained in the tracker.git repository.</p>
<p>Tracker 3.0, each app creates a private database for storing its own data. It can use the ontology (database schema) from Tracker, or it can provide its own version. Here’s how a photos app written in Python could store photo albums:</p>
<pre><code>from gi.repository import Gio, GLib, Tracker
import pathlib

def app_database_dir():
    data_dir = pathlib.Path(GLib.get_user_data_dir())
    return data_dir.joinpath('my-photos-app/db')

location = Gio.File.new_for_path(app_database_dir())
conn = Tracker.SparqlConnection.new(
    Tracker.SparqlConnectionFlags.NONE, location, None)

conn.update(
    'INSERT {  a nfo:DataContainer, nie:DataObject ; '
    '           nie:title "My Album" }',
    0, None)</code></pre>
<p>Now let’s insert a photo into this album. Remember that the user’s photos are indexed by the filesystem miner. We can use the <code>SERVICE</code> statement to connect the filesystem miner’s database to our app’s private database, like this:</p>
<pre><code>conn.update(
    'CONSTRAINT GRAPH  '
    'INSERT { '
        '   SELECT ?photo { '
        '       SERVICE  { '
        '           ?photo nie:url  '
        '       } '
        '   }, '
        '   ?photo nie:isPartOf  . ',
    '}',
    0, None)</code></pre>
<p>Now let’s display the contents of the album:</p>
<pre><code>cursor = conn.query(
    'CONSTRAINT GRAPH  '
    'SELECT ?url { '
    '    SELECT ?photo ?url { '
    '        SERVICE  { '
    '            ?photo a nmm:Photo ; nie:url ?url . '
    '        } '
    '    } '
    '    ?photo nie:isPartOf . '
    '}')
while cursor.next():
    print(cursor.get_string(0)[0])</code></pre>
<p>Notice again that the app has to request permission to access the Photos graph. If our example app is running in Flatpak, this will require a special permission.</p>
<p>It’s still possible for one app to share data with another, but it will require coordination at the app level. Using the example of photo albums, GNOME Photos can opt to make its database available to other apps. If a different app wants to see the user’s photo albums, they’ll need to connect to the org.gnome.Photos database over D-Bus. As usual, Flatpak apps would need permission to do this.</p>
<h1 id="is-it-a-good-time-to-port-my-app-to-tracker-3.0">Is it a good time to port my app to Tracker 3.0?</h1>
<p>It’s a good time to <em>start</em> porting your app. You will definitely be able to help us with testing and stabilising the library and the documentation if you start now.</p>
<p>There are some API changes still unmerged at time of writing, primarily <a href="https://gitlab.gnome.org/GNOME/tracker/merge_requests/180">the Flatpak portal and the CONSTRAINT feature</a>, also the details of <a href="https://gitlab.gnome.org/GNOME/tracker/-/issues/192">how you specify which ontology to use</a>.</p>
<p>Some functionality is no longer exposed in C libraries, due to the privitization of libtracker-control and libtracker-miner. As far as we know libtracker-miner is unused outside Tracker, but some apps are currenly using libtracker-control to display status updates for the Tracker daemons and trigger indexing of removable devices. We have an <a href="https://gitlab.gnome.org/GNOME/tracker-miners/-/issues/89">open issue</a> about improving the story for on-demand removable device indexing. For status monitoring you may use the underlying DBus signals, and I’m also hoping to <a href="https://gitlab.gnome.org/GNOME/tracker-miners/-/merge_requests/168">make these more useful</a>.</p>
<p>Ideally I’d like to add a new helper library for Tracker 3.0 which would conveniently wrap the high level features that apps use. My volunteer time is limited though. I can share ideas for this if you are looking for a way to contribute!</p>
<h1 id="what-about-a-hackfest">What about a hackfest?</h1>
<p>At some point we need to finish the Tracker 3.0 work and make sure that apps that use Tracker are all ported and working. The best case is that we do this in time for the upcoming GNOME 3.38 release. We discussed about <a href="https://etherpad.gnome.org/p/Tracker_content_apps_hackfest_2020">a hackfest</a> some point between now and GNOME 3.38 to make sure things are settled; it now may be that an in-person hackfest won’t be feasible in light of the Coronavirus pandemic but a series of online meetings would be a good alternative. We can only wait, and see!</p></div>
    </content>
    <updated>2020-03-31T10:37:52Z</updated>
    <published>2020-03-31T10:37:52Z</published>
    <category term="Uncategorized"/>
    <author>
      <name>Sam Thursfield</name>
    </author>
    <source>
      <id>https://samthursfield.wordpress.com</id>
      <logo>https://s0.wp.com/i/buttonw-com.png</logo>
      <link href="https://samthursfield.wordpress.com/feed/" rel="self" type="application/rss+xml"/>
      <link href="https://samthursfield.wordpress.com" rel="alternate" type="text/html"/>
      <link href="https://samthursfield.wordpress.com/osd.xml" rel="search" title="Sam Thursfield's Blog" type="application/opensearchdescription+xml"/>
      <link href="https://samthursfield.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>I want music in my life not questions!</subtitle>
      <title>Sam Thursfield's Blog</title>
      <updated>2020-04-04T20:53:37Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://olea.org/diario/2020/03/31/create_border_maps.html</id>
    <link href="http://olea.org/diario/2020/03/31/create_border_maps.html" rel="alternate" type="text/html"/>
    <title>How to create border maps for your projects</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>When working with data projects it is usual to use administrative maps. In my experience is not trivial to find the cartographic files as open access or opensource data sources, so after some search I found a method to create an ad-hoc map for any administrative region coded into <a href="https://www.openstreetmap.org">OpenStreetMap</a>. It’s not a trivial method but it is no as complex as it seems at first sight. I’ll try to introduce the essential concepts to easy understand the recipe. If you know other methods as good or better than this please give me some feedback.</p>

<p>I used this method with geodata for Spain so I guess it works with any other administrative region coded in OSM.</p>

<p>First you need to know an OpenStreetMap concept: <a href="https://wiki.openstreetmap.org/wiki/Relation">the relation</a>. In our case we’ll use multipolygon relations, used to code the borders of areas of our interests. The important thing to remember here is you are going to use an <strong>OSM relation</strong>.</p>

<p>Second you’ll want to select the region of your interest and you’ll need to figure out how it has been mapped in OSM. So you need to find the related OSM relation. As example I’ll use <a href="https://en.wikipedia.org/wiki/Alamedilla">Alamedilla</a>, my parents’ town in the province of Granada, Spain.</p>

<h2 id="the-method">the method</h2>

<p>Go to <a href="https://www.openstreetmap.org">https://www.openstreetmap.org</a> and search for the region of your interest. For example <a href="https://www.openstreetmap.org/search?query=alamedilla%2C%20Granada">Alamedilla</a>:</p>

<p><img alt="example screenshot" src="http://olea.org/recursos/2020-03-31/OSM-Alamedilla-1.png" width="800"/></p>

<p>Click to the correct place and you’ll see something like this:</p>

<p><img alt="example screenshot" src="http://olea.org/recursos/2020-03-31/OSM-Alamedilla-2.png" width="800"/></p>

<p>Look at the URL box at the browser and you’ll see something like this: <em>https://www.openstreetmap.org/relation/343442</em>. The code number you need for the next steps is that one in the URL after the relation keyword. In this example is <em>343442</em>.</p>

<p>Then visit the  to <a href="http://overpass-turbo.eu/">overpass turbo</a> service, a powerful web-based data query and filtering tool for OpenStreetMap:</p>

<p><img alt="example screenshot" src="http://olea.org/recursos/2020-03-31/OSM-Alamedilla-3.png" width="800"/></p>

<p>The white box at left is where you write the code of your query for Overpass. You have a wizard tool in the menu but it’s not trivial too. Instead you could copy exactly this code:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
[out:json][timeout:2500];
(
    relation(343442)({{bbox}});
);
out body;
&gt;;
out skel qt;

</code></pre></div></div>

<p><img alt="example screenshot" src="http://olea.org/recursos/2020-03-31/OSM-Alamedilla-4.png" width="800"/></p>

<p>In your case you need to change the <em>349044</em> number (used for the Alamedilla’s example) with the relation number you got before. If you modify the query keep in mind the default timeout (25) maybe is not enough for your case.</p>

<p>Now, clicking the <strong>Run</strong> button you’ll execute your query. Keep in mind the resulting data set could be really big, depending how big the area is.</p>

<p>So, here it is:</p>

<p><img alt="example screenshot" src="http://olea.org/recursos/2020-03-31/OSM-Alamedilla-5.png" width="800"/></p>

<p>Zoom the map to have a better view:</p>

<p><img alt="example screenshot" src="http://olea.org/recursos/2020-03-31/OSM-Alamedilla-6.png" width="800"/></p>

<p>Now you’ll find the resulting data set in GeoJSON format ready at the <strong>Data</strong> tab (right side). If this format is fine for you you are done. But if you need some other you are lucky enough because when clicking into <strong>Export</strong> button you’ll find some other formats to export: GPX, KML and OSM data.</p>

<p>In this example we’ll use the KML format used by Google Earth, Maps and many others.</p>

<p><img alt="example screenshot" src="http://olea.org/recursos/2020-03-31/OSM-Alamedilla-7.png"/></p>

<h3 id="importing-into-google-earth">importing into Google Earth</h3>

<p>Open <strong>Google Earth</strong>:</p>

<p><img alt="example screenshot" src="http://olea.org/recursos/2020-03-31/OSM-Alamedilla-8.png" width="800"/></p>

<p>and open our kml file: [<em>File</em>][<em>Open</em>]:</p>

<p><img alt="example screenshot" src="http://olea.org/recursos/2020-03-31/OSM-Alamedilla-9.png"/></p>

<p>and here it is:</p>

<p><img alt="example screenshot" src="http://olea.org/recursos/2020-03-31/OSM-Alamedilla-10.png" width="800"/></p>

<p>Note: I modified the color (at the object properties) to make it more visible in the screenshot.</p>

<p>So, it is done. Now you can  use the kml file in your application, import to any GIS software or convert to another format if required.</p>

<h3 id="importing-into-google-maps">importing into Google Maps</h3>

<p>Go to <a href="https://www.google.com/maps/d/u/0/">Google MyMaps</a> and create a new one. Import a new layer an select your kml file:</p>

<p><img alt="example screenshot" src="http://olea.org/recursos/2020-03-31/OSM-Alamedilla-11.png" width="800"/></p>

<p>Here it is:</p>

<p><img alt="example screenshot" src="http://olea.org/recursos/2020-03-31/OSM-Alamedilla-12.png" width="800"/></p>

<h2 id="conclusion">conclusion</h2>

<p>Now you are able to create maps of any region added into OpenStreetMap, export them to any of the said formats and import into your applications. Hope this helps.</p>

<p>If you finally use data from the OSM project remember to add the correct credits:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>We require that you use the credit “© OpenStreetMap contributors”.
</code></pre></div></div>

<p>See credit details at <a href="http://osm.org/copyright">osm.org/copyright</a>.</p>

<p>This is an example of how <strong>AWESOME</strong> OpenStreetMap is the and extraordinaire work these people does. <strong>Big thanks</strong> to all of the contributros for these impressive service.</p></div>
    </summary>
    <updated>2020-03-30T22:00:00Z</updated>
    <published>2020-03-30T22:00:00Z</published>
    <category term="OpenStreetMap"/>
    <category term="maps"/>
    <category term="kml"/>
    <category term="Geoinquietos"/>
    <source>
      <id>http://olea.org/</id>
      <author>
        <name>Ismael Olea</name>
      </author>
      <link href="http://olea.org/" rel="alternate" type="text/html"/>
      <link href="http://olea.org/feed-en.xml" rel="self" type="application/rss+xml"/>
      <subtitle>Pastoreando procomunes desde 1994 | Pasturing the commons since 1994.
 - just the English posts</subtitle>
      <title>Ismael Olea — web personal</title>
      <updated>2020-04-04T19:01:24Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>https://feborg.es/?p=8168</id>
    <link href="https://feborg.es/devconf-cz-2020/" rel="alternate" type="text/html"/>
    <title>DevConf.CZ 2020</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Once again, DevConf.CZ, is our meeting-while-freezing winter conference in Brno. For this year I cooked up two talks: An hour-long talk about Portals during the first day of the conference. The room was almost full and the questions were very relevant. A few attendees met me after the talk seeking help to make their apps … <p class="link-more"><a class="more-link" href="https://feborg.es/devconf-cz-2020/">Continue reading<span class="screen-reader-text"> "DevConf.CZ 2020"</span></a></p></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Once again, DevConf.CZ, is our meeting-while-freezing winter conference in Brno. For this year I cooked up two talks:</p>
<p>An hour-long talk about Portals during the first day of the conference. The room was almost full and the questions were very relevant. A few attendees met me after the talk seeking help to make their apps start using Portals and with ideas for new Portals.Â  You can watch <a href="https://youtu.be/3rCIEzfZw1I">the recordings</a> below:</p>
<p/>
<p>On the last conference day, I had a quick twenty minutes talk about GNOME Boxes in the virtualization track. The audience wasn’t our known faces from the desktop talks, so I got the chance to show Boxes for the first time for a bunch of people. I did a quick presentation with live demos and Q&amp;A. It was a success IMHO. Check <a href="https://youtu.be/uRjY2plEymQ">the recordings</a> below:</p>
<p/>
<p>Besides, I participated in the “Diversity and Inclusion” and “Women in Open source” meetups. It was a good opportunity to see what other teams are doing to be more diverse and also to share my personal experiences with mentoring with <a href="https://www.outreachy.org/">Outreachy</a>.</p>
<p><a href="https://youtu.be/gfF9OqwBcKc">Langdon White had a talk on Fedora Silverblue</a> raising important questions about the development workflow in it. I was glad some of their issues were already addressed and fixed, but I recommend to those who didn’t attend this talk to watch the recordings. It is important feedback.</p>
<p>I felt honored to be <a href="https://youtu.be/GwsfOVlcgvA?t=451">mentioned in Rebecca Fernandez’s talk about “Growing your career via open source contributions”</a>, where she had slides showing people’s stories, including mine.</p>
<p>I managed to catch up with the developments of the virgil driver on Windows in order to support Direct3D, and discuss other future developments with folks from the SPICE team.</p>
<p>Other than that, I attended many podman/containers talks to better understand their development workflows and how we could accommodate these workflows in Silverblue. I spoke to Red Hatters from other teams that need CodeReadyContainers to test their applications, and how we could improve their workflow in Fedora Workstation.</p>
<p>Lastly, I had a great time with [delicious] food and drinks at the DevConf Party in Fleda, which is 200 meters away from our flat. <img alt=":-)" class="wp-smiley" src="https://feborg.es/wp-includes/images/smilies/face-smile.png" style="height: 1em;"/></p></div>
    </content>
    <updated>2020-03-30T14:32:02Z</updated>
    <published>2020-03-30T14:32:02Z</published>
    <category term="devconf"/>
    <category term="gnome"/>
    <category term="redhat"/>
    <category term="brno"/>
    <author>
      <name>Felipe Borges</name>
    </author>
    <source>
      <id>https://feborg.es</id>
      <link href="https://feborg.es" rel="alternate" type="text/html"/>
      <link href="http://feeds.feedburner.com/feborg/feed" rel="self" type="application/rss+xml"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <title>Felipe Borges</title>
      <updated>2020-03-30T15:19:24Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://www.dragonsreach.it/2020/03/30/2020-03-30-gnome-infrastructure-updates/</id>
    <link href="https://www.dragonsreach.it/2020/03/30/2020-03-30-gnome-infrastructure-updates/" rel="alternate" type="text/html"/>
    <title>GNOME Infrastructure updates</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>As you may have noticed from outage and maintenance notes we sent out last week the GNOME Infrastructure has been undergoing a major redesign due to the need of moving to a different datacenter. It’s probably a good time to update the Foundation membership, contributors and generally anyone consuming the multitude of services we maintain of what we’ve been up to during these past months.</p>

<h2 id="new-data-center">New Data Center</h2>

<p>One of the core projects for 2020 was moving off services from the previous DC we were in (located in PHX2, Arizona) over to the Red Hat community cage located in RAL3. This specific task was made possible right after we received a new set of machines that allowed us to refresh some of the ancient hardware we had (with the average box dating back to 2013). The new layout is composed of a total of 5 (five) bare metals and 2 (two) core technologies: Openshift (v. 3.11) and Ceph (v. 4).</p>

<p>The major improvements that are worth being mentioned:</p>

<ol>
<li>VMs can be easily scheduled across the hypervisors stack without having to copy disks over across hypervisors themselves. VM disks and data is now hosted within Ceph.</li>
<li>IPv6 is available (not yet enabled/configured at the OS, Openshift router level)</li>
<li>Overall better external internet uplink bandwidth</li>
<li>Most of the VMs that we had running were turned into pods and are now successfully running from within Openshift</li>
</ol>

<h2 id="rhel-8-and-ansible">RHEL 8 and Ansible</h2>

<p>One of the things we had to take into account was running Ceph on top of RHEL 8 to benefit from its containarized setup. This originally presented itself as a challenge due to the fact RHEL 8 ships with a much newer Puppet release than the one RHEL 7 provides. At the same time we didn’t want to invest much time in upgrading our Puppet code base due to the amount of VMs we were able to migrate to Openshift and to the general willingess of slowly moving to use Ansible (client-side, no more need of maintaining server side pieces). On this specific regard we:</p>

<ol>
<li>Landed support for RHEL 8 provisioning</li>
<li>Started experimenting with Image Based deployments (much more faster than Cobbler provisioning)</li>
<li>Cooked a set of <a href="https://gitlab.gnome.org/Infrastructure/ansible/-/tree/master/roles">base Ansible roles</a> to support our RHEL 8 installs including IDM, chrony, Satellite, Dell OMSA , NRPE etc.</li>
</ol>

<h2 id="openshift">Openshift</h2>

<p>As <a href="https://www.dragonsreach.it/2018/10/18/2018-10-18-gnome-infrastructure-moving-to-openshift">originally announced</a>, the migration to the Openshift Container Platform (OSCP) has progressed and we now count a total of 34 tenants (including the entirety of GIMP websites). This allowed us to:</p>

<ol>
<li>Retire running VMs and prevented the need to upgrade their OS whenever they’re close to EOL. Also, in general, less maintenance burden</li>
<li>Allow the community to easily provision services on top of the platform with total autonomy by choosing from a wide variety of frameworks, programming languages and database types (currently Galera and PSQL, both managed outside of OSCP itself)</li>
<li>Easily scale the platform by adding more nodes/masters/routers whenever that is made necessary by additional load</li>
<li>Data replicated and made redundant across a GlusterFS cluster (next on the list will be introducing Ceph support for pods persistent storage)</li>
<li>Easily set up services such as Rocket.Chat and Discourse without having to mess much around with Node.JS or Ruby dependencies</li>
</ol>

<h2 id="special-thanks">Special thanks</h2>

<p>I’d like to thank BartÅ‚omiej Piotrowski for all the efforts in helping me out with the migration during the past couple of weeks and Milan Zink from the Red Hat Storage Team who helped out reviewing the Ceph infrastructure design and providing useful information about possible provisioning techniques.</p></div>
    </summary>
    <updated>2020-03-30T12:20:23Z</updated>
    <published>2020-03-30T12:20:23Z</published>
    <source>
      <id>https://www.dragonsreach.it/tags/planet-gnome/</id>
      <author>
        <name>Andrea Veri</name>
      </author>
      <link href="https://www.dragonsreach.it/tags/planet-gnome/" rel="alternate" type="text/html"/>
      <link href="https://www.dragonsreach.it/tags/planet-gnome/index.xml" rel="self" type="application/rss+xml"/>
      <subtitle>Recent content in Planet Gnome on Andrea Veri's Blog</subtitle>
      <title>Planet Gnome on Andrea Veri's Blog</title>
      <updated>2020-03-30T12:20:23Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-5620128670216603593.post-6228169734531490167</id>
    <link href="http://ml4711.blogspot.com/feeds/6228169734531490167/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/>
    <link href="http://ml4711.blogspot.com/2020/03/maps-in-gnome-336.html#comment-form" rel="replies" title="0 Comments" type="text/html"/>
    <link href="http://www.blogger.com/feeds/5620128670216603593/posts/default/6228169734531490167" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/5620128670216603593/posts/default/6228169734531490167" rel="self" type="application/atom+xml"/>
    <link href="http://ml4711.blogspot.com/2020/03/maps-in-gnome-336.html" rel="alternate" title="Maps in GNOME 3.36" type="text/html"/>
    <title>Maps in GNOME 3.36</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">There's been quite a while since the last blog post. Since then 3.36.0 was released, and also the first update for the stable 3.36 branch, 3.36.1 has been released.<br/>As I've written about before one of the main features in 3.36 is the support for trip planning for public transit using third party services, as shown here from Paris:<br/><br/><div class="separator" style="clear: both; text-align: center;"><a href="https://1.bp.blogspot.com/-qOoPwxMOdY4/XoD-QiIna4I/AAAAAAAAEEk/OzJNe02nxJEWzbk8JlzaBPiMJHMf87I-wCLcBGAsYHQ/s1600/routing-transit.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="342" src="https://1.bp.blogspot.com/-qOoPwxMOdY4/XoD-QiIna4I/AAAAAAAAEEk/OzJNe02nxJEWzbk8JlzaBPiMJHMf87I-wCLcBGAsYHQ/s640/routing-transit.png" width="640"/></a></div><br/>We also support a few other areas for now, such as TriMet in Portland, Sweden (using the Resrobot API), and the Switzerland using the opendata.ch API. A full list is available on a sub page to <a href="https://live.gnome.org/Apps/Maps">https://live.gnome.org/Apps/Maps</a><br/><br/>Another feature implemented by James Westman is that the current location marker should no longer flicker when you have live-updating (e.g. when you have an actual GPS receiver on your device).<br/><br/>James has also implemented the first step towards a responsive UI that can scale to phone and narrow tablet portrait displays, this was finished after the UI change freeze before 3.36, so it will have to wait until 3.38<br/><br/><div class="separator" style="clear: both; text-align: center;"/><br/>Oh and another thing, in these times when physical traveling is not an option browsing around in Maps application is another way to explore. And don't forget take advantage of the interlinking with Wikipedia from the OpenStreetMap database (Maps will show a link to a Wikipedia article for a place if available when you press the “Show more“ three-dots icon in a place info bubble). And if it's missing you can always add it yourself.<br/><br/>Be safe everyone!</div>
    </content>
    <updated>2020-03-29T20:15:00Z</updated>
    <published>2020-03-29T20:15:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="GNOME Maps 3.36"/>
    <author>
      <name>Marcus Lundblad</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/02923955229568787222</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-5620128670216603593</id>
      <category term="gnome"/>
      <category term="maps"/>
      <category term="openstreetmap"/>
      <category term="routing"/>
      <category term="transit"/>
      <category term="FOSDEM"/>
      <category term="GNOME Maps 3.34"/>
      <category term="GNOME Maps 3.36"/>
      <category term="gnome maps"/>
      <category term="gpx"/>
      <category term="gtfs"/>
      <category term="gtk+"/>
      <author>
        <name>Marcus Lundblad</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/02923955229568787222</uri>
      </author>
      <link href="http://ml4711.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/5620128670216603593/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://ml4711.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="http://www.blogger.com/feeds/5620128670216603593/posts/default?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <title>My geek stuff blog</title>
      <updated>2020-03-29T20:15:01Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>https://blogs.gnome.org/engagement/?p=7614</id>
    <link href="https://blogs.gnome.org/engagement/2020/03/27/meet-the-gnomeies-regina-nkemchor-adejo/" rel="alternate" type="text/html"/>
    <title>Meet the GNOMEies: Regina Nkemchor Adejo</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">In addition to recently repping the GNOME project at Open Source Festival Africa, Regina Nkemchor Adejo is organizing the Pan African GNOME Summit in Port Harcourt, Nigeria. Tell us a little bit more about yourself. Well, My full name is Regina Nkemchor Adejo, I am a Nigerian. I am a technology enthusiast who transitioned into … <a class="more-link" href="https://blogs.gnome.org/engagement/2020/03/27/meet-the-gnomeies-regina-nkemchor-adejo/">Continue reading<span class="screen-reader-text"> "Meet the GNOMEies: Regina Nkemchor Adejo"</span></a></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>In addition to recently repping the GNOME project at Open Source Festival Africa, Regina Nkemchor Adejo is organizing the <a href="https://events.gnome.org/event/6/">Pan African GNOME Summit</a> in Port Harcourt, Nigeria.</p>
<figure class="wp-caption aligncenter" id="attachment_7620" style="width: 225px;"><img alt="A photo of Regina, who is smartly dressed in black with a green jacket, standing in a conference center. Behind her is a man with a dog." class="size-medium wp-image-7620" height="300" src="https://blogs.gnome.org/engagement/files/2020/03/regina-225x300.png" width="225"/><figcaption class="wp-caption-text" id="caption-attachment-7620">Photo courtesy of Regina Nkemchor Adejo</figcaption></figure>
<p><strong>Tell us a little bit more about yourself.</strong></p>
<p>Well, My full name is Regina Nkemchor Adejo, I am a Nigerian. I am a technology enthusiast who transitioned into sciences from an arts background. I currently work as a database and application specialist in a tax organization. I am a YouTube content creator, I create technical videos related to database and Linux administration.</p>
<p>Most importantly, I love computers! I spend most of my time on them.</p>
<p><strong>What is your role within the GNOME community?</strong></p>
<p>I am member, currently working as an engagement team volunteer</p>
<p><strong>Why did you get involved in GNOME?</strong></p>
<p>I am a GNOME user, GNOME consistently shines for its open source contribution and friendly members and volunteers.</p>
<p><strong>Why are you still involved with GNOME?</strong></p>
<p>It’s an interesting community so many skills to learn around building strong communities and managing projects.</p>
<p><strong>What are you working on right now?</strong></p>
<p>Pan African GNOME Summit (PAGS)! It is a project I am passionate about, to drive GNOME into the African tech space and ntroduce people on how they can make open source contributions in GNOME. Although the first event is happening in Nigeria I hope to expand this into other African countries as well and hopefully one day we have GUADEC in Africa!</p>
<p><strong>What are you excited about right now â€“ either in GNOME or free and open source software in general?</strong></p>
<p>PAGS, GUADEC, and the Linux App Summit (LAS)!</p>
<p><strong>What is a major challenge you see for the future of GNOME?</strong></p>
<p>I won’t call it a challenge, I will say it is more like a concern about managing more volunteers as GNOME pushes for greater numbers of contributors. There may be a need to have more mentors in the foundation to help guide newcomers.</p>
<p><strong>What do you think GNOME should focus on next?</strong><br/>
Africa!</p></div>
    </content>
    <updated>2020-03-27T14:19:57Z</updated>
    <published>2020-03-27T14:19:57Z</published>
    <category term="Uncategorized"/>
    <category term="meet the GNOMEies"/>
    <author>
      <name>mdeblanc</name>
    </author>
    <source>
      <id>https://blogs.gnome.org/engagement</id>
      <link href="https://blogs.gnome.org/engagement/author/mdeblanc/feed/" rel="self" type="application/rss+xml"/>
      <link href="https://blogs.gnome.org/engagement" rel="alternate" type="text/html"/>
      <subtitle>Featuring the people side of GNOME</subtitle>
      <title>mdeblanc – Getting to know GNOME</title>
      <updated>2020-04-02T19:06:20Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:people.gnome.org,2020-03-26:/~federico/blog/reducing-memory-consumption-in-librsvg-4.html</id>
    <link href="https://people.gnome.org/~federico/blog/reducing-memory-consumption-in-librsvg-4.html" rel="alternate" type="text/html"/>
    <title>Reducing memory consumption in librsvg, part 4: compact representation for Bézier paths</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Let's continue with the <a href="https://gitlab.gnome.org/GNOME/librsvg/-/issues/574">enormous SVG</a> from the last time, a
map extracted from OpenStreetMap.</p>
<p>According to <a href="https://valgrind.org/docs/manual/ms-manual.html">Massif</a>, peak memory consumption for that file occurs at
the following point during the execution of rsvg-convert.  I pasted
only the part that refers to Bézier paths:</p>
<div class="highlight"><pre><span/><code><span class="err">    --------------------------------------------------------------------------------</span>
<span class="err">      n        time(i)         total(B)   useful-heap …</span></code></pre></div></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Let's continue with the <a href="https://gitlab.gnome.org/GNOME/librsvg/-/issues/574">enormous SVG</a> from the last time, a
map extracted from OpenStreetMap.</p>
<p>According to <a href="https://valgrind.org/docs/manual/ms-manual.html">Massif</a>, peak memory consumption for that file occurs at
the following point during the execution of rsvg-convert.  I pasted
only the part that refers to Bézier paths:</p>
<div class="highlight"><pre><span/><code><span class="err">    --------------------------------------------------------------------------------</span>
<span class="err">      n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)</span>
<span class="err">    --------------------------------------------------------------------------------</span>
<span class="err">1    33 24,139,598,653    1,416,831,176    1,329,943,212    86,887,964            0</span>
<span class="err">2   -&gt;24.88% (352,523,448B) 0x4A2727E: alloc (alloc.rs:84)</span>
<span class="err">    | -&gt;24.88% (352,523,448B) 0x4A2727E: alloc (alloc.rs:172)</span>
<span class="err">    |   -&gt;24.88% (352,523,448B) 0x4A2727E: allocate_in&lt;rsvg_internals::path_builder::PathCommand,alloc::alloc::Global&gt; (raw_vec.rs:98)</span>
<span class="err">    |     -&gt;24.88% (352,523,448B) 0x4A2727E: with_capacity&lt;rsvg_internals::path_builder::PathCommand&gt; (raw_vec.rs:167)</span>
<span class="err">    |       -&gt;24.88% (352,523,448B) 0x4A2727E: with_capacity&lt;rsvg_internals::path_builder::PathCommand&gt; (vec.rs:358)</span>
<span class="err">    |         -&gt;24.88% (352,523,448B) 0x4A2727E: &lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (vec.rs:1992)</span>
<span class="err">    |           -&gt;24.88% (352,523,448B) 0x49D212C: from_iter&lt;rsvg_internals::path_builder::PathCommand,smallvec::IntoIter&lt;[rsvg_internals::path_builder::PathCommand; 32]&gt;&gt; (vec.rs:1901)</span>
<span class="err">    |             -&gt;24.88% (352,523,448B) 0x49D212C: collect&lt;smallvec::IntoIter&lt;[rsvg_internals::path_builder::PathCommand; 32]&gt;,alloc::vec::Vec&lt;rsvg_internals::path_builder::PathCommand&gt;&gt; (iterator.rs:1493)</span>
<span class="err">    |               -&gt;24.88% (352,523,448B) 0x49D212C: into_vec&lt;[rsvg_internals::path_builder::PathCommand; 32]&gt; (lib.rs:893)</span>
<span class="err">    |                 -&gt;24.88% (352,523,448B) 0x49D212C: smallvec::SmallVec&lt;A&gt;::into_boxed_slice (lib.rs:902)</span>
<span class="err">3   |                   -&gt;24.88% (352,523,016B) 0x4A0394C: into_path (path_builder.rs:320)</span>
<span class="err">    |</span>
<span class="err">4   -&gt;03.60% (50,990,328B) 0x4A242F0: realloc (alloc.rs:128)</span>
<span class="err">    | -&gt;03.60% (50,990,328B) 0x4A242F0: realloc (alloc.rs:187)</span>
<span class="err">    |   -&gt;03.60% (50,990,328B) 0x4A242F0: shrink_to_fit&lt;rsvg_internals::path_builder::PathCommand,alloc::alloc::Global&gt; (raw_vec.rs:633)</span>
<span class="err">    |     -&gt;03.60% (50,990,328B) 0x4A242F0: shrink_to_fit&lt;rsvg_internals::path_builder::PathCommand&gt; (vec.rs:623)</span>
<span class="err">    |       -&gt;03.60% (50,990,328B) 0x4A242F0: alloc::vec::Vec&lt;T&gt;::into_boxed_slice (vec.rs:679)</span>
<span class="err">    |         -&gt;03.60% (50,990,328B) 0x49D2136: smallvec::SmallVec&lt;A&gt;::into_boxed_slice (lib.rs:902)</span>
<span class="err">5   |           -&gt;03.60% (50,990,328B) 0x4A0394C: into_path (path_builder.rs:320)</span>
</code></pre></div>


<p>Line 1 has the totals, and we see that at that point the program uses
1,329,943,212 bytes on the heap.</p>
<p>Lines 3 and 5 give us a hint that <code>into_path</code> is being called; this is
the function that converts a temporary/mutable <code>PathBuilder</code> into a
permanent/immutable <code>Path</code>.</p>
<p>Lines 2 and 4 indicate that the arrays of <code>PathCommand</code>, which are
inside those immutable <code>Path</code>s, use 24.88% + 3.60% = 28.48% of the
program's memory; between both they use
352,523,448 + 50,990,328 = 403,513,776 bytes.</p>
<p>That is about 400 MB of <code>PathCommand</code>.  Let's see what's going on.</p>
<h2>What is in a PathCommand?</h2>
<p>A <code>Path</code> is a list of commands similar to PostScript, which get used
in SVG to draw Bézier paths.  It is a flat array of <code>PathCommand</code>:</p>
<div class="highlight"><pre><span/><code><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">Path</span><span class="w"> </span><span class="p">{</span><span class="w"/>
<span class="w">    </span><span class="n">path_commands</span>: <span class="nb">Box</span><span class="o">&lt;</span><span class="p">[</span><span class="n">PathCommand</span><span class="p">]</span><span class="o">&gt;</span><span class="p">,</span><span class="w"/>
<span class="p">}</span><span class="w"/>

<span class="k">pub</span><span class="w"> </span><span class="k">enum</span> <span class="nc">PathCommand</span><span class="w"> </span><span class="p">{</span><span class="w"/>
<span class="w">    </span><span class="n">MoveTo</span><span class="p">(</span><span class="kt">f64</span><span class="p">,</span><span class="w"> </span><span class="kt">f64</span><span class="p">),</span><span class="w"/>
<span class="w">    </span><span class="n">LineTo</span><span class="p">(</span><span class="kt">f64</span><span class="p">,</span><span class="w"> </span><span class="kt">f64</span><span class="p">),</span><span class="w"/>
<span class="w">    </span><span class="n">CurveTo</span><span class="p">(</span><span class="n">CubicBezierCurve</span><span class="p">),</span><span class="w"/>
<span class="w">    </span><span class="n">Arc</span><span class="p">(</span><span class="n">EllipticalArc</span><span class="p">),</span><span class="w"/>
<span class="w">    </span><span class="n">ClosePath</span><span class="p">,</span><span class="w"/>
<span class="p">}</span><span class="w"/>
</code></pre></div>


<p>Let's see the variants of <code>PathCommand</code>:</p>
<ul>
<li><code>MoveTo</code>: 2 double-precision floating-point numbers.</li>
<li><code>LineTo</code>: same.</li>
<li><code>CurveTo</code>: 6 double-precision floating-point numbers.</li>
<li><code>EllipticalArc</code>: 7 double-precision floating-point numbers, plus 2
  flags (see below).</li>
<li><code>ClosePath</code>: no extra data.</li>
</ul>
<p>These variants vary a lot in terms of size, and each element of the
<code>Path.path_commands</code> array occupies the maximum of their sizes
(i.e. <code>sizeof::&lt;EllipticalArc&gt;</code>).</p>
<h2>A more compact representation</h2>
<p>Ideally, each command in the array would only occupy as much space as
it needs.</p>
<p>We can represent a <code>Path</code> in a different way, as two separate arrays:</p>
<ul>
<li>A very compact array of commands without coordinates.</li>
<li>An array with coordinates only.</li>
</ul>
<p>That is, the following:</p>
<div class="highlight"><pre><span/><code><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">Path</span><span class="w"> </span><span class="p">{</span><span class="w"/>
<span class="w">    </span><span class="n">commands</span>: <span class="nb">Box</span><span class="o">&lt;</span><span class="p">[</span><span class="n">PackedCommand</span><span class="p">]</span><span class="o">&gt;</span><span class="p">,</span><span class="w"/>
<span class="w">    </span><span class="n">coords</span>: <span class="nb">Box</span><span class="o">&lt;</span><span class="p">[</span><span class="kt">f64</span><span class="p">]</span><span class="o">&gt;</span><span class="p">,</span><span class="w"/>
<span class="p">}</span><span class="w"/>
</code></pre></div>


<p>The <code>coords</code> array is obvious; it is just a flat array with all the
coordinates in the <code>Path</code> in the order in which they appear.</p>
<p>And the <code>commands</code> array?</p>
<h3>PackedCommand</h3>
<p>We saw above that the biggest variant in <code>PathCommand</code> is
<code>Arc(EllipticalArc)</code>.  Let's look inside it:</p>
<div class="highlight"><pre><span/><code><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">EllipticalArc</span><span class="w"> </span><span class="p">{</span><span class="w"/>
<span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">r</span>: <span class="p">(</span><span class="kt">f64</span><span class="p">,</span><span class="w"> </span><span class="kt">f64</span><span class="p">),</span><span class="w"/>
<span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">x_axis_rotation</span>: <span class="kt">f64</span><span class="p">,</span><span class="w"/>
<span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">large_arc</span>: <span class="nc">LargeArc</span><span class="p">,</span><span class="w"/>
<span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">sweep</span>: <span class="nc">Sweep</span><span class="p">,</span><span class="w"/>
<span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">from</span>: <span class="p">(</span><span class="kt">f64</span><span class="p">,</span><span class="w"> </span><span class="kt">f64</span><span class="p">),</span><span class="w"/>
<span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">to</span>: <span class="p">(</span><span class="kt">f64</span><span class="p">,</span><span class="w"> </span><span class="kt">f64</span><span class="p">),</span><span class="w"/>
<span class="p">}</span><span class="w"/>
</code></pre></div>


<p>There are 7 <code>f64</code> floating-point numbers there.  The other two fields,
<code>large_arc</code> and <code>sweep</code>, are effectively booleans (they are just enums
with two variants, with pretty names instead of just <code>true</code> and
<code>false</code>).</p>
<p>Thus, we have 7 doubles and two flags.  Between the two flags there
are 4 possibilities.</p>
<p>Since no other <code>PathCommand</code> variant has flags, we can have the
following enum, which fits in a single byte:</p>
<div class="highlight"><pre><span/><code><span class="cp">#[repr(u8)]</span><span class="w"/>
<span class="k">enum</span> <span class="nc">PackedCommand</span><span class="w"> </span><span class="p">{</span><span class="w"/>
<span class="w">    </span><span class="n">MoveTo</span><span class="p">,</span><span class="w"/>
<span class="w">    </span><span class="n">LineTo</span><span class="p">,</span><span class="w"/>
<span class="w">    </span><span class="n">CurveTo</span><span class="p">,</span><span class="w"/>
<span class="w">    </span><span class="n">ArcSmallNegative</span><span class="p">,</span><span class="w"/>
<span class="w">    </span><span class="n">ArcSmallPositive</span><span class="p">,</span><span class="w"/>
<span class="w">    </span><span class="n">ArcLargeNegative</span><span class="p">,</span><span class="w"/>
<span class="w">    </span><span class="n">ArcLargePositive</span><span class="p">,</span><span class="w"/>
<span class="w">    </span><span class="n">ClosePath</span><span class="p">,</span><span class="w"/>
<span class="p">}</span><span class="w"/>
</code></pre></div>


<p>That is, simple values for <code>MoveTo</code>/etc. and four special values for
the different types of <code>Arc</code>.</p>
<h2>Packing a PathCommand into a PackedCommand</h2>
<p>In order to pack the array of <code>PathCommand</code>, we must first know how
many coordinates each of its variants will produce:</p>
<div class="highlight"><pre><span/><code><span class="k">impl</span><span class="w"> </span><span class="n">PathCommand</span><span class="w"> </span><span class="p">{</span><span class="w"/>
<span class="w">    </span><span class="k">fn</span> <span class="nf">num_coordinates</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kt">usize</span> <span class="p">{</span><span class="w"/>
<span class="w">        </span><span class="k">match</span><span class="w"> </span><span class="o">*</span><span class="bp">self</span><span class="w"> </span><span class="p">{</span><span class="w"/>
<span class="w">            </span><span class="n">PathCommand</span>::<span class="n">MoveTo</span><span class="p">(..)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"/>
<span class="w">            </span><span class="n">PathCommand</span>::<span class="n">LineTo</span><span class="p">(..)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"/>
<span class="w">            </span><span class="n">PathCommand</span>::<span class="n">CurveTo</span><span class="p">(</span><span class="n">_</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="mi">6</span><span class="p">,</span><span class="w"/>
<span class="w">            </span><span class="n">PathCommand</span>::<span class="n">Arc</span><span class="p">(</span><span class="n">_</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="mi">7</span><span class="p">,</span><span class="w"/>
<span class="w">            </span><span class="n">PathCommand</span>::<span class="n">ClosePath</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"/>
<span class="w">        </span><span class="p">}</span><span class="w"/>
<span class="w">    </span><span class="p">}</span><span class="w"/>
<span class="p">}</span><span class="w"/>
</code></pre></div>


<p>Then, we need to convert each <code>PathCommand</code> into a <code>PackedCommand</code> and
write its coordinates into an array:</p>
<div class="highlight"><pre><span/><code><span class="k">impl</span><span class="w"> </span><span class="n">PathCommand</span><span class="w"> </span><span class="p">{</span><span class="w"/>
<span class="w">    </span><span class="k">fn</span> <span class="nf">to_packed</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">coords</span>: <span class="kp">&amp;</span><span class="nc">mut</span><span class="w"> </span><span class="p">[</span><span class="kt">f64</span><span class="p">])</span><span class="w"> </span>-&gt; <span class="nc">PackedCommand</span><span class="w"> </span><span class="p">{</span><span class="w"/>
<span class="w">        </span><span class="k">match</span><span class="w"> </span><span class="o">*</span><span class="bp">self</span><span class="w"> </span><span class="p">{</span><span class="w"/>
<span class="w">            </span><span class="n">PathCommand</span>::<span class="n">MoveTo</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"/>
<span class="w">                </span><span class="n">coords</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">x</span><span class="p">;</span><span class="w"/>
<span class="w">                </span><span class="n">coords</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">y</span><span class="p">;</span><span class="w"/>
<span class="w">                </span><span class="n">PackedCommand</span>::<span class="n">MoveTo</span><span class="w"/>
<span class="w">            </span><span class="p">}</span><span class="w"/>

<span class="w">            </span><span class="c1">// etc. for the other simple commands</span>

<span class="w">            </span><span class="n">PathCommand</span>::<span class="n">Arc</span><span class="p">(</span><span class="k">ref</span><span class="w"> </span><span class="n">a</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">a</span><span class="p">.</span><span class="n">to_packed_and_coords</span><span class="p">(</span><span class="n">coords</span><span class="p">),</span><span class="w"/>
<span class="w">        </span><span class="p">}</span><span class="w"/>
<span class="w">    </span><span class="p">}</span><span class="w"/>
<span class="p">}</span><span class="w"/>
</code></pre></div>


<p>Let's look at that <code>to_packed_and_coords</code> more closely:</p>
<div class="highlight"><pre><span/><code><span class="k">impl</span><span class="w"> </span><span class="n">EllipticalArc</span><span class="w"> </span><span class="p">{</span><span class="w"/>
<span class="w">    </span><span class="k">fn</span> <span class="nf">to_packed_and_coords</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">coords</span>: <span class="kp">&amp;</span><span class="nc">mut</span><span class="w"> </span><span class="p">[</span><span class="kt">f64</span><span class="p">])</span><span class="w"> </span>-&gt; <span class="nc">PackedCommand</span><span class="w"> </span><span class="p">{</span><span class="w"/>
<span class="w">        </span><span class="n">coords</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">r</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span><span class="w"/>
<span class="w">        </span><span class="n">coords</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">r</span><span class="p">.</span><span class="mi">1</span><span class="p">;</span><span class="w"/>
<span class="w">        </span><span class="n">coords</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">x_axis_rotation</span><span class="p">;</span><span class="w"/>
<span class="w">        </span><span class="n">coords</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">from</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span><span class="w"/>
<span class="w">        </span><span class="n">coords</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">from</span><span class="p">.</span><span class="mi">1</span><span class="p">;</span><span class="w"/>
<span class="w">        </span><span class="n">coords</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">to</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span><span class="w"/>
<span class="w">        </span><span class="n">coords</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">to</span><span class="p">.</span><span class="mi">1</span><span class="p">;</span><span class="w"/>

<span class="w">        </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">large_arc</span><span class="p">,</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">sweep</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"/>
<span class="w">            </span><span class="p">(</span><span class="n">LargeArc</span><span class="p">(</span><span class="kc">false</span><span class="p">),</span><span class="w"> </span><span class="n">Sweep</span>::<span class="n">Negative</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">PackedCommand</span>::<span class="n">ArcSmallNegative</span><span class="p">,</span><span class="w"/>
<span class="w">            </span><span class="p">(</span><span class="n">LargeArc</span><span class="p">(</span><span class="kc">false</span><span class="p">),</span><span class="w"> </span><span class="n">Sweep</span>::<span class="n">Positive</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">PackedCommand</span>::<span class="n">ArcSmallPositive</span><span class="p">,</span><span class="w"/>
<span class="w">            </span><span class="p">(</span><span class="n">LargeArc</span><span class="p">(</span><span class="kc">true</span><span class="p">),</span><span class="w"> </span><span class="n">Sweep</span>::<span class="n">Negative</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">PackedCommand</span>::<span class="n">ArcLargeNegative</span><span class="p">,</span><span class="w"/>
<span class="w">            </span><span class="p">(</span><span class="n">LargeArc</span><span class="p">(</span><span class="kc">true</span><span class="p">),</span><span class="w"> </span><span class="n">Sweep</span>::<span class="n">Positive</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">PackedCommand</span>::<span class="n">ArcLargePositive</span><span class="p">,</span><span class="w"/>
<span class="w">        </span><span class="p">}</span><span class="w"/>
<span class="w">    </span><span class="p">}</span><span class="w"/>
<span class="p">}</span><span class="w"/>
</code></pre></div>


<h2>Creating the compact Path</h2>
<p>Let's look at <code>PathBuilder::into_path</code> line by line:</p>
<div class="highlight"><pre><span/><code><span class="k">impl</span><span class="w"> </span><span class="n">PathBuilder</span><span class="w"> </span><span class="p">{</span><span class="w"/>
<span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">into_path</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Path</span><span class="w"> </span><span class="p">{</span><span class="w"/>
<span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">num_commands</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">path_commands</span><span class="p">.</span><span class="n">len</span><span class="p">();</span><span class="w"/>
<span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">num_coords</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="w"/>
<span class="w">            </span><span class="p">.</span><span class="n">path_commands</span><span class="w"/>
<span class="w">            </span><span class="p">.</span><span class="n">iter</span><span class="p">()</span><span class="w"/>
<span class="w">            </span><span class="p">.</span><span class="n">fold</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="o">|</span><span class="n">acc</span><span class="p">,</span><span class="w"> </span><span class="n">cmd</span><span class="o">|</span><span class="w"> </span><span class="n">acc</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">cmd</span><span class="p">.</span><span class="n">num_coordinates</span><span class="p">());</span><span class="w"/>
</code></pre></div>


<p>First we compute the total number of coordinates using <code>fold</code>; we ask
each command <code>cmd</code> its <code>num_coordinates()</code> and add it into the <code>acc</code>
accumulator.</p>
<p>Now we know how much memory to allocate:</p>
<div class="highlight"><pre><span/><code><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">packed_commands</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">Vec</span>::<span class="n">with_capacity</span><span class="p">(</span><span class="n">num_commands</span><span class="p">);</span><span class="w"/>
<span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">coords</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="mf">0.0</span><span class="p">;</span><span class="w"> </span><span class="n">num_coords</span><span class="p">];</span><span class="w"/>
</code></pre></div>


<p>We use <code>Vec::with_capacity</code> to allocate exactly as much memory as we will
need for the <code>packed_commands</code>; adding elements will not need a
<code>realloc()</code>, since we already know how many elements we will have.</p>
<p>We use the <code>vec!</code> macro to create an array of <code>0.0</code> repeated
<code>num_coords</code> times; that macro uses <code>with_capacity</code> internally.  That is the
array we will use to store the coordinates for all the commands.</p>
<div class="highlight"><pre><span/><code><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">coords_slice</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">coords</span><span class="p">.</span><span class="n">as_mut_slice</span><span class="p">();</span><span class="w"/>
</code></pre></div>


<p>We get a mutable slice out of the whole array of coordinates.</p>
<div class="highlight"><pre><span/><code><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="n">c</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">path_commands</span><span class="w"> </span><span class="p">{</span><span class="w"/>
<span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">c</span><span class="p">.</span><span class="n">num_coordinates</span><span class="p">();</span><span class="w"/>
<span class="w">            </span><span class="n">packed_commands</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">to_packed</span><span class="p">(</span><span class="n">coords_slice</span><span class="p">.</span><span class="n">get_mut</span><span class="p">(</span><span class="mi">0</span><span class="p">..</span><span class="n">n</span><span class="p">).</span><span class="n">unwrap</span><span class="p">()));</span><span class="w"/>
<span class="w">            </span><span class="n">coords_slice</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="n">coords_slice</span><span class="p">[</span><span class="n">n</span><span class="p">..];</span><span class="w"/>
<span class="w">        </span><span class="p">}</span><span class="w"/>
</code></pre></div>


<p>For each command, we see how many coordinates it will generate and we
put that number in <code>n</code>.  We get a mutable sub-slice from
<code>coords_slice</code> with only that number of elements, and pass it to
<code>to_packed</code> for each command.</p>
<p>At the end of each iteration we move the mutable slice to where the
next command's coordinates will go.</p>
<div class="highlight"><pre><span/><code><span class="w">        </span><span class="n">Path</span><span class="w"> </span><span class="p">{</span><span class="w"/>
<span class="w">            </span><span class="n">commands</span>: <span class="nc">packed_commands</span><span class="p">.</span><span class="n">into_boxed_slice</span><span class="p">(),</span><span class="w"/>
<span class="w">            </span><span class="n">coords</span>: <span class="nc">coords</span><span class="p">.</span><span class="n">into_boxed_slice</span><span class="p">(),</span><span class="w"/>
<span class="w">        </span><span class="p">}</span><span class="w"/>
<span class="w">    </span><span class="p">}</span><span class="w"/>
</code></pre></div>


<p>At the end, we create the final and immutable <code>Path</code> by converting
each array <code>into_boxed_slice</code> like the last time.  That way each of
the two arrays, the one with <code>PackedCommand</code>s and the one with
coordinates, occupy the minimum space they need.</p>
<h2>An iterator for Path</h2>
<p>This is all very well, but we also want it to be easy to iterate on
that compact representation; the <code>PathCommand</code> enums from the
beginning are very convenient to use and that's what the rest of the
code already uses.  Let's make an iterator that unpacks what is inside
a <code>Path</code> and produces a <code>PathCommand</code> for each element.</p>
<div class="highlight"><pre><span/><code><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">PathIter</span><span class="o">&lt;</span><span class="na">'a</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"/>
<span class="w">    </span><span class="n">commands</span>: <span class="nc">slice</span>::<span class="n">Iter</span><span class="o">&lt;</span><span class="na">'a</span><span class="p">,</span><span class="w"> </span><span class="n">PackedCommand</span><span class="o">&gt;</span><span class="p">,</span><span class="w"/>
<span class="w">    </span><span class="n">coords</span>: <span class="kp">&amp;</span><span class="na">'a</span><span class="w"> </span><span class="p">[</span><span class="kt">f64</span><span class="p">],</span><span class="w"/>
<span class="p">}</span><span class="w"/>
</code></pre></div>


<p>We need an iterator over the array of <code>PackedCommand</code> so we can visit
each command.  However, to get elements of <code>coords</code>, I am going to
use a slice of <code>f64</code> instead of an iterator.</p>
<p>Let's look at the implementation of the iterator:</p>
<div class="highlight"><pre><span/><code><span class="k">impl</span><span class="o">&lt;</span><span class="na">'a</span><span class="o">&gt;</span><span class="w"> </span><span class="nb">Iterator</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">PathIter</span><span class="o">&lt;</span><span class="na">'a</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"/>
<span class="w">    </span><span class="k">type</span> <span class="nc">Item</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">PathCommand</span><span class="p">;</span><span class="w"/>

<span class="w">    </span><span class="k">fn</span> <span class="nf">next</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Option</span><span class="o">&lt;</span><span class="n">Self</span>::<span class="n">Item</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"/>
<span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="kd">let</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">commands</span><span class="p">.</span><span class="n">next</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w"/>
<span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="n">cmd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">PathCommand</span>::<span class="n">from_packed</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">coords</span><span class="p">);</span><span class="w"/>
<span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="n">num_coords</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">cmd</span><span class="p">.</span><span class="n">num_coordinates</span><span class="p">();</span><span class="w"/>
<span class="w">            </span><span class="bp">self</span><span class="p">.</span><span class="n">coords</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="bp">self</span><span class="p">.</span><span class="n">coords</span><span class="p">[</span><span class="n">num_coords</span><span class="p">..];</span><span class="w"/>
<span class="w">            </span><span class="nb">Some</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span><span class="w"/>
<span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w"/>
<span class="w">            </span><span class="nb">None</span><span class="w"/>
<span class="w">        </span><span class="p">}</span><span class="w"/>
<span class="w">    </span><span class="p">}</span><span class="w"/>
<span class="p">}</span><span class="w"/>
</code></pre></div>


<p>Since we want each iteration to produce a <code>PathCommand</code>, we declare it
as having the associated <code>type Item =  PathCommand</code>.</p>
<p>If the <code>self.commands</code> iterator has another element, it means there is
another <code>PackedCommand</code> available.</p>
<p>We call <code>PathCommand::from_packed</code> with the <code>self.coords</code> slice to
unpack a command and its coordinates.  We see how many coordinates the
command consumed and re-slice <code>self.coords</code> according to the number of
commands, so that it now points to the coordinates for the next
command.</p>
<p>We return <code>Some(cmd)</code> if there was an element, or <code>None</code> if the
iterator is empty.</p>
<p>The implementation of <code>from_packed</code> is obvious and I'll just paste a
bit from it:</p>
<div class="highlight"><pre><span/><code><span class="k">impl</span><span class="w"> </span><span class="n">PathCommand</span><span class="w"> </span><span class="p">{</span><span class="w"/>
<span class="w">    </span><span class="k">fn</span> <span class="nf">from_packed</span><span class="p">(</span><span class="n">packed</span>: <span class="kp">&amp;</span><span class="nc">PackedCommand</span><span class="p">,</span><span class="w"> </span><span class="n">coords</span>: <span class="kp">&amp;</span><span class="p">[</span><span class="kt">f64</span><span class="p">])</span><span class="w"> </span>-&gt; <span class="nc">PathCommand</span><span class="w"> </span><span class="p">{</span><span class="w"/>
<span class="w">        </span><span class="k">match</span><span class="w"> </span><span class="o">*</span><span class="n">packed</span><span class="w"> </span><span class="p">{</span><span class="w"/>
<span class="w">            </span><span class="n">PackedCommand</span>::<span class="n">MoveTo</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"/>
<span class="w">                </span><span class="kd">let</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">coords</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="w"/>
<span class="w">                </span><span class="kd">let</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">coords</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="w"/>
<span class="w">                </span><span class="n">PathCommand</span>::<span class="n">MoveTo</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="p">)</span><span class="w"/>
<span class="w">            </span><span class="p">}</span><span class="w"/>

<span class="w">            </span><span class="c1">// etc. for the other variants in PackedCommand</span>

<span class="w">            </span><span class="n">PackedCommand</span>::<span class="n">ArcSmallNegative</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">PathCommand</span>::<span class="n">Arc</span><span class="p">(</span><span class="n">EllipticalArc</span>::<span class="n">from_coords</span><span class="p">(</span><span class="w"/>
<span class="w">                </span><span class="n">LargeArc</span><span class="p">(</span><span class="kc">false</span><span class="p">),</span><span class="w"/>
<span class="w">                </span><span class="n">Sweep</span>::<span class="n">Negative</span><span class="p">,</span><span class="w"/>
<span class="w">                </span><span class="n">coords</span><span class="p">,</span><span class="w"/>
<span class="w">            </span><span class="p">)),</span><span class="w"/>

<span class="w">            </span><span class="n">PackedCommand</span>::<span class="n">ArcSmallPositive</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="c1">// etc.</span>

<span class="w">            </span><span class="n">PackedCommand</span>::<span class="n">ArcLargeNegative</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="c1">// etc.</span>

<span class="w">            </span><span class="n">PackedCommand</span>::<span class="n">ArcLargePositive</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="c1">// etc.</span>
<span class="w">        </span><span class="p">}</span><span class="w"/>
<span class="w">    </span><span class="p">}</span><span class="w"/>
<span class="p">}</span><span class="w"/>
</code></pre></div>


<h2>Results</h2>
<p>Before the changes (this is the same Massif heading as above):</p>
<div class="highlight"><pre><span/><code><span class="err">--------------------------------------------------------------------------------</span>
<span class="err">  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)</span>
<span class="err">--------------------------------------------------------------------------------</span>
<span class="err"> 33 24,139,598,653    1,416,831,176    1,329,943,212    86,887,964            0</span>
<span class="err">                                       ^^^^^^^^^^^^^</span>
<span class="err">                                           boo</span>
</code></pre></div>


<p>After:</p>
<div class="highlight"><pre><span/><code><span class="err">--------------------------------------------------------------------------------</span>
<span class="err">  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)</span>
<span class="err">--------------------------------------------------------------------------------</span>
<span class="err"> 28 26,611,886,993    1,093,747,888    1,023,147,907    70,599,981            0</span>
<span class="err">                                       ^^^^^^^^^^^^^</span>
<span class="err">                                          oh yeah</span>
</code></pre></div>


<p>We went from using 1,329,943,212 bytes down to 1,023,147,907 bytes,
that is, we knocked it down by 300 MB.</p>
<p>However, that is for the whole program.  Above we saw that <code>Path</code> data
occupies 403,513,776 bytes; how about now?</p>
<div class="highlight"><pre><span/><code><span class="err">-&gt;07.45% (81,525,328B) 0x4A34C6F: alloc (alloc.rs:84)</span>
<span class="err">| -&gt;07.45% (81,525,328B) 0x4A34C6F: alloc (alloc.rs:172)</span>
<span class="err">|   -&gt;07.45% (81,525,328B) 0x4A34C6F: allocate_in&lt;f64,alloc::alloc::Global&gt; (raw_vec.rs:98)</span>
<span class="err">|     -&gt;07.45% (81,525,328B) 0x4A34C6F: with_capacity&lt;f64&gt; (raw_vec.rs:167)</span>
<span class="err">|       -&gt;07.45% (81,525,328B) 0x4A34C6F: with_capacity&lt;f64&gt; (vec.rs:358)</span>
<span class="err">|         -&gt;07.45% (81,525,328B) 0x4A34C6F: rsvg_internals::path_builder::PathBuilder::into_path (path_builder.rs:486)</span>
</code></pre></div>


<p>Perfect.  We went from occupying 403,513,776 bytes to just
81,525,328 bytes.  Instead of <code>Path</code> data amounting to 28.48% of the
heap, it is just 7.45%.</p>
<p>I think we can stop worrying about <code>Path</code> data for now.  I like how
this turned out without having to use <code>unsafe</code>.</p>
<h2>References</h2>
<ul>
<li><a href="https://gitlab.gnome.org/GNOME/librsvg/-/commit/e9db621cdc79d31b8694d0f42cee4e02628ee145">Refactoring to use an iterator</a></li>
<li><a href="https://gitlab.gnome.org/GNOME/librsvg/-/commit/cb4cde7140cd6ecfd8a78483278dcb1ab8217612">Adding tests for Path/PathBuilder</a></li>
<li><a href="https://gitlab.gnome.org/GNOME/librsvg/-/commit/b183ac1e3207bd8110d60ded8878a22daed3f891">Using a more compact representation for Path</a></li>
</ul></div>
    </content>
    <updated>2020-03-27T00:58:36Z</updated>
    <published>2020-03-27T00:58:36Z</published>
    <category term="misc"/>
    <category term="librsvg"/>
    <category term="rust"/>
    <category term="gnome"/>
    <category term="performance"/>
    <author>
      <name>Federico Mena Quintero</name>
    </author>
    <source>
      <id>https://people.gnome.org/~federico/blog/</id>
      <link href="https://people.gnome.org/~federico/blog/" rel="alternate" type="text/html"/>
      <link href="https://people.gnome.org/~federico/blog/feeds/atom.xml" rel="self" type="application/atom+xml"/>
      <title>Federico's Blog</title>
      <updated>2020-03-27T00:58:36Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-5968355124473522212.post-1318135828711063313</id>
    <link href="http://nibblestew.blogspot.com/feeds/1318135828711063313/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/>
    <link href="http://nibblestew.blogspot.com/2020/03/its-not-what-programming-languages-do.html#comment-form" rel="replies" title="13 Comments" type="text/html"/>
    <link href="http://www.blogger.com/feeds/5968355124473522212/posts/default/1318135828711063313" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/5968355124473522212/posts/default/1318135828711063313" rel="self" type="application/atom+xml"/>
    <link href="http://nibblestew.blogspot.com/2020/03/its-not-what-programming-languages-do.html" rel="alternate" title="It's not what programming languages do, it's what they shepherd you to" type="text/html"/>
    <title>It's not what programming languages do, it's what they shepherd you to</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">How many of you have listened, read or taken part in a discussion about programming languages that goes like the following:<br/><br/>Person A: "Programming language X is bad, code written in it is unreadable and horrible."<br/><br/>Person B: "No it's not. You can write good code in X, you just have to be disciplined."<br/><br/>Person A: "It does not work, if you look at existing code it is all awful."<br/><br/>Person B: "No! Wrong! Those are just people doing it badly. You can write readable code just fine."<br/><br/>After this the discussion repeats from the beginning until either one gets fed up and just leaves.<br/><br/>I'm guessing more than 99% of you readers have seen this, often multiple times. The sad part of this is that even though this thing happens all the time, nobody learns anything and the discussion begins anew all the time. Let's see if we can do something about this. A good way to go about it is to try to come up with a name and a description for the underlying issue.<br/><blockquote class="tr_bq"><b>shepherding</b> An invisible property of a progamming language and its ecosystem that drives people into solving problems in ways that are natural for the programming language itself rather than ways that are considered "better" in some sense. These may include things like long term maintainability, readability and performance.</blockquote>This is a bit abstract, so let's look at some examples.<br/><h2>Perl shepherds you into using regexps</h2>Perl has several XML parsers available and they are presumably good at their jobs (I have never actually used one so I wouldn't know). Yet, in practice, many Perl scripts do XML (and HTML) manipulation with regexes, which is brittle and "wrong" for lack of a better term. This is a clear case of shepherding. Text manipulation in Perl is easy. Importing, calling and using an XML parser is not. And really all you need to do is to change that one string to a different string. It's tempting. It works. Surely it could not fail. Let's just do it and get on with other stuff. Boom, just like that you have been shepherded.<br/><br/>Note that there is nothing about Perl that forces you to do this. It provides all the tools needed to do the right thing. And yet people don't, because they are being shepherded (unconsciously) into doing the thing that is easy and fast in Perl.<br/><h2>Make shepherds you into embedding shell pipelines in Makefiles</h2><div>Compiling code with Make is tolerable, but it fails quite badly when you need to generate source code, data files and the like. The sustainable solution would be to write a standalone program in a proper scripting language that has all the code logic needed and call that from Make with your inputs and outputs. This rarely happens. Instead people think "I know, I have an entire Unix userland available [1], I can just string together random text mangling tools in a pipeline, write it here and be done". This is how unmaintainability is born.</div><div><br/></div><div>Nothing about Make <i>forces</i> people to behave like this. Make <i>shepherds</i> people into doing this. It is the easy, natural outcome when faced with the given problem.</div><h2>Other examples</h2><div><ul><li>C shepherds you into manipulating data via pointers rather than value objects.</li><li>C++ shepherds you into providing dependencies as header-only libraries.</li><li>Java does not shepherd you into using classes and objects, it pretty much mandates them.</li><li>Turing complete configuration languages shepherd you into writing complex logic with them, even though they are usually not particularly good programming environments.</li></ul></div>[1] Which you don't have on Windows. Not to mention that every Unix has slightly different command line arguments and semantics for basic commands meaning shell pipelines are not actually portable.</div>
    </content>
    <updated>2020-03-26T15:18:00Z</updated>
    <published>2020-03-26T15:18:00Z</published>
    <author>
      <name>Jussi</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/03370287682352908292</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-5968355124473522212</id>
      <author>
        <name>Jussi</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/03370287682352908292</uri>
      </author>
      <link href="http://nibblestew.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/5968355124473522212/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://nibblestew.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="http://www.blogger.com/feeds/5968355124473522212/posts/default?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <title>Nibble Stew - a gathering of development thoughts</title>
      <updated>2020-04-07T13:58:30Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://wingolog.org/2020/03/25/firefoxs-low-latency-webassembly-compiler</id>
    <link href="http://wingolog.org/archives/2020/03/25/firefoxs-low-latency-webassembly-compiler" rel="alternate" type="text/html"/>
    <title>firefox's low-latency webassembly compiler</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div><p>Good day!</p><p>Today I'd like to write a bit about the WebAssembly baseline compiler in Firefox.</p><p><b>background: throughput and latency</b></p><p>WebAssembly, as you know, is a virtual machine that is present in web browsers like Firefox.  An important initial goal for WebAssembly was to be a good target for compiling programs written in C or C++.  You can visit a web page that includes a program written in C++ and compiled to WebAssembly, and that WebAssembly module will be downloaded onto your computer and run by the web browser.</p><p>A good virtual machine for C and C++ has to be fast.  The <i>throughput</i> of a program compiled to WebAssembly (the amount of work it can get done per unit time) should be approximately the same as its throughput when compiled to "native" code (x86-64, ARMv7, etc.).  WebAssembly meets this goal by defining an instruction set that consists of similar operations to those directly supported by CPUs; WebAssembly implementations use optimizing compilers to translate this portable instruction set into native code.</p><p>There is another dimension of fast, though: not just work per unit time, but also time until first work is produced.  If you want to go play <a href="http://wasm.continuation-labs.com/d3demo/">Doom 3 on the web</a>, you care about frames per second but also time to first frame.  Therefore, WebAssembly was designed not just for high throughput but also for low latency.  This focus on low-latency compilation expresses itself in two ways: binary size and binary layout.</p><p>On the size front, WebAssembly is optimized to encode small files, reducing download time.  One way in which this happens is to use a <a href="https://webassembly.github.io/spec/core/binary/values.html#integers">variable-length encoding</a> anywhere an instruction needs to specify an integer.  In the usual case where, for example, there are fewer than 128 local variables, this means that a <a href="https://webassembly.github.io/spec/core/syntax/instructions.html#syntax-instr-variable"><tt>local.get</tt> instruction</a> can refer to a local variable using just one byte.  Another strategy is that WebAssembly programs target a stack machine, reducing the need for the instruction stream to explicitly load operands or store results.  Note that size optimization only goes so far: it's assumed that the bytes of the encoded module will be compressed by gzip or some other algorithm, so sub-byte entropy coding is out of scope.</p><p>On the layout side, the WebAssembly binary encoding is sorted by design:  definitions come before uses.  For example, there is a <a href="https://webassembly.github.io/spec/core/binary/modules.html#binary-typesec">section of type definitions</a> that occurs early in a WebAssembly module.  Any use of a declared type can only come after the definition.  In the case of functions which are of course mutually recursive, function type declarations come before the actual definitions.  In theory this allows web browsers to take a one-pass, streaming approach to compilation, starting to compile as functions arrive and before download is complete.</p><p><b>implementation strategies</b></p><p>The goals of high throughput and low latency conflict with each other.  To get best throughput, a compiler needs to spend time on code motion, register allocation, and instruction selection; to get low latency, that's exactly what a compiler should not do.  Web browsers therefore take a two-pronged approach: they have a compiler optimized for throughput, and a compiler optimized for latency.  As a WebAssembly file is being downloaded, it is first compiled by the quick-and-dirty low-latency compiler, with the goal of producing machine code as soon as possible.  After that "baseline" compiler has run, the "optimizing" compiler works in the background to produce high-throughput code.  The optimizing compiler can take more time because it runs on a separate thread.  When the optimizing compiler is done, it replaces the baseline code.  (<a href="https://searchfox.org/mozilla-central/source/js/src/wasm/WasmCompile.cpp#270-418">The actual heuristics about whether to do baseline + optimizing ("tiering") or just to go straight to the optimizing compiler are a bit hairy</a>, but this is a summary.)</p><p>This article is about the WebAssembly baseline compiler in Firefox.  It's a surprising bit of code and I learned a few things from it.</p><p><b>design questions</b></p><p>Knowing what you know about the goals and design of WebAssembly, how would you implement a low-latency compiler?</p><p>It's a question worth thinking about so I will give you a bit of space in which to do so.</p><p>.</p><p>.</p><p>.</p><p>After spending a lot of time in Firefox's WebAssembly baseline compiler, I have extracted the following principles:</p><ol>
<li><p>The function is the unit of compilation</p></li>
<li><p>One pass, and one pass only</p></li>
<li><p>Lean into the stack machine</p></li>
<li><p>No noodling!</p></li>
</ol><p>In the remainder of this article we'll look into these individual points.  Note, although I have done a good bit of hacking on this compiler, its design and original implementation comes mainly from Mozilla hacker Lars Hansen, who also currently maintains it.  All errors of exegesis are mine, of course!</p><p><b>the function is the unit of compilation</b></p><p>As we mentioned, in the binary encoding of a WebAssembly module, all definitions needed by any function come before all function definitions.  This naturally leads to a partition between two phases of bytestream parsing: an initial serial phase that collects the set of global type definitions, annotations as to which functions are imported and exported, and so on, and a subsequent phase that compiles individual functions in an essentially independent manner.</p><p>The advantage of this approach is that compiling functions is a natural task unit of parallelism.  If the user has a machine with 8 virtual cores, the web browser can keep one or two cores for the browser itself and farm out WebAssembly compilation tasks to the rest.  The result is that the compiled code is available sooner.</p><p>Taking functions to be the unit of compilation also allows for an easy "tier-up" mechanism: after the baseline compiler is done, the optimizing compiler can take more time to produce better code, and when it is done, it can swap out the results on a per-function level.  All function calls from the baseline compiler go through a jump table indirection, to allow for tier-up.  In SpiderMonkey there is no mechanism currently to tier down; if you need to debug WebAssembly code, you need to refresh the page, causing the wasm code to be compiled in debugging mode.  For the record, SpiderMonkey can only tier up at function calls (it doesn't do OSR).</p><p>This simple approach does have some down-sides, in that it leaves intraprocedural optimizations on the table (inlining, contification, custom calling conventions, speculative optimizations).  This is mitigated in two ways, the most obvious being that LLVM or whatever produced the WebAssembly has ideally already done whatever inlining might be fruitful.  The second is that WebAssembly is designed for predictable performance.  In JavaScript, an implementation needs to do run-time type feedback and speculative optimizations to get good performance, but the result is that it can be hard to understand why a program is fast or slow.  The designers and implementers of WebAssembly in browsers all had first-hand experience with JavaScript virtual machines, and actively wanted to avoid unpredictable performance in WebAssembly.  Therefore there is currently a kind of détente among the various browser vendors, that everyone has agreed that they won't do speculative inlining -- yet, anyway.  Who knows what will happen in the future, though.</p><p>Digressing, the summary here is that the baseline compiler receives an individual function body as input, and generates code just for that function.</p><p><b>one pass, and one pass only</b></p><p>The WebAssembly baseline compiler makes one pass through the bytecode of a function.  Nowhere in all of this are we going to build an abstract syntax tree or a graph of basic blocks.  Let's follow through how that works.</p><p>Firstly, <a href="https://searchfox.org/mozilla-central/source/js/src/wasm/WasmBaselineCompile.cpp#12827"><tt>emitFunction</tt></a> simply emits a prologue, then the body, then an epilogue.  <tt>emitBody</tt> is basically a <a href="https://searchfox.org/mozilla-central/source/js/src/wasm/WasmBaselineCompile.cpp#11813">big loop</a> that consumes opcodes from the instruction stream, dispatching to opcode-specific code emitters (e.g. <a href="https://searchfox.org/mozilla-central/source/js/src/wasm/WasmBaselineCompile.cpp#7440"><tt>emitAddI32</tt></a>).</p><p>The opcode-specific code emitters are also responsible for validating their arguments; for example, <tt>emitAddI32</tt> is wrapped in an <a href="https://searchfox.org/mozilla-central/source/js/src/wasm/WasmBaselineCompile.cpp#11821">assertion that there are two <tt>i32</tt> values on the stack</a>.  This validation logic is shared by a templatized <a href="https://searchfox.org/mozilla-central/source/js/src/wasm/WasmOpIter.h#549">codestream iterator</a> so that it can be re-used by the optimizing compiler, as well as by the publicly-exposed <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/validate"><tt>WebAssembly.validate</tt></a> function.</p><p>A corollary of this approach is that machine code is emitted in bytestream order; if the WebAssembly instruction stream has an <tt>i32.add</tt> followed by a <tt>i32.sub</tt>, then the machine code will have an <tt>addl</tt> followed by a <tt>subl</tt>.</p><p>WebAssembly has a syntactically limited form of non-local control flow; it's not <tt>goto</tt>.  Instead, instructions are contained in a tree of nested <i>control blocks</i>, and control can only exit nonlocally to a containing control block.  There are three kinds of control blocks:  jumping to a <tt>block</tt> or an <tt>if</tt> will continue at the end of the block, whereas jumping to a <tt>loop</tt> will continue at its beginning.  In either case, as the compiler keeps a stack of nested control blocks, it has the set of valid jump targets and can use the usual assembler logic to patch forward jump addresses when the compiler gets to the block exit.</p><p><b>lean into the stack machine</b></p><p>This is the interesting bit!  So, WebAssembly instructions target a stack machine.  That is to say, there's an abstract stack onto which evaluating <tt>i32.const 32</tt> pushes a value, and if followed by <tt>i32.const 10</tt> there would then be <tt>i32(32) | i32(10)</tt> on the stack (where new elements are added on the right).  A subsequent <tt>i32.add</tt> would pop the two values off, and push on the result, leaving the stack as <tt>i32(42)</tt>.  There is also a fixed set of local variables, declared at the beginning of the function.</p><p>The easiest thing that a compiler can do, then, when faced with a stack machine, is to emit code for a stack machine: as values are pushed on the abstract stack, emit code that pushes them on the machine stack.</p><p>The downside of this approach is that you emit a fair amount of code to do read and write values from the stack.  Machine instructions generally take arguments from registers and write results to registers; going to memory is a bit superfluous.  We're willing to accept suboptimal code generation for this quick-and-dirty compiler, but isn't there something smarter we can do for ephemeral intermediate values?</p><p>Turns out -- yes!  The baseline compiler keeps an abstract <a href="https://searchfox.org/mozilla-central/source/js/src/wasm/WasmBaselineCompile.cpp#2097"><i>value stack</i></a> as it compiles.  For example, compiling <tt>i32.const 32</tt> pushes nothing on the machine stack: it just adds a <tt>ConstI32</tt> node to the value stack.  When an instruction needs an operand that turns out to be a <tt>ConstI32</tt>, it can either encode the operand as an immediate argument or <a href="https://searchfox.org/mozilla-central/source/js/src/wasm/WasmBaselineCompile.cpp#3730">load it into a register</a>.</p><p>Say we are evaluating the <tt>i32.add</tt> discussed above.  After the add, where does the result go?  For the baseline compiler, the answer is always "in a register" via pushing a new <tt>RegisterI32</tt> entry on the value stack.  The baseline compiler includes a <a href="https://searchfox.org/mozilla-central/source/js/src/wasm/WasmBaselineCompile.cpp#742">stupid register allocator</a> that <a href="https://searchfox.org/mozilla-central/source/js/src/wasm/WasmBaselineCompile.cpp#3456">spills the value stack to the machine stack if no register is available</a>, updating value stack entries from e.g. <tt>RegisterI32</tt> to <tt>MemI32</tt>.  Note, a <tt>ConstI32</tt> never needs to be spilled:  its value can always be reloaded as an immediate.</p><p>The end result is that the baseline compiler avoids lots of stack store and load code generation, which speeds up the compiler, and happens to make faster code as well.</p><p>Note that there is one limitation, currently: control-flow joins can have multiple predecessors and can pass a value (in the current WebAssembly specification), so the allocation of that value needs to be agreed-upon by all predecessors.  As in this code:</p><pre>(func $f (param $arg i32) (result i32)
  (block $b (result i32)
    (i32.const 0)
    (local.get $arg)
    (i32.eqz)
    (br_if $b) ;; return 0 from $b if $arg is zero
    (drop)
    (i32.const 1))) ;; otherwise return 1
;; result of block implicitly returned
</pre><p>When the <tt>br_if</tt> branches to the block end, where should it put the result value?  The baseline compiler effectively punts on this question and just puts it in a well-known register (e.g., <tt>$rax</tt> on x86-64).  Results for block exits are the only place where WebAssembly has "phi" variables, and the baseline compiler allocates all integer phi variables to the same register.  A hack, but there we are.</p><p><b>no noodling!</b></p><p>When I started to hack on the baseline compiler, I did a lot of code reading, and eventually came on code like this:</p><pre>void BaseCompiler::emitAddI32() {
  int32_t c;
  if (popConstI32(&amp;c)) {
    RegI32 r = popI32();
    masm.add32(Imm32(c), r);
    pushI32(r);
  } else {
    RegI32 r, rs;
    pop2xI32(&amp;r, &amp;rs);
    masm.add32(rs, r);
    freeI32(rs);
    pushI32(r);
  }
}
</pre><p>I said to myself, this is silly, why are we only emitting the add-immediate code if the constant is on top of the stack?  What if instead the constant was the deeper of the two operands, why do we then load the constant into a register?  I asked on the chat channel if it would be OK if I improved codegen here and got a response I was not expecting: no noodling!</p><p>The reason is, performance of baseline-compiled code essentially doesn't matter.  Obviously let's not pessimize things but the reason there's a baseline compiler is to emit code quickly.  If we start to add more code to the baseline compiler, the compiler itself will slow down.</p><p>For that reason, changes are only accepted to the baseline compiler if they are necessary for some reason, <i>or</i> if they improve latency as measured using some real-world benchmark (time-to-first-frame on Doom 3, for example).</p><p>This to me was a real eye-opener: a compiler optimized not for the quality of the code that it generates, but rather for how fast it can produce the code.  I had seen this in action before but this example really brought it home to me.</p><p>The focus on compiler throughput rather than compiled-code throughput makes it pretty gnarly to hack on the baseline compiler -- care has to be taken when adding new features not to significantly regress the old.  It is much more like hacking on a production JavaScript parser than your traditional SSA-based compiler.</p><p><b>that's a wrap!</b></p><p>So that's the WebAssembly baseline compiler in SpiderMonkey / Firefox.  Until the next time, happy hacking!</p></div></div>
    </content>
    <updated>2020-03-25T16:29:56Z</updated>
    <published>2020-03-25T16:29:56Z</published>
    <author>
      <name>Andy Wingo</name>
      <uri>http://wingolog.org/</uri>
    </author>
    <source>
      <id>http://wingolog.org/feed/atom</id>
      <link href="http://wingolog.org/" rel="alternate" type="text/html"/>
      <link href="http://wingolog.org/feed/atom" rel="self" type="application/atom+xml"/>
      <subtitle>A mostly dorky weblog by Andy Wingo</subtitle>
      <title>wingolog</title>
      <updated>2020-04-03T10:56:29Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-GB">
    <id>http://www.gnome.org/~michael/blog/2020/03/25/2020-03-25</id>
    <link href="http://www.gnome.org/~michael/blog/2020-03-25.html" rel="alternate" type="text/html"/>
    <title xml:lang="en-GB">2020-03-25 Wednesday.</title>
    <content type="xhtml" xml:lang="en-GB"><div xmlns="http://www.w3.org/1999/xhtml"><ul> <!-- -->
	<li>
		Mail chew, S&amp;M call, partner call.
	</li>
	<li>
		Really pleased to see <a href="https://www.collaboraoffice.com/collabora-office-android-ios-release-notes/">Collabora
	Office 4.2.1 for Android</a> out - with a lot of rather important fixes,
	performance improvements, UI pretifications and much more.
	</li>
</ul></div>
    </content>
    <updated>2020-03-25T15:20:11Z</updated>
    <published>2020-03-25T15:20:11Z</published>
    <source>
      <id>http://www.gnome.org/~michael/blog/index.atom</id>
      <author>
        <name>Michael Meeks</name>
        <email>michael.meeks@collabora.com</email>
        <uri>http://www.gnome.org/~michael/blog/index.atom</uri>
      </author>
      <link href="http://www.gnome.org/~michael/blog" rel="alternate" type="text/html"/>
      <link href="http://www.gnome.org/~michael/blog/index.atom" rel="self" type="application/atom+xml"/>
      <rights xml:lang="en-GB">Copyright 1999-2015 Michael Meeks</rights>
      <subtitle xml:lang="en-GB">things, of varying degrees of uselessness, that I did</subtitle>
      <title xml:lang="en-GB">Stuff Michael Meeks is doing</title>
      <updated>2020-03-25T15:20:11Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>https://blogs.gnome.org/tbernard/?p=7921</id>
    <link href="https://blogs.gnome.org/tbernard/2020/03/25/there-is-no-linux-platform-2/" rel="alternate" type="text/html"/>
    <title>There is No “Linux” Platform (Part 2)</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This is Part 2 of a series on what’s wrong with the free desktop app ecosystem and how we can fix it, based on the talk Jordan Petridis and I gave at LAS 2019 in Barcelona. In Part 1 we looked at all the different elements making up a platform, and found that there is … <a class="more-link" href="https://blogs.gnome.org/tbernard/2020/03/25/there-is-no-linux-platform-2/">Continue reading <span class="screen-reader-text">There is No “Linux” Platform (Part 2)</span></a></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><em>This is Part 2 of a series on what’s wrong with the free desktop app ecosystem and how we can fix it, based on the talk <a href="https://blogs.gnome.org/alatiera">Jordan Petridis</a> and I gave at <a href="https://linuxappsummit.org/">LAS 2019</a> in Barcelona.</em></p>
<p><a href="https://blogs.gnome.org/tbernard/2019/12/04/there-is-no-linux-platform-1/">In Part 1</a> we looked at all the different elements making up a platform, and found that there is only one “complete” platform in the free software desktop world at the moment. This is because desktops control the developer platforms, while packaging and system integration is managed by separate communities, the distributions, for historical reasons. This additional layer of middlemen is a key reason why we don’t have real platforms.</p>
<h2 id="power-to-the-makers">Power to the Makers</h2>
<p>The problems outlined in Part 1 <a href="http://0pointer.net/blog/revisiting-how-we-put-together-linux-systems.html">are of course</a> <a href="https://www.bassi.io/articles/2017/08/10/dev-v-ops/">not new</a>, and <a href="https://blogs.gnome.org/alexl/2011/09/30/rethinking-the-linux-distibution/">people have</a> <a href="https://blogs.gnome.org/alexl/2015/03/31/official-gnome-sdk-runtime-builds-are-out/">been working</a> <a href="https://blogs.gnome.org/alexl/2018/06/20/flatpak-a-history/">on solutions</a> to them for a long time. Some of these solutions have really started to come together over the last few years, empowering the people making the software to distribute it directly to the people using it.</p>
<p>Thanks to the work of many amazing people in our community you can now develop an app in <a href="https://flathub.org/apps/details/org.gnome.Builder">GNOME Builder</a>, submit it to <a href="https://github.com/flathub/flathub/wiki/App-Submission">Flathub</a>, get it reviewed, and have it available for people to install right away. Once it’s on there you can also update it on a schedule you control. No more waiting 6 months for the next distribution release!</p>
<figure>
<p/><figure class="wp-caption alignnone" id="attachment_7900" style="width: 1393px;"><img alt="" class="wp-image-7900 size-full" height="982" src="https://blogs.gnome.org/tbernard/files/2020/03/builder.png" width="1393"/><figcaption class="wp-caption-text" id="caption-attachment-7900">Thanks to GNOME Builder’s Flatpak integration, “works on my machine” is largely a thing of the past now!</figcaption></figure></figure>
<p>But though this is all very awesome, Flatpak is unfortunately not a complete solution to the platform conundrum discussed earlier in this series.</p>
<h2 id="flatpak-is-not-enough">Flatpak is Not Enough</h2>
<p><a href="http://flatpak.org/">Flatpak</a> does solve a number of the issues around app distribution very elegantly, because app developers do their own packaging, and control their release schedule. It’s also a unified package format that works across different host systems, and the Flatpak runtimes are clearly defined development targets to do QA against.</p>
<p>But that doesn’t magically fix all our problems. The two elephants in the room are</p>
<ol type="1">
<li><strong>The Host still matters:</strong> Flatpak only solves part of the issues with distro packaged apps</li>
<li><strong>Downstream Drama:</strong> Flatpak does not address the conflicts between desktops and distributions</li>
</ol>
<h3 id="the-host-still-matters">1. The Host Still Matters</h3>
<p>Even with Flatpak there are still some unpredictable variables on the host system which affect app developers. On the technical side a number of things can go wrong, from an outdated Flatpak version (which can mean some <a href="https://docs.flatpak.org/en/latest/sandbox-permissions.html#portals">Portals</a> apps rely on may be missing), to missing/incompatible system APIs such as password storage, calendar, or address book.</p>
<p>These things can lead to applications not working properly, or at all. For example, this is why new versions of GNOME Contacts cannot access any contacts on Debian 10, why recent GNOME Calendar cannot access any calendars on Ubuntu 18.04, or why Fractal doesn’t remember your password across restarts on some non-GNOME environments.</p>
<p>There are also user-facing integration points where applications interface with the system. These include things like notifications, the application menu, search providers, the old systray, and the design patterns used in individual apps.</p>
<p>For example, when the system UI or design guidelines change, applications follow the platform and change their UI accordingly. This means if you install newer apps on an older system, there are going to be weird edge cases. For example, if you install new apps on Debian 10 you get a confusing mix of the old and new application menu paradigms because <a href="https://blogs.gnome.org/aday/2018/10/09/farewell-application-menus/">the design guidelines were changed with GNOME 3.32</a> (early 2019).</p>
<figure class="wp-caption alignnone" id="attachment_7984" style="width: 950px;"><img alt="" class="wp-image-7984 size-full" height="688" src="https://blogs.gnome.org/tbernard/files/2020/03/appmenu.png" width="950"/><figcaption class="wp-caption-text" id="caption-attachment-7984">Before GNOME 3.32 applications had global menu items in the application menu in the Shell top bar, but now they are in the primary menu, inside the app window.</figcaption></figure>
<p>Flatpak also applies the host GTK stylesheet and icon set to apps. This means that if the host distribution overrides the system stylesheet, Flatpak will happily apply random, never-tested CSS to every app. Obviously this leads to lots of issues, ranging from ugly but relatively harmless glitches to real usability issues, such as illegible text on buttons. For more background on this particular issue, see <a href="https://blogs.gnome.org/tbernard/2018/10/15/restyling-apps-at-scale/">this blog post</a>.</p>
<p>Some of these issues could be fixed with more standardization, changes to Flatpak, or new portals. However, fundamentally, in order to be a real platform you need a clearly defined environment to develop and test for. Flatpak alone is not enough to achieve that.</p>
<p>Just like “write once, run everywhere” is always an illusion, it’s never going to be possible to completely split apps from the OS. You always need app developers to do <em>some</em> extra work to support different environments, and currently every distribution represents yet another extra environment to support.</p>
<h3 id="downstream-drama">2. Downstream Drama</h3>
<p>Flatpak does not completely solve the issues app developers face in shipping their software, because these can not be isolated from the ones desktop developers face. In order to fix the app developer story we need real platforms. In order to get those we need to resolve the desktop/distribution dilemma.</p>
<p>The issues here roughly match the ones with traditional distribution packaging <a href="https://blogs.gnome.org/tbernard/2019/12/04/there-is-no-linux-platform-1/#the-means-of-distribution">mentioned in Part 1</a>, and can be grouped into three broad categories:</p>
<ul>
<li><strong>Structural issues</strong> inherent to having distributions and desktops be separate projects.</li>
<li><strong>Fragmentation issues</strong> because we have multiple of everything so there’s duplication and/or bad abstraction layers.</li>
<li><strong>Configuration issues</strong>, primarily around settings and other defaults, which have to be set at the distribution level but affect the user experience.</li>
</ul>
<h4 id="structural-issues">Structural Issues</h4>
<p>One of the biggest structural issues is distribution release schedules not being aligned with the upstream one (or between different distributions). GNOME releases every 6 months, but distributions can take anywhere from a few weeks to several years to ship these releases.</p>
<p>This category also includes distributions overriding upstream decisions around system UX, as well as theming/branding issues, due to <a href="https://blogs.gnome.org/tbernard/2019/12/04/there-is-no-linux-platform-1/#the-wrong-incentives">problematic downstream incentives</a>. This means there is no clear platform visual identity developers can target.</p>
<p>For example, Ubuntu 18.04 (the current LTS) ships with GNOME 3.28 (from March 2018), includes significant changes to system UX and APIs (e.g. Unity-style dock, desktop icons, systray extension), and ships a branded stylesheet that breaks even in core applications.</p>
<figure class="wp-caption alignnone" id="attachment_7942" style="width: 1024px;"><img alt="" class="wp-image-7942 size-full" height="768" src="https://blogs.gnome.org/tbernard/files/2020/03/18.04.png" width="1024"/><figcaption class="wp-caption-text" id="caption-attachment-7942">Ubuntu 18.04 overrides the GTK system stylesheet, which results in the “Create” button on the new folder dialog in Files being invisible (among many many other issues, especially in third party apps).</figcaption></figure>
<h4 id="fragmentation-issues">Fragmentation Issues</h4>
<p>Having multiple implementations of everything means we either need do tons of duplicate work, or try to abstract over the different implementations.</p>
<p>On one end of the spectrum there are OS installers: There is no GNOME installer, so every distribution builds their own. Unfortunately, most of these installers are not very good, and don’t integrate well with the rest of the desktop experience (e.g. they use different design patterns than the OS itself). This can be either due to a lack of resources (e.g. not every downstream has their own GNOME designers), or because different distributions have specific downstream goals and motivations (e.g. Fedora and RHEL share an installer, which introduces lots of complexity).</p>
<figure class="wp-caption alignnone" id="attachment_7954" style="width: 1038px;"><img alt="" class="wp-image-7954 size-full" height="694" src="https://blogs.gnome.org/tbernard/files/2020/03/anaconda.png" width="1038"/><figcaption class="wp-caption-text" id="caption-attachment-7954">The famously awkward Fedora installer is a good example of why such core parts of the experience should be designed and developed upstream. Unfortunately this isn’t really feasible due to distribution fragmentation.</figcaption></figure>
<p>In other areas we have the opposite problem, because we’re trying to abstract over the fragmentation with a single component. For example, PackageKit is meant to abstract over different package formats, but in practice it only works for a handful of them, and even for those it’s often buggy. The PackageKit maintainers have officially <a href="https://blogs.gnome.org/hughsie/2019/02/14/packagekit-is-dead-long-live-well-something-else">given up on this approach</a>.</p>
<h4 id="configuration-issues">Configuration Issues</h4>
<p>This includes the default apps, the fonts shipped with the system by default, the terminal shell and prompt, and the UX around things like Plymouth. All of these things are usually configured at the distribution level and are therefore often not great, because these choices need to be made in concert with the rest of the platform UX.</p>
<h2 id="making-platforms">Forging Platforms</h2>
<p>Given the constraint of there being multiple different desktops projects and technology stacks (and <a href="https://blogs.gnome.org/tbernard/feed/#the-host-still-matters">the host still mattering</a>), we’ll never have a single “Linux” or “FreeDesktop” platform. We <em>could</em> have one platform per desktop though.</p>
<p><img alt="" class="alignnone size-full wp-image-7936" height="656" src="https://blogs.gnome.org/tbernard/files/2020/03/distros-platforms.png" width="1366"/></p>
<p>From an app developer point of view, testing for GNOME, KDE, and elementary isn’t as nice as testing only for a single platform, but it’s not impossible. However, testing for Debian, Fedora, multiple Ubuntu releases, OpenSUSE, Arch, Endless, and dozens more is not and never will be feasible, even with Flatpak. Multiple different distributions, even ones that ship the same desktop environment, don’t add up to a platform. But exactly that is what we need, one way or another.</p>
<p>The question is, how do we get there?</p>
<h3 id="the-nuclear-option">The Nuclear Option</h3>
<p>When we look at it from a Flatpak context, the solution seems obvious. Flatpak is solving the middleman problem for app developers by circumventing the distributions and providing a direct channel between developers and end users. What if we could do the same thing for the OS itself?</p>
<p><img alt="" class="alignnone size-full wp-image-7933" height="768" src="https://blogs.gnome.org/tbernard/files/2020/03/dev-distro-users-around.png" width="1366"/></p>
<p>Of course the situation isn’t exactly the same, so what would that mean in practice?</p>
<p>With Flatpak runtimes there is no extra “distribution” abstraction layer. There are no Debian or Fedora runtimes, just GNOME and KDE, because those are the technology stacks app developers target.</p>
<p>These runtimes are already more or less full-fledged distributions which are controlled by the desktops, we’re just not using them as such. The <a href="https://gitlab.com/freedesktop-sdk/freedesktop-sdk">Freedesktop SDK</a> (which most runtimes are based on) is not based in any distro, but built directly from upstream sources using Buildstream as the build tool, and it already has most of the things you need to make a basic operating system.</p>
<p>There is an early-stage effort to make <a href="https://mail.gnome.org/archives/desktop-devel-list/2019-September/msg00034.html">bootable nightly GNOME OS images</a> for development/testing, built on top of the Freedesktop SDK. From there it wouldn’t be a huge leap to actually make an independent, consumer-facing platform OS for GNOME (and KDE, and other platforms).</p>
<p>However, though this is likely to become a very attractive solution in the future, there are a number of hurdles to be overcome:</p>
<ul>
<li>An OS needs an installer, OS updates, a Plymouth theme, etc. All of these <a href="https://gitlab.gnome.org/GNOME/gnome-build-meta">are being worked on</a> for the nightly GNOME OS images, but are not quite there yet.</li>
<li>A “real” OS needs a dedicated group of people doing things like release management, security tracking, and QA. These are being done to some degree for the Flatpak runtimes, but a consumer OS would need more manpower.</li>
<li>It’s an OSTree-based immutable system, which means there is no traditional package management. Apps are installed via Flatpak, and server/developer workflows need to happen in containers. Though projects like Silverblue’s toolbox have come a long way over the past few years, there’s still work to be done before immutable OSes can painlessly replace systems with old-school package managers for all use cases.</li>
</ul>
<p>It takes time to start a new operating system from scratch, especially when it’s using cutting-edge technology. So while things like GNOME OS could be amazing in the longer-term future, it’s likely going to take a few more years before this becomes a viable alternative.</p>
<h3 id="squaring-the-circle">Squaring the Circle</h3>
<p>What could we do within the constraints of the technology, ecosystem, and communities we have today, then? If we can’t go around distributions with a platform OS, the only alternative is to meld the distributions into a meta platform OS.</p>
<p>Technically there’s nothing stopping a group of separate distributions from acting more or less like a unified platform OS together. It would require extraordinary discipline and compromise on all sides (admittedly not things our communities are usually known for), but given how important it is that we fix this problem, it’s at least worth thinking about.</p>
<p><img alt="" class="alignnone size-full wp-image-7930" height="768" src="https://blogs.gnome.org/tbernard/files/2020/03/dev-distro-user-through.png" width="1366"/></p>
<p>To get an idea what this could look like in practice, let’s think through some of the specific issues mentioned earlier:</p>
<p><strong>Release Schedule</strong>: This is probably among the thorniest issues since release cycles vary wildly in length and structure, and changing them is very difficult. It’s not unimaginable that at least some progress could be made here though. For example, GNOME could have long term support releases every 2-3 years for “stable” distributions like RHEL and Ubuntu LTS. Distributions could then agree to either be on the regular 6 month schedule, or the 2 year “LTS” schedule. Alternatively, all distributions could find a single compromise schedule that can work for everyone (e.g. maybe one release per year, like mobile operating systems do).</p>
<p><strong>Theming/Branding</strong>: Some distributions want ways to customize the OS experience such that their system looks recognizably different from others. This is not necessarily a problem, as long as this is done using APIs that are supported and intended to be used in this way (which unfortunately <a href="http://stopthemingmy.app">is currently not happening in many cases</a>).</p>
<p>Creating more branding opportunities which do not break APIs which apps rely upon (especially third party apps shipped via Flatpak), is certainly possible and there have been discussions in this direction (e.g. GTK accent colors). Whether distributions would limit themselves to these APIs once they exist is of course an open question, but at least there is a ongoing dialog about this.</p>
<p><strong>System UX/API Changes</strong>: Some distributions make significant changes to the core system, which fragments the visual identity of the platform at best, and severely damages the app ecosystem at worst. This includes things like adding a permanent dock, icons on the desktop, re-enabling the systray, or a “dark mode” setting which just changes the system stylesheet from under apps.</p>
<p>The solution here is simple in theory: If you think a change to the system UX is needed to fix a specific problem, don’t just patch it downstream, but instead help to address the actual underlying issue (<a href="https://blogs.gnome.org/tbernard/2019/12/04/there-is-no-linux-platform-1/#the-wrong-incentives">We already touched on this in Part 1</a>). For example, if you find that new users are confused by the empty desktop at startup, don’t just ship an extension that completely breaks the structure of the shell. Bring the problem to the upstream designers and developers, figure out a solution together, and help implement it upstream.</p>
<p>In practice it’s not always that easy, but a lot can be done by simply adopting an upstream-first UX mindset. It can take a while to get used to, especially for companies with more, uh, “traditional” internal processes, but it’s definitely possible seeing as it’s working well for Red Hat and Purism, for example.</p>
<p><strong>OS Installer</strong>: It may not be doable to have a single code base, but we could definitely share at least the design (and possibly some UI code) for the installers used across distributions. A cross-distribution initiative for nice, native GNOME installers across the major distributions would probably not be easy logistically, but is not unimaginable.</p>
<p><strong>Software Installation &amp; Updates</strong>: GNOME Software and PackageKit’s “abstract across distros” strategy has clearly failed, and we need a new approach here. For applications there is a relatively easy solution: Distributions stop packaging apps, and work together on a common repository of developer-submitted Flatpaks (e.g. something like Flathub). We’d need to work out how this common solution can accommodate various distribution policies around e.g. proprietary software, but this seems very doable and most of it already exists in Flathub.</p>
<p>The resources currently going into repackaging every app for every distribution could be pooled to review the apps submitted by developers to the common Flatpak repository.</p>
<p>Seeing as most distributions are not (yet) image-based like e.g. Silverblue or Endless, we would still also need a way to update the packages that make up the core system. For this there’s probably no way around backend duplication.</p>
<p><strong>System Default Configuration</strong>: Making progress in this area is likely not too difficult comparatively. The main thing we’d need is better coordination between the various parties needed to synchronize these things better (which is of course easier said than done). Having some kind of common forum where the upstream design and release team, as well as people in charge of major distributions can discuss and standardize defaults across the entire ecosystem might work for that.</p>
<h2 id="the-bottom-line">The Bottom Line</h2>
<p>If we want a future with real platforms we can either go around the distributions or have them all work together (or potentially both), but one way or another we need to vertically integrate.</p>
<p>Neither path is straightforward or easy, and there’s a huge amount of work ahead either way. However, the first and most important step is acknowledging that this problem exists, and that we need to radically change our approach if we’re serious about building attractive app ecosystems.</p>
<p>The good news is that many people across different projects are already working towards enabling this future. We hope that you’ll join us.</p>
<p>Happy hacking :)</p></div>
    </content>
    <updated>2020-03-25T15:17:32Z</updated>
    <published>2020-03-25T15:17:32Z</published>
    <category term="Ecosystem"/>
    <category term="Apps"/>
    <category term="Conference"/>
    <category term="Distributions"/>
    <category term="LAS"/>
    <category term="Platform"/>
    <category term="Themes"/>
    <author>
      <name>Tobias Bernard</name>
    </author>
    <source>
      <id>https://blogs.gnome.org/tbernard</id>
      <link href="https://blogs.gnome.org/tbernard/feed/" rel="self" type="application/rss+xml"/>
      <link href="https://blogs.gnome.org/tbernard" rel="alternate" type="text/html"/>
      <subtitle>Tobias Bernard's GNOME Blog</subtitle>
      <title>Space and Meaning</title>
      <updated>2020-03-29T22:47:35Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>https://fortintam.com/blog/?p=4369</id>
    <link href="https://fortintam.com/blog/predicting-consequences-of-covid19-on-usa/" rel="alternate" type="text/html"/>
    <title>2020: the fecal matter is colliding with the rotary oscillator</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Many friends of mine, including a significant portion of GNOME contributors, are in the United States, and I’m personally worried they (or those around them) will face particularly deep trouble this year and beyond. It seems nobody dares talk openly about it, so what the heck, I’m sharing my concern here and getting it out … </p>
<p class="link-more"><a class="more-link" href="https://fortintam.com/blog/predicting-consequences-of-covid19-on-usa/">Continue reading<span class="screen-reader-text"> "2020: the fecal matter is colliding with the rotary oscillator"</span></a></p>
<p>The post <a href="https://fortintam.com/blog/predicting-consequences-of-covid19-on-usa/" rel="nofollow">2020: the fecal matter is colliding with the rotary oscillator</a> appeared first on <a href="https://fortintam.com/blog" rel="nofollow">The Open Sourcerer</a>.</p></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Many friends of mine, including a significant portion of <a href="https://gnome.org" rel="noreferrer noopener" target="_blank">GNOME</a> contributors, are in the United States, and I’m personally worried they (or those around them) will face particularly deep trouble this year and beyond. It seems nobody dares talk openly about it, so what the heck, I’m sharing my concern here and getting it out of my chest (then, after worrying about <em>death,</em> I can <a href="https://en.wikipedia.org/wiki/Death_and_taxes_(idiom)" rel="noreferrer noopener" target="_blank">move on</a> to worrying about <em>taxes).</em> Maybe I’ll be able to sleep a bit better.</p>


<span id="more-4369"/>


<p>As you most probably know, Europe is taking a serious beating and is struggling as we speak… but if you thought the US will fare any better, <em>just wait.</em> Shiitake is about to hit the fan, and the case of the United States of America is particularly concerning because of the many reasons I extensively documented <a href="https://youtu.be/7l-qGpjhPUU" rel="noreferrer noopener" target="_blank">here</a> a couple of days ago. Not only is the US’ preparation for this pandemic very much insufficient and it has no true safety net for its citizens, but it also has very unique societal factors that, compared to all the other countries in the world, put it at risk of suffering extremely deep social disruption and pervasive hardship.</p>



<figure class="wp-block-embed-youtube wp-block-embed is-type-video is-provider-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">

</div></figure>



<p>I wish you the best of luck in the fight against the <em>SARS-coronavirus-2,</em> just as I am wishing good luck to the rest of the world. I hope I will be incredibly wrong (so far the trends seem to be confirming my predictions, however) and that some unforeseen radical solutions will turn the tide, but I’m not holding my breath here. The US needs more than band-aid quick-fixes.</p>



<p>Let’s hope that <em>this time,</em> the sheer scale of the problem will bring about real positive change in the system. Not just a bigger economic bubble at the expense of the people and planet. It would be about time.</p>
<p>The post <a href="https://fortintam.com/blog/predicting-consequences-of-covid19-on-usa/" rel="nofollow">2020: the fecal matter is colliding with the rotary oscillator</a> appeared first on <a href="https://fortintam.com/blog" rel="nofollow">The Open Sourcerer</a>.</p></div>
    </content>
    <updated>2020-03-25T15:06:06Z</updated>
    <published>2020-03-25T15:06:06Z</published>
    <category term="Planet GNOME"/>
    <author>
      <name>Jeff</name>
    </author>
    <source>
      <id>https://fortintam.com/blog</id>
      <link href="https://fortintam.com/blog/category/planet-gnome/feed/" rel="self" type="application/rss+xml"/>
      <link href="https://fortintam.com/blog" rel="alternate" type="text/html"/>
      <subtitle>Jeff on technology, business and society</subtitle>
      <title>Planet GNOME – The Open Sourcerer</title>
      <updated>2020-03-25T17:22:53Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://tirania.org/blog/archive/2020/Mar-24.html</id>
    <link href="https://tirania.org/blog/archive/2020/Mar-24.html" rel="alternate" type="text/html"/>
    <title>24 Mar 2020</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><h1 id="yak-shaving-swift-edition">Yak Shaving - Swift Edition</h1>
<p>At the TensorFlow summit last year, I caught up with Chris Lattner who
was at the time working on Swift for TensorFlow - we ended up talking
about concurrency and <a href="https://gist.github.com/lattner/31ed37682ef1576b16bca1432ea9f782">what he had in mind for
Swift</a>.</p>
<p>I recognized some of the <a href="https://gist.github.com/lattner/31ed37682ef1576b16bca1432ea9f782">actor
ideas</a>
to be similar to those from the <a href="https://www.ponylang.io">Pony
language</a> which I had learned about just a
year before on a trip to Microsoft Research in the UK.  Of course, I
pointed out that Pony had some capabilities that languages like C# and
Swift lacked and that anyone could just poke at data that did not
belong to them without doing too much work and the whole thing would
fall apart.</p>
<p>For example, if you build something like this in C#:</p>
<pre><code>class Chart {
  float [] points;
  public float [] Points { get { return points; } }
}
</code></pre>
<p>Then anyone with a reference to Chart can go and poke at the internals
of the points array that you have surfaced.  For example, this simple
Plot implementation accidentally modifies the contents:</p>
<pre><code>void Plot (Chart myChart)
{
   // This code accidentally modifies the data in myChart
   var p = myChart.points;
   for (int i = 0; i &lt; p.Length; i++) {
       Plot (0, p [i]++)
   }
}
</code></pre>
<p>This sort of problem is avoidable, but comes at a considerable
development cost.  For instance, in .NET you can find plenty of ad-hoc
collections and interfaces whose sole purpose is to prevent data
tampering/corruption.  If those are consistently and properly used,
they can prevent the above scenario from happening.</p>
<p>This is where Chris politely pointed out to me that I had not quite
understood Swift - in fact, Swift supports a copy-on-write model for
its collections out of the box - meaning that the above problem is
just not present in Swift as I had wrongly assumed.</p>
<p>It is interesting that I had read the Swift specification some three
or four times, and I was collaborating with Steve on our Swift-to-.NET
binding tool and yet, I had completely missed the significance of this
design decision in Swift.</p>
<p>This subtle design decision was eye opening.</p>
<p>It was then that I decided to gain some real hands-on experience in
Swift.  And what better way to learn Swift than to start with a small,
fun project for a couple of evenings.</p>
<p>Rather than building a mobile app, which would have been 90% mobile
design and user interaction, and little Swift, I decided to port my
<a href="https://github.com/migueldeicaza/gui.cs">gui.cs</a> console UI toolkit
from C# to Swift and called it
<a href="https://github.com/migueldeicaza/TermKit">TermKit</a>.</p>
<center>
<img src="https://raw.githubusercontent.com/migueldeicaza/gui.cs/master/docfx/sample.png" width="700"/>
</center>
<p>Both gui.cs and TermKit borrow extensively from Apple’s UIKit design -
it is a design that I have enjoyed.  It notably avoids auto layout,
and instead uses a simpler layout system that I quite love and <a href="https://github.com/migueldeicaza/TermKit/blob/9676736d3a137655d3d72b3df31f5578cb2cf85a/TermKit/Core/View.swift#L1005">had a
lot of fun
implementing</a>
(You can read a <a href="https://migueldeicaza.github.io/gui.cs/articles/overview.html#views">description of how to use it in the C#
version</a>).</p>
<p>This journey was filled with a number of very pleasant capabilities in
Swift that helped me find some long-term bugs in my C# libraries.  I
remain firmly a fan of compiled languages, and the more checking, the
better.</p>
<p>Dear reader, I wish I had kept a log of those but that is now code
that I wrote a year ago so I could share all of those with you, but I
did not take copious notes.  Suffice to say, that I ended up with a
warm and cozy feeling - knowing that the compiler was looking out for
me.</p>
<p>There is plenty to love about Swift technically, and I will not
enumerate all of those features, other people have done that.  But I
want to point out a few interesting bits that I had missed because I
was not a practitioner of the language, and was more of an armchair
observer of the language.</p>
<p>The requirement that constructors fully initialize all the fields in a
type before calling the base constructor is a requirement that took me
a while to digest.  My mental model was that calling the superclass to
initialize itself should be done before any of my own values are set -
this is what C# does.  Yet, this prevents a bug where the base
constructor can call a virtual method that you override, and might not
be ready to handle.  So eventually I just learned to embrace and love
this capability.</p>
<p>Another thing that I truly enjoyed was the ability of creating a
<code>typealias</code>, which once defined is visible as a new type.  A
capability that I have wanted in C# since 2001 and have yet to get.</p>
<p>I have a love/hate relationship with Swift protocols and extensions.
I love them because they are incredibly powerful, and I hate them,
because it has been so hard to surface those to .NET, but in practice
they are a pleasure to use.</p>
<p>What won my heart is just how simple it is to import C code into Swift</p>
<ul>
<li>to bring the type definitions from a header file, and call into the
C code transparently from Swift.  This really is a gift of the gods to
humankind.</li>
</ul>
<p>I truly enjoyed having the <code>Character</code> data type in Swift which
allowed my console UI toolkit to correctly support Unicode on the
console for modern terminals.</p>
<p>Even gui.cs with <a href="https://github.com/migueldeicaza/NStack">my port of Go’s Unicode
libraries</a> to C# suffers from
being limited to Go-style Runes and not having support for emoji (or
as the nerd-o-sphere calls it “extended grapheme clusters”).</p>
<p>Beyond the pedestrian controls like buttons, entry lines and
checkboxes, there are two useful controls that I wanted to develop.
An xterm terminal emulator, and a multi-line text editor.</p>
<p>In the C# version of my console toolkit my <a href="https://github.com/migueldeicaza/gui.cs/blob/master/Terminal.Gui/Views/TextView.cs">multi-line text
editor</a>
was a quick hack.  A <code>List&lt;T&gt;</code> holds all the lines in the buffer, and
each line contains the runes to display.  Inserting characters is
easy, and inserting lines is easy and you can get this done in a
couple of hours on the evening (which is the sort of time I can devote
to these fun explorations).  Of course, the problem is cutting regions
of text across lines, and inserting text that spans multiple lines.
Because what looked like a brilliant coup of simple design, turns out
to be an ugly, repetitive and error-prone code that takes forever to
debug - I did not enjoy writing that code in the end.</p>
<p>For my Swift port, I decided that I needed something better.  Of
course, in the era of web scale, you gotta have a web scale data
structure.  I was about to implement a Swift version of the Rope data
structure, when someone pointed to me a blog post from the Visual
Studio Code team titled “<a href="https://code.visualstudio.com/blogs/2018/03/23/text-buffer-reimplementation">Text Buffer Reimplementation</a>”.
I read it avidly, founds their arguments convincing, and in the end,
if it is good enough for Visual Studio Code, it should be good enough
for the gander.</p>
<p>During my vacation last summer, I decided to port the TypeScript
implementation of the Text Buffer to Swift, and named it
<a href="https://github.com/migueldeicaza/TextBufferKit">TextBufferKit</a>.  Once
again, porting this code from TypeScript to Swift turned out to be a
great learning experience for me.</p>
<p>By the time I was done with this and was ready to hook it up to
TermKit, I got busy, and also started to learn SwiftUI, and started to
doubt whether it made sense to continue work on a UIKit-based model,
or if I should restart and do a SwiftUI version.  So while I pondered
this decision, I did what every other respected yak shaver would
do, I proceeded to my xterm terminal emulator work.</p>
<p>Since about 2009 or so, I wanted to have a <a href="https://tirania.org/blog/archive/2009/Apr-20-2.html">reusable terminal
emulator</a> control
for .NET.  In particular, I wanted one to embed into MonoDevelop, so a
year or two ago, I looked for a terminal emulator that I could port to
.NET - I needed something that was licensed under the MIT license, so
it could be used in a wide range of situations, and was modern enough.
After surveying the space, I found “xterm.js” fit the bill, so I
ported it to .NET and modified it to suit my requirements.
<a href="https://github.com/migueldeicaza/XtermSharp">XtermSharp</a> - a terminal
emulator engine that can have multiple UIs and hook up multiple
backends.</p>
<p>For Swift, I took the XtermSharp code, and ported it over to Swift,
and ended up with
<a href="https://github.com/migueldeicaza/SwiftTerm">SwiftTerm</a>.  It is now in
quite a decent shape, with only a few bugs left.</p>
<center>
<a href="https://tirania.org/images/xcode-swiftterm.png">
<img src="https://tirania.org/images/xcode-swiftterm-small.png" width="800"/>
</a>
</center>
<p>I have yet to built a TermKit UI for SwiftTerm, but in my quest for
the perfect shaved yak, now I need to figure out if I should implement
SwiftUI on top of TermKit, or if I should repurpose TermKit completely
from the ground up to be SwiftUI driven.</p>
<p>Stay tuned!</p></div>
    </summary>
    <updated>2020-03-25T08:52:00Z</updated>
    <published>2020-03-25T08:52:00Z</published>
    <author>
      <name>Miguel de Icaza</name>
      <email>miguel.de.icaza@gmail.com</email>
    </author>
    <source>
      <id>https://tirania.org/blog//index.html</id>
      <author>
        <name/>
        <email>miguel.de.icaza@gmail.com</email>
      </author>
      <link href="https://tirania.org/blog//index.html" rel="alternate" type="text/html"/>
      <link href="http://www.tirania.org/blog/miguel.rss2" rel="self" type="application/rss+xml"/>
      <rights>Miguel de Icaza</rights>
      <subtitle>Miguel de Icaza's Blog</subtitle>
      <title>Miguel de Icaza</title>
      <updated>2020-03-25T04:52:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:people.gnome.org,2020-03-24:/~federico/blog/reducing-memory-consumption-in-librsvg-3.html</id>
    <link href="https://people.gnome.org/~federico/blog/reducing-memory-consumption-in-librsvg-3.html" rel="alternate" type="text/html"/>
    <title>Reducing memory consumption in librsvg, part 3: slack space in Bézier paths</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>We got a <a href="https://gitlab.gnome.org/GNOME/librsvg/-/issues/574">bug with a gigantic SVG</a> of a map extracted from
OpenStreetMap, and it has about 600,000 elements.  Most of them are
<code>&lt;path&gt;</code>, that is, specifications for Bézier paths.</p>
<p>A <code>&lt;path&gt;</code> can look like this:</p>
<div class="highlight"><pre><span/><code><span class="nt">&lt;path</span> <span class="na">d=</span><span class="s">"m 2239.05,1890.28 5.3,-1.81"</span><span class="nt">/&gt;</span>
</code></pre></div>


<p>The …</p></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>We got a <a href="https://gitlab.gnome.org/GNOME/librsvg/-/issues/574">bug with a gigantic SVG</a> of a map extracted from
OpenStreetMap, and it has about 600,000 elements.  Most of them are
<code>&lt;path&gt;</code>, that is, specifications for Bézier paths.</p>
<p>A <code>&lt;path&gt;</code> can look like this:</p>
<div class="highlight"><pre><span/><code><span class="nt">&lt;path</span> <span class="na">d=</span><span class="s">"m 2239.05,1890.28 5.3,-1.81"</span><span class="nt">/&gt;</span>
</code></pre></div>


<p>The <code>d</code> attribute contains a <a href="https://www.w3.org/TR/SVG2/paths.html#TheDProperty">list of commands</a> to
create a Bézier path, very similar to PostScript's operators.  Librsvg
has the following to represent those commands:</p>
<div class="highlight"><pre><span/><code><span class="k">pub</span><span class="w"> </span><span class="k">enum</span> <span class="nc">PathCommand</span><span class="w"> </span><span class="p">{</span><span class="w"/>
<span class="w">    </span><span class="n">MoveTo</span><span class="p">(</span><span class="kt">f64</span><span class="p">,</span><span class="w"> </span><span class="kt">f64</span><span class="p">),</span><span class="w"/>
<span class="w">    </span><span class="n">LineTo</span><span class="p">(</span><span class="kt">f64</span><span class="p">,</span><span class="w"> </span><span class="kt">f64</span><span class="p">),</span><span class="w"/>
<span class="w">    </span><span class="n">CurveTo</span><span class="p">(</span><span class="n">CubicBezierCurve</span><span class="p">),</span><span class="w"/>
<span class="w">    </span><span class="n">Arc</span><span class="p">(</span><span class="n">EllipticalArc</span><span class="p">),</span><span class="w"/>
<span class="w">    </span><span class="n">ClosePath</span><span class="p">,</span><span class="w"/>
<span class="p">}</span><span class="w"/>
</code></pre></div>


<p>Those commands get stored in an array, a <code>Vec</code> inside a <code>PathBuilder</code>:</p>
<div class="highlight"><pre><span/><code><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">PathBuilder</span><span class="w"> </span><span class="p">{</span><span class="w"/>
<span class="w">    </span><span class="n">path_commands</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="n">PathCommand</span><span class="o">&gt;</span><span class="p">,</span><span class="w"/>
<span class="p">}</span><span class="w"/>
</code></pre></div>


<p>Librsvg translates each of the commands inside a <code>&lt;path d="..."/&gt;</code>
into a <code>PathCommand</code> and pushes it into the <code>Vec</code> in the
<code>PathBuilder</code>.  When it is done parsing the attribute, the
<code>PathBuilder</code> remains as the final version of the path.</p>
<p>To let a <code>Vec</code> grow efficiently as items are pushed into
it, Rust makes the <code>Vec</code> grow by powers of 2.  When we add an item, if
the <em>capacity</em> of the <code>Vec</code> is full, its buffer gets <code>realloc()</code>ed to
twice its capacity.  That way there are only O(log₂n) calls to
<code>realloc()</code>, where <code>n</code> is the total number of items in the array.</p>
<p>However, this means that once we are done adding items to the <code>Vec</code>,
there may still be some free space in it:  <em>the capacity exceeds the
length of the array</em>.  The invariant is that
<code>vec.capacity() &gt;= vec.len()</code>.</p>
<p>First I wanted to shrink the <code>PathBuilder</code>s so that they have no extra
capacity in the end.</p>
<h2>First step: convert to Box&lt;[T]&gt;</h2>
<p>A "boxed slice" is a contiguous array in the heap, that cannot grow or
shrink.  That is, it has no extra capacity, only a length.</p>
<p><code>Vec</code> has a method <a href="https://doc.rust-lang.org/std/vec/struct.Vec.html#method.into_boxed_slice"><code>into_boxed_slice</code></a> which does
eactly that:  it consumes the vector and converts it into a boxed
slice without extra capacity.  In its innards, it does a <code>realloc()</code>
on the <code>Vec</code>'s buffer to match its length.</p>
<p>Let's see the numbers that Massif reports:</p>
<div class="highlight"><pre><span/><code><span class="c1">--------------------------------------------------------------------------------</span>
  <span class="n">n</span>        <span class="n">time</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>         <span class="n">total</span><span class="p">(</span><span class="n">B</span><span class="p">)</span>   <span class="n">useful</span><span class="o">-</span><span class="n">heap</span><span class="p">(</span><span class="n">B</span><span class="p">)</span> <span class="n">extra</span><span class="o">-</span><span class="n">heap</span><span class="p">(</span><span class="n">B</span><span class="p">)</span>    <span class="n">stacks</span><span class="p">(</span><span class="n">B</span><span class="p">)</span>
<span class="c1">--------------------------------------------------------------------------------</span>
 <span class="mi">23</span> <span class="mi">22</span><span class="p">,</span><span class="mi">751</span><span class="p">,</span><span class="mi">613</span><span class="p">,</span><span class="mi">855</span>    <span class="mi">1</span><span class="p">,</span><span class="mi">560</span><span class="p">,</span><span class="mi">916</span><span class="p">,</span><span class="mi">408</span>    <span class="mi">1</span><span class="p">,</span><span class="mi">493</span><span class="p">,</span><span class="mi">746</span><span class="p">,</span><span class="mi">540</span>    <span class="mi">67</span><span class="p">,</span><span class="mi">169</span><span class="p">,</span><span class="mi">868</span>            <span class="mi">0</span>
                                       <span class="o">^^^^^^^^^^^^^</span>
                                           <span class="k">before</span>

 <span class="mi">30</span> <span class="mi">22</span><span class="p">,</span><span class="mi">796</span><span class="p">,</span><span class="mi">106</span><span class="p">,</span><span class="mi">012</span>    <span class="mi">1</span><span class="p">,</span><span class="mi">553</span><span class="p">,</span><span class="mi">581</span><span class="p">,</span><span class="mi">072</span>    <span class="mi">1</span><span class="p">,</span><span class="mi">329</span><span class="p">,</span><span class="mi">943</span><span class="p">,</span><span class="mi">324</span>   <span class="mi">223</span><span class="p">,</span><span class="mi">637</span><span class="p">,</span><span class="mi">748</span>            <span class="mi">0</span>
                                       <span class="o">^^^^^^^^^^^^^</span>
                                           <span class="k">after</span>
</code></pre></div>


<p>That is, we went from using 1,493,746,540 bytes on the heap to using
1,329,943,324 bytes.  Simply removing extra capacity from the path
commands saves about 159 MB for this particular file.</p>
<h2>Second step: make the allocator do less work</h2>
<p>However, the <code>extra-heap</code> column in that table has a number I don't
like:  there are 223,637,748 bytes in <code>malloc()</code> metadata and unused
space in the heap.</p>
<p>I suppose that so many calls to <code>realloc()</code> make the heap a bit
fragmented.</p>
<p>It would be good to be able to read most of the <code>&lt;path d="..."/&gt;</code> to
temporary buffers that don't need so many calls to <code>realloc()</code>, and
that in the end get copied to exact-sized buffers, without extra
capacity.</p>
<p>We can do just that with the <a href="https://docs.rs/smallvec/1.2.0/smallvec/">smallvec</a> crate.  A <code>SmallVec</code> has the
same API as <code>Vec</code>, but it can store small arrays directly in the
stack, without an extra heap allocation.  Once the capacity is full,
the stack buffer "spills" into a heap buffer automatically.</p>
<p>Most of the <code>d</code> attributes in the huge file in the <a href="https://gitlab.gnome.org/GNOME/librsvg/-/issues/574">bug</a> have
fewer than 32 commands.  That is, if we use the following:</p>
<div class="highlight"><pre><span/><code><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">PathBuilder</span><span class="w"> </span><span class="p">{</span><span class="w"/>
<span class="w">    </span><span class="n">path_commands</span>: <span class="nc">SmallVec</span><span class="o">&lt;</span><span class="p">[</span><span class="n">PathCommand</span><span class="p">;</span><span class="w"> </span><span class="mi">32</span><span class="p">]</span><span class="o">&gt;</span><span class="p">,</span><span class="w"/>
<span class="p">}</span><span class="w"/>
</code></pre></div>


<p>We are saying that there can be up to 32 items in the <code>SmallVec</code>
without causing a heap allocation; once that is exceeded, it will work
like a normal <code>Vec</code>.</p>
<p>At the end we still do <code>into_boxed_slice</code> to turn it into an
independent heap allocation with an exact size.</p>
<p>This reduces the <code>extra-heap</code> quite a bit:</p>
<div class="highlight"><pre><span/><code><span class="err">--------------------------------------------------------------------------------</span>
<span class="err">  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)</span>
<span class="err">--------------------------------------------------------------------------------</span>
<span class="err"> 33 24,139,598,653    1,416,831,176    1,329,943,212    86,887,964            0</span>
<span class="err">                                                        ^^^^^^^^^^</span>
</code></pre></div>


<p>Also, the total bytes shrink from 1,553,581,072 to
1,416,831,176 — we have a smaller heap because there is not so much
work for the allocator, and there are a lot fewer temporary blocks
when parsing the <code>d</code> attributes.</p>
<h2>Making the code prettier</h2>
<p>I put in the following:</p>
<div class="highlight"><pre><span/><code><span class="sd">/// This one is mutable</span>
<span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">PathBuilder</span><span class="w"> </span><span class="p">{</span><span class="w"/>
<span class="w">    </span><span class="n">path_commands</span>: <span class="nc">SmallVec</span><span class="o">&lt;</span><span class="p">[</span><span class="n">PathCommand</span><span class="p">;</span><span class="w"> </span><span class="mi">32</span><span class="p">]</span><span class="o">&gt;</span><span class="p">,</span><span class="w"/>
<span class="p">}</span><span class="w"/>

<span class="sd">/// This one is immutable</span>
<span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">Path</span><span class="w"> </span><span class="p">{</span><span class="w"/>
<span class="w">    </span><span class="n">path_commands</span>: <span class="nb">Box</span><span class="o">&lt;</span><span class="p">[</span><span class="n">PathCommand</span><span class="p">]</span><span class="o">&gt;</span><span class="p">,</span><span class="w"/>
<span class="p">}</span><span class="w"/>

<span class="k">impl</span><span class="w"> </span><span class="n">PathBuilder</span><span class="w"> </span><span class="p">{</span><span class="w"/>
<span class="w">    </span><span class="sd">/// Consumes the PathBuilder and converts it into an immutable Path</span>
<span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">into_path</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Path</span><span class="w"> </span><span class="p">{</span><span class="w"/>
<span class="w">        </span><span class="n">Path</span><span class="w"> </span><span class="p">{</span><span class="w"/>
<span class="w">            </span><span class="n">path_commands</span>: <span class="nc">self</span><span class="p">.</span><span class="n">path_commands</span><span class="p">.</span><span class="n">into_boxed_slice</span><span class="p">(),</span><span class="w"/>
<span class="w">        </span><span class="p">}</span><span class="w"/>
<span class="w">    </span><span class="p">}</span><span class="w"/>
<span class="p">}</span><span class="w"/>
</code></pre></div>


<p>With that, <code>PathBuilder</code> is just a temporary struct that turns into an
immutable <code>Path</code> once we are done feeding it.  <code>Path</code> contains a boxed
slice of the exact size, without any extra capacity.</p>
<h2>Next steps</h2>
<p>All the coordinates in librsvg are stored as <code>f64</code>, double-precision
floating point numbers.  The SVG/CSS spec says that single-precision
floats are enough, and that 64-bit floats should be used only for
geometric transformations.</p>
<p>I'm a bit scared to make that change; I'll have to look closely at the
results of the test suite to see if rendered files change very much.
I suppose even big maps require only as much precision as <code>f32</code> —
after all, that is what OpenStreetMap uses.</p>
<h2>References</h2>
<ul>
<li><a href="https://gitlab.gnome.org/GNOME/librsvg/-/commit/fc44abd1a8a85b7d8c474260e315cf4c73e4ac01">Convert the Vec into a
  Box&lt;[T]&gt;</a></li>
<li><a href="https://gitlab.gnome.org/GNOME/librsvg/-/commit/ee63041d012406a9b05204ef604eb5411a8cf7ae">Convert to SmallVec</a></li>
</ul></div>
    </content>
    <updated>2020-03-24T23:14:55Z</updated>
    <published>2020-03-24T23:14:55Z</published>
    <category term="misc"/>
    <category term="librsvg"/>
    <category term="rust"/>
    <category term="gnome"/>
    <category term="performance"/>
    <author>
      <name>Federico Mena Quintero</name>
    </author>
    <source>
      <id>https://people.gnome.org/~federico/blog/</id>
      <link href="https://people.gnome.org/~federico/blog/" rel="alternate" type="text/html"/>
      <link href="https://people.gnome.org/~federico/blog/feeds/atom.xml" rel="self" type="application/atom+xml"/>
      <title>Federico's Blog</title>
      <updated>2020-03-27T00:58:36Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-GB">
    <id>http://www.gnome.org/~michael/blog/2020/03/24/2020-03-24</id>
    <link href="http://www.gnome.org/~michael/blog/2020-03-24.html" rel="alternate" type="text/html"/>
    <title xml:lang="en-GB">2020-03-24 Tuesday.</title>
    <content type="xhtml" xml:lang="en-GB"><div xmlns="http://www.w3.org/1999/xhtml"><ul> <!-- -->
	<li>
		Mail, call with Mike, some hacking; tech team call. Dug
	into unit tests, pwrt. parallelizing them. Movie in the evening.
	</li>
</ul></div>
    </content>
    <updated>2020-03-24T21:00:00Z</updated>
    <published>2020-03-24T21:00:00Z</published>
    <source>
      <id>http://www.gnome.org/~michael/blog/index.atom</id>
      <author>
        <name>Michael Meeks</name>
        <email>michael.meeks@collabora.com</email>
        <uri>http://www.gnome.org/~michael/blog/index.atom</uri>
      </author>
      <link href="http://www.gnome.org/~michael/blog" rel="alternate" type="text/html"/>
      <link href="http://www.gnome.org/~michael/blog/index.atom" rel="self" type="application/atom+xml"/>
      <rights xml:lang="en-GB">Copyright 1999-2015 Michael Meeks</rights>
      <subtitle xml:lang="en-GB">things, of varying degrees of uselessness, that I did</subtitle>
      <title xml:lang="en-GB">Stuff Michael Meeks is doing</title>
      <updated>2020-03-25T15:20:11Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>https://blogs.gnome.org/hughsie/?p=8998</id>
    <link href="https://blogs.gnome.org/hughsie/2020/03/23/initial-release-of-jcat/" rel="alternate" type="text/html"/>
    <title>Initial release of Jcat</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Today I released the first official tarball of Jcat, version 0.1.0. I’ve started the process to get the package into Fedora as it will almost certainly be a hard requirement in the next major version of fwupd. Since I announced Jcat a few weeks ago, I’ve had a lot of positive feedback about the general … <a class="more-link" href="https://blogs.gnome.org/hughsie/2020/03/23/initial-release-of-jcat/">Continue reading <span class="screen-reader-text">Initial release of Jcat</span></a></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Today I released the first official tarball of <a href="https://github.com/hughsie/libjcat/blob/master/README.md">Jcat</a>, version 0.1.0. I’ve started the process to <a href="https://bugzilla.redhat.com/show_bug.cgi?id=1816135">get the package into Fedora</a> as it will almost certainly be a hard requirement in the next major version of fwupd.</p>
<p>Since I <a href="https://blogs.gnome.org/hughsie/2020/02/28/introducing-jcat/">announced Jcat a few weeks ago</a>, I’ve had a lot of positive feedback about the general concept and, surprisingly, even one hardware vendors suggested they might start self-signing their firmware before uploading to the LVFS (which is great!). More LVFS announcements coming soon I promise…</p>
<p>The LVFS has been including Jcat files in archives and generating them for metadata <a href="https://lists.linuxfoundation.org/pipermail/lvfs-announce/2020-March/000043.html">for about three weeks now</a>, and we’ve had no issues reported. Once the package is available in Fedora 32 I’ll merge the fwupd pull request to make it a hard dep. All you other distro package maintainers, please go do your packaging thing!</p>
<p>If anyone finds any oddities or weird behavior, <a href="https://github.com/hughsie/libjcat/issues">please file an issue</a>. I’m not expecting to make API breaks now, but will if we find a design bug. Most of the code is imported from fwupd, and so I’m pretty comfortable with the general design. Comments welcome.</p></div>
    </content>
    <updated>2020-03-23T12:32:31Z</updated>
    <published>2020-03-23T12:32:31Z</published>
    <category term="Uncategorized"/>
    <author>
      <name>hughsie</name>
    </author>
    <source>
      <id>https://blogs.gnome.org/hughsie</id>
      <link href="https://blogs.gnome.org/hughsie/feed/" rel="self" type="application/rss+xml"/>
      <link href="https://blogs.gnome.org/hughsie" rel="alternate" type="text/html"/>
      <subtitle>Blog about geeky stuff</subtitle>
      <title>Technical Blog of Richard Hughes</title>
      <updated>2020-03-23T12:32:31Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>http://blogs.gnome.org/chergert/?p=9021</id>
    <link href="https://blogs.gnome.org/chergert/2020/03/20/gobject-class-private-data/" rel="alternate" type="text/html"/>
    <title>GObject Class Private Data</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">It can be very handy to store things you might do as meta programming in your GObjectClass‘s private data (See G_TYPE_CLASS_GET_PRIVATE()). Doing so is perfectly fine, but you need to be aware of how GTypeInstance initialization works. Each of your parent classes instance init functions are called before your subclasses instance init (and in order … <a class="more-link" href="https://blogs.gnome.org/chergert/2020/03/20/gobject-class-private-data/">Continue reading <span class="screen-reader-text">GObject Class Private Data</span></a></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>It can be very handy to store things you might do as meta programming in your <code>GObjectClass</code>‘s private data (See <code>G_TYPE_CLASS_GET_PRIVATE()</code>).</p>
<p>Doing so is perfectly fine, but you need to be aware of how <code>GTypeInstance</code> initialization works. Each of your parent classes instance init functions are called before your subclasses instance init (and in order of the type hierarchy). What might seem non-obvious though is that the <code>GTypeInstance.g_class</code> pointer is updated as each successive <code>_init()</code> function is called.</p>
<p>That means if you have <code>my_widget_init()</code> and your parent class is <code>GtkWidget</code>, the <code>gtk_widget_init()</code> does not know it’s instantiating a subclass. Further more, <code>GTK_WIDGET_GET_CLASS()</code> called from <code>gtk_widget_init()</code> will get you the base classes <code>GtkWidgetClass</code>, not the subclasses <code>GtkWidgetClass</code>.</p>
<p>There are ways around this if you don’t use <code>G_DEFINE_TYPE()</code>, but honestly, who wants to do that.</p>
<p>One technique around this, which I <a href="https://gitlab.gnome.org/chergert/bonsai/-/blob/8cb418766b448be6dd8f51a5e3e83b3ff789b61e/src/libbonsai-dao/bonsai-dao-object.h#L38">used in Bonsai’s DAO</a>, is to use a single-linked list where the head is in each subclass, but the tail exists in each of the parent classes. That way you share all the parent structures, but the subclasses can access all of theirs. You’ll still want to defer most setup work until <code>constructed()</code> though so you can get the full class information of the subclass and hierarchy.</p></div>
    </content>
    <updated>2020-03-20T17:09:58Z</updated>
    <published>2020-03-20T17:09:58Z</published>
    <category term="Uncategorized"/>
    <author>
      <name>chergert</name>
    </author>
    <source>
      <id>https://blogs.gnome.org/chergert</id>
      <link href="https://blogs.gnome.org/chergert/feed/" rel="self" type="application/rss+xml"/>
      <link href="https://blogs.gnome.org/chergert" rel="alternate" type="text/html"/>
      <subtitle>Just another GNOME Blogs site</subtitle>
      <title>Zen and the Art of GNOME</title>
      <updated>2020-03-20T22:54:23Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-6112936277054198647.post-1512466726354096927</id>
    <link href="https://who-t.blogspot.com/feeds/1512466726354096927/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/>
    <link href="https://www.blogger.com/comment.g?blogID=6112936277054198647&amp;postID=1512466726354096927" rel="replies" title="0 Comments" type="text/html"/>
    <link href="https://www.blogger.com/feeds/6112936277054198647/posts/default/1512466726354096927" rel="edit" type="application/atom+xml"/>
    <link href="https://www.blogger.com/feeds/6112936277054198647/posts/default/1512466726354096927" rel="self" type="application/atom+xml"/>
    <link href="https://who-t.blogspot.com/2020/03/its-templates-all-way-down.html" rel="alternate" title="It's templates all the way down" type="text/html"/>
    <title>It's templates all the way down</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Benjamin Tissoires and I have been busy anthophila and working on the <a href="https://gitlab.freedesktop.org/freedesktop/ci-templates">freedesktop CI templates</a>. This post is primarily of interest if you're working on GitLab, specifically if your repo is hosted on gitlab.freedesktop.org. If either of those applies, prepare to be distracted from the current pandemic, otherwise maybe just prepare to be entertained. I'll do my best to be less miserable than the news. </p> <p>We all know that CI/CD really helps with finding bugs early. If you don't know that yet, insert a jedi handwave before the previous sentence and now you do. GitLab is the git forge now used by freedesktop.org and it comes with <a href="https://docs.gitlab.com/ee/ci/yaml/">a built-in CI system</a>. I'm leaving out the difficult bits such as actually setting the thing up because this is obviously all handled by HeinzelmÃ¤nnchen and just readily available, hooray. I'm also going to assume that you roughly know how to write GitLab CI jobs or, failing that, at least know how to read YAML without screaming. So for this post, we start with the basic problem that your <i>.gitlab-ci.yml</i> is getting unwieldy, repetitive or generally just kinda sucks to maintain. Which is roughly where libinput and libevdev were a while back which caused Benjamin to start the ci-templates. </p> <p>Now, what do we want? (other than a COVID-19 cure) Reproducible tests, possibly on different distributions, with the same base system across tests. For my repos the goal was basically "test on the common distributions to catch certain bugs early". [1] For Mesa, the requirement is closer to "have a fixed set of images that 'never' change so tests are reproducible". Both goals have much in common. </p> <p>Your first venture into CI will look like this: </p><pre style="background-color: #dddddd;"><br/>myjob:<br/>  image: fedora:31<br/>  before_script:<br/>    - dnf update -y<br/>    - dnf install -y onepackage twopackage threepackage floor<br/>  script:<br/>    - meson builddir &amp;&amp; ninja -C builddir test<br/></pre>So, in short: take a Fedora 31 docker image, update it [2], install the required packages and then run the actual test part - meson and ninja. Easy. <p/><p>This works fine but it takes approximately forever because dnf update is slow and you're potentially pulling down gigs of packages on every test run. Which is fun, but less so when you have 10 different jobs and they all do that. So let's call this step 1 and pretend we're more advanced than that. Step 2 is where you start building an image you re-use, steps 3 to N are the bits where you learn more than you want to know about docker, podman, skopeo and how many typos you can put into a YAML file. So, ad break, and we jump right to the part where enlightenment is just around the corner or wherever enlightenment lurks these days. </p> <h2>Using the CI Templates</h2><p>Here's the <i>.gitlab-ci.yml</i> to build a Fedora 31 images with ci-templates and run the test on that image:  </p><pre style="background-color: #dddddd;"><br/>include:<br/>  - project: 'freedesktop/ci-templates'<br/>    ref: 123456deadbeef<br/>    file: '/templates/fedora.yml'<br/><br/>variables:<br/>   # project name of the upstream repo<br/>   FDO_UPSTREAM_REPO: someproject/name<br/><br/>stages:<br/>  - prep<br/>  - test<br/><br/>myimage:<br/>  extends: .fdo.container-build@fedora<br/>  stage: prep<br/>  variables:<br/>    FDO_DISTRIBUTION_VERSION: '31'<br/>    FDO_DISTRIBUTION_PACKAGES: 'onepackage twopackage threepackage floor'<br/>    FDO_DISTRIBUTION_TAG: '2020-03-20.0'<br/><br/>myjob:<br/>  extends: .fdo.distribution-image@fedora<br/>  stage: test<br/>  script:<br/>    - meson builddir &amp;&amp; ninja -C builddir test<br/>  variables:<br/>    FDO_DISTRIBUTION_VERSION: '31'<br/>    FDO_DISTRIBUTION_TAG: '2020-03-20.0'<br/></pre> Now, you guessed correctly that the <b>.fdo</b> and <b>FDO_</b> prefixes are used by the templates. There is a bunch of stuff hidden here. Basically, this will: <ul><li>check if the image exists in your personal project's registry and use that, but if not</li><li>check if the image exists in the given upstream project's registry and use that, but if not</li><li>create a Fedora 31 image with the given packages installed and pushes it with the tag to the registry</li><li>use that image (whether newly created or pre-existing) and run the tests on it</li></ul>There are a few more details too, but that's roughly the summary of it. For existing tags, the the <i>myimage</i> job effectively becomes a noop and the <i>myjob</i> job will re-use the image. The image will be in your registry so you can <i>podman run</i> it locally to reproduce a bug. <p/><p>To build a new image, simply change the tag. Either because you want newer packages or you need extra (or less packages). And the nice thing here: you will build a new image as part of your merge request and run the CI against that new image. But upstream and every other MR will keep using the old image - right up until your MR is merged at which point every (future) MR will use that new updated image. </p> <p>Want to build a Debian Stretch image? Replace Fedora and 31 with debian and stretch. Same for Ubuntu, Centos, Alpine and Arch though for those two you don't need a version number. </p> <h2>Templating the templates</h2> <p>"But, but, Peter, I want to test on eleventy different distribution like you do" I hear you say. Well, fear not, for this is where the <i>ci-fairy</i> comes in. How about we *gasp* <i>generate</i> the <i>.gitlab-ci.yml</i> file from a base configuration? That can't possibly be a bad idea, so let's do that! First, we save our configuration into the <b>.gitlab-ci/config.yml</b>: </p><pre style="background-color: #dddddd;"><br/>distributions:<br/>  - name: fedora<br/>    tag: 12345<br/>    version: 30<br/>  - name: ubuntu<br/>    tag: abcde<br/>    version: '19.10'<br/>  # and so on, and so forth<br/><br/>packages:<br/>  - curl<br/>  - wget<br/>  - gcc<br/></pre>There is no specific requirement on the structure of the config file, <i>ci-fairy</i> simply loads it and passes it to <a href="https://jinja.palletsprojects.com/">Jinja2</a>. Your template could thus look like this <b>.gitlab-ci/ci.template</b> file: <pre style="background-color: #dddddd;"><br/>include:<br/>{% for d in distributions %}<br/>   - project: 'freedesktop/ci-templates'<br/>     ref: 123456deadbeef<br/>     file: '/templates/{{d.name}}.yml'<br/>{% endfor %}<br/><br/>stages:<br/>  - prep<br/>  - test<br/><br/>{% for d in distributions %}<br/><br/>.{{d.name}}.{{d.version}}:<br/>  variables:<br/>    FDO_DISTRIBUTION_VERSION: '{{d.version}}'<br/>    FDO_DISTRIBUTION_TAG: '{{d.tag}}'<br/><br/>myimage.{{d.name}}.{{d.version}}:<br/>  extends:<br/>    - .fdo.container-build@{{d.name}}<br/>    - .{{d.name}}.{{d.version}}<br/>  stage: prep<br/>  variables:<br/>    FDO_DISTRIBUTION_PACKAGES: "{{' '.join(packages)}}"<br/><br/>myjob.{{d.name}}.{{d.version}}:<br/>  extends:<br/>    - .fdo.distribution-image@{{d.name}}<br/>    - .{{d.name}}.{{d.version}}<br/>  stage: test<br/>  script:<br/>    - meson builddir &amp;&amp; ninja -C builddir<br/>{% endfor %}<br/></pre>And to locally generate our <i>.gitlab-ci.yml</i>, all we need to do is <pre style="background-color: #dddddd;"><br/>$ pip3 install git+http://gitlab.freedesktop.org/freedesktop/ci-templates<br/>$ cd path/to/project<br/>$ ci-fairy generate-template<br/>$ ci-fairy lint  # checks the resulting YAML for syntax errors<br/>$ git commit .gitlab-ci.yml<br/></pre>And, for reference, the file we generated here looks like this: <pre style="background-color: #dddddd;"><br/>include:<br/>   - project: 'freedesktop/ci-templates'<br/>     ref: 123456deadbeef<br/>     file: '/templates/fedora.yml'<br/>   - project: 'freedesktop/ci-templates'<br/>     ref: 123456deadbeef<br/>     file: '/templates/ubuntu.yml'<br/><br/>stages:<br/>  - prep<br/>  - test<br/><br/>.fedora.30:<br/>  variables:<br/>    FDO_DISTRIBUTION_VERSION: '30'<br/>    FDO_DISTRIBUTION_TAG: '12345'<br/><br/>myimage.fedora.30:<br/>  extends:<br/>    - .fdo.container-build@fedora<br/>    - .fedora.30<br/>  stage: prep<br/>  variables:<br/>    FDO_DISTRIBUTION_PACKAGES: "curl wget gcc"<br/><br/>myjob.fedora.30:<br/>  extends:<br/>    - .fdo.distribution-image@fedora<br/>    - .fedora.30<br/>  stage: test<br/>  script:<br/>    - meson builddir &amp;&amp; ninja -C builddir<br/><br/>.ubuntu.19.10:<br/>  variables:<br/>    FDO_DISTRIBUTION_VERSION: '19.10'<br/>    FDO_DISTRIBUTION_TAG: 'abcde'<br/><br/>myimage.ubuntu.19.10:<br/>  extends:<br/>    - .fdo.container-build@ubuntu<br/>    - .ubuntu.19.10<br/>  stage: prep<br/>  variables:<br/>    FDO_DISTRIBUTION_PACKAGES: "curl wget gcc"<br/><br/>myjob.ubuntu.19.10:<br/>  extends:<br/>    - .fdo.distribution-image@ubuntu<br/>    - .ubuntu.19.10<br/>  stage: test<br/>  script:<br/>    - meson builddir &amp;&amp; ninja -C builddir<br/></pre>Aside from the templating a new thing here is the e.g. <i>.fedora.30</i> template what we extend from. This is an easy way to avoid having to set things like the distribution version and the tag multiple times. And a few things of note: the tag is job-specific (not distribution-specific). So you could have two Fedora 30 images with two different tags. This is also just an example I typed out, a <a href="https://gitlab.freedesktop.org/libinput/libinput/tree/master/.gitlab-ci.yml">real-world .gitlab-ci.yml</a> will look more complex and different. So only rely on the above to get an idea of what's possible. <p/> <p>A word for non-gitlab.freedesktop.org users: You can <a href="https://freedesktop.pages.freedesktop.org/ci-templates/templates.html#including-the-ci-templates">use the <i>remote:</i> include directive</a> to use the templates from elsewhere. <i>ci-fairy</i> isn't tied to freedesktop.org either but you'll have to provide more flags to get what you want instead of relying on the default behaviours.</p> <p>The <a href="https://freedesktop.pages.freedesktop.org/ci-templates/">documentation for CI Templates</a> has more, go and peruse my pretties. </p> <p><small>[1] For months the CI was basically just a build test because I couldn't run the test suite in a container<br/>[2] Updating isn't always required but sooner or later you run into a dependency issue if you don't  </small></p></div>
    </content>
    <updated>2020-03-20T11:33:00Z</updated>
    <published>2020-03-20T11:33:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="gitlab"/>
    <author>
      <name>Peter Hutterer</name>
      <email>noreply@blogger.com</email>
      <uri>https://www.blogger.com/profile/17204066043271384535</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-6112936277054198647</id>
      <category term="git"/>
      <category term="kernel"/>
      <category term="compiz"/>
      <category term="gitlab"/>
      <category term="configuration"/>
      <category term="xkb"/>
      <category term="x"/>
      <category term="fedora"/>
      <category term="tig"/>
      <category term="multitouch"/>
      <category term="libratbag"/>
      <category term="tutorial"/>
      <category term="wayland"/>
      <category term="xorg.conf"/>
      <category term="input device properties"/>
      <category term="tuhi"/>
      <category term="workflow"/>
      <category term="hid"/>
      <category term="gnome-device-setup"/>
      <category term="mpx"/>
      <category term="outdoors"/>
      <category term="gnome"/>
      <category term="libevdev"/>
      <category term="xds"/>
      <category term="xi2"/>
      <category term="wacom"/>
      <category term="evemu"/>
      <category term="xorg"/>
      <category term="xlib"/>
      <category term="libinput"/>
      <category term="hal"/>
      <category term="synaptics"/>
      <category term="freedesktop.org"/>
      <category term="xts"/>
      <category term="evtest"/>
      <category term="evdev"/>
      <category term="libinput. wayland"/>
      <author>
        <name>Peter Hutterer</name>
        <email>noreply@blogger.com</email>
        <uri>https://www.blogger.com/profile/17204066043271384535</uri>
      </author>
      <link href="https://www.blogger.com/feeds/6112936277054198647/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="https://www.blogger.com/feeds/6112936277054198647/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://who-t.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="https://www.blogger.com/feeds/6112936277054198647/posts/default?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <title>Who-T</title>
      <updated>2020-04-07T10:45:18Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>https://blog.tenstral.net/?p=1927</id>
    <link href="https://blog.tenstral.net/2020/03/maintain-release-info-easily-in-metainfo-files.html" rel="alternate" type="text/html"/>
    <title>Maintain release info easily in MetaInfo/Appdata files</title>
    <summary>This article isn’t about anything “new”, like the previous ones on AppStream – it rather exists to shine the spotlight on a feature I feel…</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This article isn’t about anything “new”, like the previous ones on AppStream – it rather exists to shine the spotlight on a feature I feel is underutilized. From conversations it appears that the reason simply is that people don’t know that it exists, and of course that’s a pretty bad reason not to make your life easier <img alt="&#xF0;&#x178;&#x2DC;&#x2030;" class="wp-smiley" src="https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f609.png" style="height: 1em;"/></p>



<p><em>Mini-Disclaimer: I’ll be talking about <code>appstreamcli</code>, part of AppStream, in this blogpost exclusively. The <code>appstream-util</code> tool from the <code>appstream-glib</code> project has a similar functionality – check out its help text and look for <code>appdata-to-news</code> if you are interested in using it instead.</em></p>



<h2>What is this about?</h2>



<p>AppStream permits software to add <a href="https://www.freedesktop.org/software/appstream/docs/chap-Metadata.html#tag-releases">release information</a> to their MetaInfo files to describe current and upcoming releases. This feature has the following advantages:</p>



<ul><li>Distribution-agnostic format for release descriptions</li><li>Provides versioning information for bundling systems (Flatpak, AppImage, …)</li><li>Release texts are short and end-user-centric, not technical as the ones provided by distributors usually are</li><li>Release texts are fully translatable using the normal localization workflow for MetaInfo files</li><li>Releases can link artifacts (built binaries, source code, …) and have additional machine-readable metadata e.g. one can tag a release as a development release</li></ul>



<p>The disadvantage of all this, is that humans have to maintain the release information. Also, people need to write XML for this. Of course, once humans are involved with any technology, things get a lot more complicated. That doesn’t mean we can’t make things easier for people to use though.</p>



<p>Did you know that you don’t actually have to edit the XML in order to update your release information? To make creating and maintaining release information as easy as possible, the <code>appstreamcli</code> utility has a few helpers built in. And the best thing is that <code>appstreamcli</code>, being part of AppStream, is available pretty ubiquitously on Linux distributions.</p>



<h2>Update release information from NEWS data</h2>



<p>The <em>NEWS</em> file is a <a href="https://www.gnu.org/prep/standards/html_node/NEWS-File.html">not very well defined textfile</a> that lists “user-visible changes worth mentioning” per each version. This maps pretty well to what AppStream release information should contain, so let’s generate that from a NEWS file!</p>



<p>Since the news format is not defined, but we need to parse this somehow, the amount of things <code>appstreamcli</code> can parse is very limited. We support a format in this style:</p>


<pre class="brush: plain; title: ; notranslate">Version 0.2.0
~~~~~~~~~~~~~~
Released: 2020-03-14

Notes:
 * Important thing 1
 * Important thing 2

Features:
 * New/changed feature 1
 * New/changed feature 2 (Author Name)
 * ...

Bugfixes:
 * Bugfix 1
 * Bugfix 2
 * ...

Version 0.1.0
~~~~~~~~~~~~~~
Released: 2020-01-10

Features:
 * ...
</pre>


<p>When parsing a file like this, <code>appstreamcli</code> will allow a lot of errors/”imperfections” and account for quite a few style and string variations. You will need to check whether this format works for you. You can see it in use in <a href="https://github.com/ximion/appstream/blob/master/NEWS">appstream itself</a> and <a href="https://github.com/hughsie/libxmlb/blob/master/NEWS">libxmlb for a slightly different style</a>.</p>



<p>So, how do you convert this? We first create our NEWS file, e.g. with this content:</p>


<pre class="brush: plain; title: ; notranslate">Version 0.2.0
~~~~~~~~~~~~~~
Released: 2020-03-14

Bugfixes:
 * The CPU no longer overheats when you hold down spacebar

Version 0.1.0
~~~~~~~~~~~~~~
Released: 2020-01-10

Features:
 * Now plays a "zap" sound on every character input
</pre>


<p>For the MetaInfo file, we of course generate one using the <a href="https://www.freedesktop.org/software/appstream/metainfocreator/#/">MetaInfo Creator</a>. Then we can run the following command to get a preview of the generated file: <code>appstreamcli news-to-metainfo ./NEWS ./org.example.myapp.metainfo.xml -</code> Note the single dash at the end – this is the explicit way of telling <code>appstreamcli</code> to print something to stdout. This is how the result looks like:</p>


<pre class="brush: xml; title: ; notranslate">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;component type="desktop-application"&gt;
  [...]
  &lt;releases&gt;
    &lt;release type="stable" version="0.2.0" date="2020-03-14T00:00:00Z"&gt;
      &lt;description&gt;
        &lt;p&gt;This release fixes the following bug:&lt;/p&gt;
        &lt;ul&gt;
          &lt;li&gt;The CPU no longer overheats when you hold down spacebar&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/description&gt;
    &lt;/release&gt;
    &lt;release type="stable" version="0.1.0" date="2020-01-10T00:00:00Z"&gt;
      &lt;description&gt;
        &lt;p&gt;This release adds the following features:&lt;/p&gt;
        &lt;ul&gt;
          &lt;li&gt;Now plays a "zap" sound on every character input&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/description&gt;
    &lt;/release&gt;
  &lt;/releases&gt;
&lt;/component&gt;
</pre>


<p>Neat! If we want to save this to a file instead, we just exchange the dash with a filename. And maybe we don’t want to add all releases of the past decade to the final XML? No problem too, just pass the <code>--limit</code> flag as well: <code>appstreamcli news-to-metainfo --limit=6 ./NEWS ./org.example.myapp.metainfo.tmpl.xml ./result/org.example.myapp.metainfo.xml</code></p>



<p>That’s nice on its own, but we really don’t want to do this by hand… The best way to ensure the MetaInfo file is updated, is to simply run this command at build time to generate the final MetaInfo file. For the <a href="https://mesonbuild.com/">Meson</a> build system you can achieve this with a code snippet like below (but for <a href="https://cmake.org/">CMake</a> this shouldn’t be an issue either – you could even make a nice macro for it there):</p>


<pre class="brush: python; title: ; notranslate">ascli_exe = find_program('appstreamcli')
metainfo_with_relinfo = custom_target('gen-metainfo-rel',
    input : ['./NEWS', 'org.example.myapp.metainfo.xml'],
    output : ['org.example.myapp.metainfo.xml'],
    command : [ascli_exe, 'news-to-metainfo', '--limit=6', '@INPUT0@', '@INPUT1@', '@OUTPUT@']
)
</pre>


<p>In order to also translate releases, you will need to add this to your .pot file generation workflow, so (x)gettext can run on the MetaInfo file with translations merged in.</p>



<h2>Release information from YAML files</h2>



<p>Since parsing a “no structure, somewhat human-readable file” is hard without baking an AI into <code>appstreamcli</code>, there is also a second option available: Generate the XML from a YAML file. YAML is easy to write for humans, but can also be parsed by machines.The YAML structure used here is specific to AppStream, but somewhat maps to the NEWS file contents as well as MetaInfo file data. That makes it more versatile, but in order to use it, you will need to opt into using YAML for writing news entries. If that’s okay for you to consider, read on!</p>



<p>A YAML release file has this structure:</p>


<pre class="brush: yaml; title: ; notranslate">---
Version: 0.2.0
Date: 2020-03-14
Type: development
Description:
- The CPU no longer overheats when you hold down spacebar
- Fixed bugs ABC and DEF
---
Version: 0.1.0
Date: 2020-01-10
Description: |-
  This is our first release!

  Now plays a "zap" sound on every character input
</pre>


<p>As you can see, the release date has to be an <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO 8601</a> string, just like it is assumed for NEWS files. Unlike in NEWS files, releases can be defined as either <code>stable</code> or <code>development</code> depending on whether they are a stable or development release, by specifying a <code>Type</code> field. If no <code>Type</code> field is present, <code>stable</code> is implicitly assumed. Each release has a description, which can either be a free-form multi-paragraph text, or a list of entries.</p>



<p>Converting the YAML example from above is as easy as using the exact same command that was used before for plain NEWS files: <code>appstreamcli news-to-metainfo --limit=6 ./NEWS.yml ./org.example.myapp.metainfo.tmpl.xml ./result/org.example.myapp.metainfo.xml</code> If <code>appstreamcli</code> fails to autodetect the format, you can help it by specifying it explicitly via the <code>--format=yaml</code> flag. This command would produce the following result:</p>


<pre class="brush: xml; title: ; notranslate">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;component type="console-application"&gt;
  [...]
  &lt;releases&gt;
    &lt;release type="development" version="0.2.0" date="2020-03-14T00:00:00Z"&gt;
      &lt;description&gt;
        &lt;ul&gt;
          &lt;li&gt;The CPU no longer overheats when you hold down spacebar&lt;/li&gt;
          &lt;li&gt;Fixed bugs ABC and DEF&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/description&gt;
    &lt;/release&gt;
    &lt;release type="stable" version="0.1.0" date="2020-01-10T00:00:00Z"&gt;
      &lt;description&gt;
        &lt;p&gt;This is our first release!&lt;/p&gt;
        &lt;p&gt;Now plays a "zap" sound on every character input&lt;/p&gt;
      &lt;/description&gt;
    &lt;/release&gt;
  &lt;/releases&gt;
&lt;/component&gt;
</pre>


<p>Note that the <code>0.2.0</code> release is now marked as <code>development</code> release, a thing which was not possible in the plain text NEWS file before.</p>



<h2>Going the other way</h2>



<p>Maybe you like writing XML, or have some other tool that generates the MetaInfo XML, or you have received your release information from some other source and want to convert it into text. AppStream also has a tool for that! Using <code>appstreamcli metainfo-to-news &lt;metainfo-file&gt; &lt;news-file&gt;</code> you can convert a MetaInfo file that has release entries into a text representation. If you don’t want <code>appstreamcli</code> to autodetect the right format, you can specify it via the <code>--format=&lt;text|yaml&gt;</code> switch.</p>



<h2>Future considerations</h2>



<p>The release handling is still not something I am entirely happy with. For example, the release information has to be written and translated at release time of the application. For some projects, this workflow isn’t practical. That’s why <a href="https://github.com/ximion/appstream/issues/240">issue #240</a> exists in AppStream which basically requests an option to have release notes split out to a separate, remote location (and also translations, but that’s unlikely to happen). Having remote release information is something that will highly likely happen in some way, but implementing this will be a quite disruptive, if not breaking change. That is why I am holding this change back for the AppStream 1.0 release.</p>



<p>In the meanwhile, besides improving the XML form of release information, I also hope to support a few more <em>NEWS</em> text styles if they can be autodetected. The <a href="https://github.com/systemd/systemd/blob/master/NEWS">format of the systemd project</a> may be a good candidate. The YAML release-notes format variant will also receive a few enhancements, e.g. for specifying a release URL. For all of these things, I very much welcome pull requests or issue reports. I can implement and maintain the things I use myself best, so if I don’t use something or don’t know about a feature many people want I won’t suddenly implement it or start to add features at random because “they may be useful”. That would be a recipe for disaster. This is why for these features in particular contributions from people who are using them in their own projects or want their new usecase represented are very welcome.</p></div>
    </content>
    <updated>2020-03-16T11:40:00Z</updated>
    <published>2020-03-16T11:40:00Z</published>
    <category term="Debian"/>
    <category term="Development"/>
    <category term="English"/>
    <category term="FLOSS"/>
    <category term="Freedesktop"/>
    <category term="General"/>
    <category term="GNOME"/>
    <category term="KDE"/>
    <category term="Linux"/>
    <category term="OpenSUSE"/>
    <category term="Ubuntu"/>
    <category term="appstream"/>
    <category term="freedesktop"/>
    <category term="metainfo"/>
    <category term="xdg"/>
    <author>
      <name>Matthias</name>
    </author>
    <source>
      <id>https://blog.tenstral.net</id>
      <link href="https://blog.tenstral.net/category/planet/planet-gnome/feed" rel="self" type="application/rss+xml"/>
      <link href="https://blog.tenstral.net" rel="alternate" type="text/html"/>
      <subtitle>Yet another Wordpress weblog</subtitle>
      <title>GNOME – Ximions Blog</title>
      <updated>2020-03-16T13:23:14Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>http://blogs.gnome.org/chergert/?p=8915</id>
    <link href="https://blogs.gnome.org/chergert/2020/03/15/how-to-use-sysprof-to-part-ii/" rel="alternate" type="text/html"/>
    <title>How to use Sysprof to… Part II</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">In the previous article of this series we covered Sysprof basics to help you use the tooling. Now I want to take a moment to show you how to use the command line tooling to profile systems like GNOME Shell. Record an existing session The easiest way to get started is to record your existing … <a class="more-link" href="https://blogs.gnome.org/chergert/2020/03/15/how-to-use-sysprof-to-part-ii/">Continue reading <span class="screen-reader-text">How to use Sysprof toâ€¦ Part II</span></a></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>In the <a href="https://blogs.gnome.org/chergert/2020/03/14/how-to-use-sysprof-to/">previous article</a> of this series we covered Sysprof basics to help you use the tooling. Now I want to take a moment to show you how to use the command line tooling to profile systems like <b>GNOME Shell</b>.</p>
<h2>Record an existing session</h2>
<p>The easiest way to get started is to record your existing GNOME Shell session. With <code>sysprof-cli</code>, you can use the <code>--gnome-shell</code> option and it will attempt to connect to your active GNOME Shell instance over D-Bus to stream COGL pipeline information over a private file-descriptor.</p>
<p>This information can be combined with callgraphs to see what is happening during the duration of a COGL mark.</p>
<p>The details page can also provide some quick overview information about the marks and their duration. You will find this helpful when comparing patches to see if they really improved things over time.</p>
<figure class="wp-caption aligncenter" id="attachment_8993" style="width: 660px;"><a href="http://blogs.gnome.org/chergert/files/2020/03/Screenshot-from-2020-03-15-15-41-57.png"><img alt="" class="size-large wp-image-8993" height="523" src="http://blogs.gnome.org/chergert/files/2020/03/Screenshot-from-2020-03-15-15-41-57-1024x811.png" width="660"/></a><figcaption class="wp-caption-text" id="caption-attachment-8993">The details button in the top right will show you information about marks and their min/max/avg duration.</figcaption></figure>
<h2>Basic Shell Recording</h2>
<p>Running something like a desktop session is complex. You have a D-Bus daemon, a compositor, series of background daemons, settings infrastructure, and programs saving to your home directory. For this reason you cannot really run two of them for the same user at the same time, or even nested.</p>
<p>Because of this, it is handy to log out of your desktop session and switch to a VT to profile GNOME Shell. Sysprof provides a <code>sysprof-cli</code> binary you can use to profile in complicated setups like this.<br/>
Start by switching to another VT like <code>Control+Shift+3</code>. I recommend stopping the current display server just so that it doesn’t get in the way of profiling, but usually it’s okay to not. Then we can enter our JHBuild environment with a new D-Bus session before we start Sysprof and GNOME Shell.</p>
<pre style="background: black; color: #C8C8C8;">Fedora 32 (Workstation Edition)
Kernel 5.6.0-0.rc4.git0.1.fc32.x86_64 (tty3)

startdust login: christian
Password: 
$ sudo service gdm stop
$ dbus-run-session jhbuild shell
$ </pre>
<p>At this point, we can spawn GNOME Shell with Sysprof to start recording.</p>
<p>You can use <code>--</code> to specify the command you want <code>sysprof-cli</code> to execute while it records. When that application exits, sysprof-cli will extract all the known symbols and finish it’s recording.</p>
<p><i>I want to mention briefly that the <code>--gnome-shell</code> option only works with an existing GNOME session. I hope to fix that in the near future though.</i></p>
<pre style="background: black; color: #c8c8c8;">$ sysprof-cli -- gnome-shell --wayland --display-server</pre>
<p>At this point, GNOME Shell will have spawned and you can exercise it to exhibit the behavior you’d like to improve. When done, open a terminal window to kill GNOME shell so that the profiler can clean up.</p>
<figure class="wp-caption aligncenter" id="attachment_8966" style="width: 660px;"><a href="http://blogs.gnome.org/chergert/files/2020/03/Screenshot-from-2020-03-15-15-10-28.png"><img alt="" class="size-large wp-image-8966" height="388" src="http://blogs.gnome.org/chergert/files/2020/03/Screenshot-from-2020-03-15-15-10-28-1024x602.png" width="660"/></a><figcaption class="wp-caption-text" id="caption-attachment-8966">kill -9 $(pidof gnome-shell) seems to work well for me</figcaption></figure>
<p>Now you’ll have a <code>capture.syscap</code> file in your current directory. Open that up with Sysprof to view the contents of your profiling session. Often I just spawn <code>gnome-shell</code> directly to open the syscap file and explore.</p>
<h2>Recording JavaScript stacks</h2>
<p>Sometimes you want to profile JavaScript instead of the C code from Shell, Mutter, and friends. To do this, use the <code>--gjs</code> command line option. Currently, this can give mixed results if you also sample callstacks with the Linux perf support, as the timings are not guaranteed to be equivalent. My recommendation is to disable perf when sampling JavaScript using the <code>--no-perf</code> option.</p>
<pre style="background: black; color: #c8c8c8;">$ sysprof-cli --gjs --no-perf -- gnome-shell --wayland --display-server</pre>
<p>Now when you open the callgraph in Sysprof, you’ll see JavaScript samples.</p>
<figure class="wp-caption aligncenter" id="attachment_8972" style="width: 660px;"><a href="http://blogs.gnome.org/chergert/files/2020/03/Screenshot-from-2020-03-15-15-18-02.png"><img alt="" class="size-large wp-image-8972" height="460" src="http://blogs.gnome.org/chergert/files/2020/03/Screenshot-from-2020-03-15-15-18-02-1024x713.png" width="660"/></a><figcaption class="wp-caption-text" id="caption-attachment-8972">JavaScrpt callgraph example</figcaption></figure>
<h2>Recording Energy Consumption</h2>
<p>On Linux, we have support for tracking energy usage as “Rolling Average Power Limit” or RAPL for short. Sysprof can include this information for you in your capture if you have the <code>turbostat</code> utility available. It provides power information per “package” such as the GPU and CPU.</p>
<p>Keeping power consumption low is an important part of a modern desktop that aims to be useful on laptops and smaller form factors. It’s useful to check in now and again to ensure that we’re keeping things tip top.</p>
<pre style="background: black; color: #c8c8c8;">$ sysprof-cli --rapl --no-perf -- gnome-shell --wayland --display-server</pre>
<p>You might want to disable sampling while testing power consumption because that could have a larger effect in terms of wattage than the thing you’re profiling.</p>
<figure class="wp-caption aligncenter" id="attachment_9011" style="width: 660px;"><a href="http://blogs.gnome.org/chergert/files/2020/03/Screenshot-from-2020-03-15-15-51-56.png"><img alt="" class="size-large wp-image-9011" height="434" src="http://blogs.gnome.org/chergert/files/2020/03/Screenshot-from-2020-03-15-15-51-56-1024x673.png" width="660"/></a><figcaption class="wp-caption-text" id="caption-attachment-9011">Don’t forget to check the counter and energy menus for additional graphs.</figcaption></figure>
<h2>Reducing Memory Allocations</h2>
<p>Plugging memory leaks is a great thing to do. But sometimes it’s better to never allocate things to begin with. The <code>--memprof</code> option can help you find extraneous allocations in your program. For example, I tested the <code>--memprof</code> option on GNOME Shell when writing it and immediately found <a href="https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/1071">a way to reduce temporary allocations</a> by hundreds of MiB per minute of use.</p>
<pre style="background: black; color: #c8c8c8;">$ sysprof-cli --memprof -- gnome-shell --wayland --display-server</pre>
<h2>Avoiding Main Loop Stalls</h2>
<p>This one requires you to build Sysprof until our next release, but you can use the <code>--speedtrack</code> option to find things running on your main loop that may not be a good idea. It will also insert marks for how long the main loop iterations run to find periods of time that you aren’t staying interactive.</p>
<pre style="background: black; color: #c8c8c8;">$ sysprof-cli --speedtrack -- gnome-shell --wayland --display-server</pre>
<p>Anyway, that does it for now! Hope you found this brain dump insightful enough to help us all push forward on the performance curve.</p></div>
    </content>
    <updated>2020-03-15T23:04:08Z</updated>
    <published>2020-03-15T23:04:08Z</published>
    <category term="GNOME Shell"/>
    <category term="Sysprof"/>
    <author>
      <name>chergert</name>
    </author>
    <source>
      <id>https://blogs.gnome.org/chergert</id>
      <link href="https://blogs.gnome.org/chergert/feed/" rel="self" type="application/rss+xml"/>
      <link href="https://blogs.gnome.org/chergert" rel="alternate" type="text/html"/>
      <subtitle>Just another GNOME Blogs site</subtitle>
      <title>Zen and the Art of GNOME</title>
      <updated>2020-03-20T22:54:23Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>https://blogs.gnome.org/haeckerfelix/?p=2765</id>
    <link href="https://blogs.gnome.org/haeckerfelix/2020/03/15/shortwave-1-0-0/" rel="alternate" type="text/html"/>
    <link href="https://blogs.gnome.org/haeckerfelix/files/2020/03/layout.webm" length="1089913" rel="enclosure" type="video/webm"/>
    <link href="https://blogs.gnome.org/haeckerfelix/files/2020/03/restore.webm" length="519652" rel="enclosure" type="video/webm"/>
    <link href="https://blogs.gnome.org/haeckerfelix/2020/03/15/shortwave-1-0-0/#comments" rel="replies" type="text/html"/>
    <link href="https://blogs.gnome.org/haeckerfelix/2020/03/15/shortwave-1-0-0/feed/atom/" rel="replies" type="application/atom+xml"/>
    <title xml:lang="en-US">Shortwave – First stable release</title>
    <summary type="xhtml" xml:lang="en-US"><div xmlns="http://www.w3.org/1999/xhtml">Today, after nearly two years of development I’m very proud to say: The first stable version of Shortwave is now available! I have put a lot of time and effort into this project, now it is finally time to make … <a href="https://blogs.gnome.org/haeckerfelix/2020/03/15/shortwave-1-0-0/">Continue reading <span class="meta-nav">→</span></a></div>
    </summary>
    <content type="xhtml" xml:lang="en-US"><div xmlns="http://www.w3.org/1999/xhtml"><p>Today, after nearly <a href="https://gitlab.gnome.org/World/Shortwave/-/commit/cd2d04af7abafae5de41e4e68a0ee0570de33d4c">two years of development</a> I’m very proud to say: <strong>The first stable version of Shortwave is now available! </strong>I have put a lot of time and effort into this project, now it is finally time to make it available for everyone :-).</p>
<h2>What is Shortwave?</h2>
<p>Shortwave is an internet radio player that provides access to a station database with over 25,000 stations.</p>
<p><img alt="" class="size-full wp-image-2786 aligncenter" height="675" src="https://blogs.gnome.org/haeckerfelix/files/2020/03/Screenshot-von-2020-03-14-22.57.26.png" width="1200"/></p>
<h2>Automatic recording of songs</h2>
<p>When a station is being played, everything gets automatically recorded in the background. You hear a song you like? No problem, you can save the song afterwards and play it with your favorite music player. Songs are automatically detected based on the stream metadata.</p>
<p><img alt="" class="size-full wp-image-2774 aligncenter" height="675" src="https://blogs.gnome.org/haeckerfelix/files/2020/03/Screenshot-von-2020-03-14-22.59.45.png" width="402"/></p>
<h2>Streaming</h2>
<p>Itâ€™s possible to stream the audio playback to a network device, which implements the Google Cast protocol (e.g. Chromecast). So you can easily listen to your favorite stations e.g. from a TV.</p>
<p><img alt="" class="size-full wp-image-2792 aligncenter" height="419" src="https://blogs.gnome.org/haeckerfelix/files/2020/03/Screenshot-von-2020-03-14-23.09.25.png" width="452"/></p>
<h2>Adaptive interface</h2>
<p>The interface of Shortwave is completely adaptive and adapts to all screen sizes. So you can use it on the desktop, but also on your Linux (not Android!) based smartphone.</p>
<div class="wp-video" style="width: 584px;"><!--[if lt IE 9]><script>document.createElement('video');</script><![endif]-->
<video class="wp-video-shortcode" controls="" height="340" id="video-2765-1" preload="metadata" width="584"><source src="https://blogs.gnome.org/haeckerfelix/files/2020/03/layout.webm?_=1" type="video/webm"/><a href="https://blogs.gnome.org/haeckerfelix/files/2020/03/layout.webm">https://blogs.gnome.org/haeckerfelix/files/2020/03/layout.webm</a></video></div>
<h2>Access to a huge database</h2>
<p>Shortwave uses the internet service <a href="http://www.radio-browser.info/gui/#!/">radio-browser.info</a> as station database. It contains more than 25,000 stations. This ensures that you will find every radio station, whether a known or an exotic one.</p>
<p><img alt="" class="size-full wp-image-2780 aligncenter" height="675" src="https://blogs.gnome.org/haeckerfelix/files/2020/03/Screenshot-von-2020-03-14-22.57.56.png" width="1200"/></p>
<h2>System Integration</h2>
<p>Shortwave integrates into the GNOME Shell, by providing a MPRIS applet and a proper PulseAudio implementation.</p>
<p><img alt="" class="wp-image-2771 aligncenter" height="422" src="https://blogs.gnome.org/haeckerfelix/files/2020/03/collage.png" width="738"/></p>
<h2>Gradio???</h2>
<p>… is definitely dead now. But don’t worry, you can migrate the data easily to Shortwave.</p>
<p>Gradio: <em>Application Menu -&gt; “Library” -&gt; “Export” -&gt; “Gradio Database Format”</em></p>
<p>Shortwave: <em>“Import stations from Gradio”</em></p>
<div class="wp-video" style="width: 584px;"><video class="wp-video-shortcode" controls="" height="340" id="video-2765-2" preload="metadata" width="584"><source src="https://blogs.gnome.org/haeckerfelix/files/2020/03/restore.webm?_=2" type="video/webm"/><a href="https://blogs.gnome.org/haeckerfelix/files/2020/03/restore.webm">https://blogs.gnome.org/haeckerfelix/files/2020/03/restore.webm</a></video></div>
<h2>Download</h2>
<p>Shortwave is already available to download from Flathub!</p>
<p><a href="https://flathub.org/apps/details/de.haeckerfelix.Shortwave"><img class="alignleft" height="69" src="https://flathub.org/assets/badges/flathub-badge-en.png" width="189"/></a></p>
<p> </p>
<p> </p>
<p> </p>
<p>Or install it with:</p>
<pre><span>flatpak install flathub de.haeckerfelix.Shortwave
</span></pre>
<p>Have fun with it! And many thanks to all who supported me during the development. Especially the fabulous <a href="https://gitlab.gnome.org/World/podcasts">GNOME Podcasts team</a> <img alt=":-)" class="wp-smiley" src="https://blogs.gnome.org/haeckerfelix/wp-includes/images/smilies/face-smile.png" style="height: 1em;"/></p>
<p> </p></div>
    </content>
    <updated>2020-03-15T00:18:51Z</updated>
    <published>2020-03-15T00:18:51Z</published>
    <category scheme="https://blogs.gnome.org/haeckerfelix" term="Uncategorized"/>
    <author>
      <name>haeckerfelix</name>
    </author>
    <source>
      <id>https://blogs.gnome.org/haeckerfelix/feed/atom/</id>
      <link href="https://blogs.gnome.org/haeckerfelix" rel="alternate" type="text/html"/>
      <link href="https://blogs.gnome.org/haeckerfelix/feed/atom/" rel="self" type="application/atom+xml"/>
      <subtitle xml:lang="en-US">Just another development blog</subtitle>
      <title xml:lang="en-US">Felix Häcker</title>
      <updated>2020-03-15T00:18:51Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>http://blog.gtk.org/?p=7661</id>
    <link href="https://blog.gtk.org/2020/03/13/building-and-testing-gtk/" rel="alternate" type="text/html"/>
    <title>Building and testing GTK</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">… or: how GTK developers check their work on the toolkit. Since GNOME’s collective move to GitLab, GTK has taken advantage of the features provided by that platform—especially when it comes to its continuous integration pipeline. In days of old, the only way to check that our changes to the toolkit were correct was to … <a class="more-link" href="https://blog.gtk.org/2020/03/13/building-and-testing-gtk/">Continue reading<span class="screen-reader-text"> "Building and testing GTK"</span></a></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><em>… or: how GTK developers check their work on the toolkit</em>.</p>
<p>Since GNOME’s collective move to <a href="https://gitlab.gnome.org">GitLab</a>, GTK has taken advantage of the features provided by that platform—especially when it comes to its continuous integration pipeline.</p>
<p>In days of old, the only way to check that our changes to the toolkit were correct was to wait until the <a href="https://wiki.gnome.org/Projects/GnomeContinuous">Continuous</a> build bot would notify us of any breakage on the main development branches. While this was better than nothing, it didn’t allow us to prevent breakage <em>during</em> the development phase of anything—from features to bug fixes, from documentation improvements to adding new tests.</p>
<p>These days, the CI pipeline available in GitLab is run on every branch and merge request, long before the changes reach the public development branches used by everybody else.</p>
<h2 id="topic-branches-and-merge-requests">Topic branches and merge requests</h2>
<p>When developing a topic branch against the GTK 4 main development one, we run a CI pipeline that starts with a simple coding style check for the changes applied in the branch. The style check uses <a href="https://clang.llvm.org/docs/ClangFormat.html">clang-format</a>, which is often good enough for the <a href="https://gitlab.gnome.org/GNOME/gtk/-/blob/master/docs/CODING-STYLE">GTK coding style</a>; the coding style has a few “special” caveats, and clang-format can raise false negatives and false positives. For that reason, the style check is allowed to fail, but contributors and reviewers are strongly encouraged to check the logs in case of failure.</p>
<p>Once the style check is passed, we run the build phase, which currently contains three separate jobs:</p>
<ul>
<li>a Linux debug build, using a Fedora container</li>
<li>an MSYS2 build on Windows</li>
<li>a Linux release build</li>
</ul>
<p>The Linux debug build is pretty standard fare.</p>
<p>The MSYS2 build catches any issue with a GNU toolchain on Windows.</p>
<p>The release build is necessary to ensure that we don’t rely on side effects of the debugging code we have in place during development.</p>
<p>All of these jobs run the GTK test suite.</p>
<p>We publish the tests reports both as a JUnit file, taking advantage of GitLab’s support; and as an HTML report, stored as a pipeline artifact. This makes it easier for us to check what failed and what succeeded.</p>
<p>Ideally, we want to add more environments:</p>
<ul>
<li>Linux builds based on other mainstream distributions</li>
<li>a Windows build using the MSVC toolchain</li>
<li>a macOS build, once the GDK backend is fixed</li>
</ul>
<p>After the build and testing jobs pass, we step into an analysis phase. We run the <a href="https://clang-analyzer.llvm.org/scan-build.html">Clang static analysis tool</a> on GTK’s code base and generate a report. In the near future we could also run sanitizer tools like UBSan and ASan; fuzzying tools for our parsers, like GtkBuilder and CSS; or tools that verify that our UI definitions contain the appropriate accessibility descriptors.</p>
<p>Just like the tests, we publish the analysis reports as GitLab artifacts for review.</p>
<p>Once the analysis phase is passed, we build the API references, and check the result so that newly added symbols are properly documented.</p>
<p>Finally, we have manual CI jobs to build Flatpak bundles for the GTK demo application; the widget factory; and the icon browser. This allows designers to immediately test changes in Adwaita, or newly added widgets, without necessarily building GTK from a scratch on their systems.</p>
<h2 id="mainline-development-branches">Mainline development branches</h2>
<p>Once the CI pipeline for a topic branch/merge request passes, we can merge the changes into the main development branch with a certain level of confidence that the code is correct and does what we want.</p>
<p>The main development branch runs the same pipeline as previously described, except that the Flatpak jobs are not manual any more—thus is always possible to test locally the current bleeding edge of GTK. Additionally, the documentation is published <a href="https://gnome.pages.gitlab.gnome.org/gtk/gtk/">online</a>, so it’s always up to date.</p>
<p><a href="https://blog.gtk.org/files/2020/03/gtk-ci-pipeline-full.png"><img alt="The GTK CI pipeline" class="aligncenter size-large wp-image-7673" height="266" src="https://blog.gtk.org/files/2020/03/gtk-ci-pipeline-full-1024x324.png" width="840"/></a></p>
<h2 id="what-about-gtk-3">What about GTK 3?</h2>
<p>In the GTK 3 branch we have a simpler pipeline that runs the following jobs:</p>
<ul>
<li>a full Meson debug build on Linux and Windows/MSYS2, for both static and shared libraries artifacts, on the current stable versions of Fedora and Debian</li>
<li>a full Meson release build on Linux, which also generates the API reference</li>
<li>an Autotools build on Linux and Windows/MSYS2</li>
<li>an optional Autotools distcheck build on Linux</li>
</ul>
<p>The Autotools jobs will be in place for as long as GTK 3 supports Autotools. Ideally, we want to add other jobs for macOS and Windows/MSVC, taking advantage of the Meson build.</p>
<p><a href="https://blog.gtk.org/files/2020/03/gtk3-ci-pipeline.png"><img alt="The GTK3 CI pipeline" class="aligncenter size-full wp-image-7682" height="425" src="https://blog.gtk.org/files/2020/03/gtk3-ci-pipeline.png" width="432"/></a></p>
<p>Once the GTK 4 CI pipeline reaches a certain level of features and stability, we’re going to backport it to GTK 3, so we can be even more confident that the current stable branch does not regress.</p>
<hr/>
<p>For more information, you can check the GTK repository:</p>
<ul>
<li><a href="https://gitlab.gnome.org/GNOME/gtk/-/blob/master/.gitlab-ci.yml"><code>.gitlab-ci.yml</code></a> for the main development branch</li>
<li>the <a href="https://gitlab.gnome.org/GNOME/gtk/-/tree/master/.gitlab-ci"><code>.gitlab-ci</code></a> directory, containing various helper scripts.</li>
</ul></div>
    </content>
    <updated>2020-03-13T18:39:00Z</updated>
    <published>2020-03-13T18:39:00Z</published>
    <category term="uncategorized"/>
    <category term="CI"/>
    <category term="development"/>
    <category term="GTK+"/>
    <author>
      <name>Emmanuele Bassi</name>
    </author>
    <source>
      <id>https://blog.gtk.org</id>
      <link href="https://blog.gtk.org/author/ebassi/feed/" rel="self" type="application/rss+xml"/>
      <link href="https://blog.gtk.org" rel="alternate" type="text/html"/>
      <subtitle>All things GTK</subtitle>
      <title>Emmanuele Bassi – GTK Development Blog</title>
      <updated>2020-03-13T18:39:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>https://swilmet.be/?p=3278</id>
    <link href="https://swilmet.be/blog/2020/03/13/gedit-36-things-to-do-and-maybe-planning-a-crowdfunding/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=gedit-36-things-to-do-and-maybe-planning-a-crowdfunding" rel="alternate" type="text/html"/>
    <title>gedit – 36 things to do, maybe planning a crowdfunding</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">GNOME 3.36 has been released. And gedit 3.36 too! In the small corner of the Universe where I live, when we say “36” it actually means “a lot”. When we have 36 things to do today, or when we cannot do 36 things at the same time. In the case of gedit, there are also … <a class="more-link" href="https://swilmet.be/blog/2020/03/13/gedit-36-things-to-do-and-maybe-planning-a-crowdfunding/">Continue reading <span class="screen-reader-text">gedit – 36 things to do, maybe planning a crowdfunding</span></a></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>GNOME 3.36 has been released. And <a href="https://wiki.gnome.org/Apps/Gedit">gedit</a> 3.36 too!</p>
<p>In the small corner of the Universe where I live, when we say “36” it actually means “a lot”. When we have 36 things to do today, or when we cannot do 36 things at the same time. In the case of gedit, there are also 36 things to do, as you can imagine.</p>
<p>I now have more time that I can devote to GNOME, especially gedit. But I’m partly living on my savings.</p>
<h2>Maybe planning to do a crowdfunding for gedit!</h2>
<p>Do you think it would work? Is there still a wide interest for gedit?</p>
<p>gedit is the default text editor of GNOME, that is installed by default with many Linux distributions, so it ought to be a great app. But to be a great app, gedit needs a lot of work in my opinion. There are lots of imperfections and bugs, and the state of the code … could be improved significantly.</p>
<p>To give you an idea of possible things to improve in gedit, here is the <a href="https://gitlab.gnome.org/GNOME/gedit/blob/master/docs/roadmap.md">roadmap</a> (the items are in no particular order).</p>
<p><strong>Update:</strong> to see what’s new in gedit, see the <a href="https://gitlab.gnome.org/GNOME/gedit/-/blob/master/NEWS">gedit NEWS file</a> and <a href="https://gitlab.gnome.org/GNOME/gedit-plugins/-/blob/master/NEWS">gedit-plugins NEWS file</a> (read also the 3.35 entries).</p>
<p>Note that the fact that I have more free time and the fact that I’m maybe planning a crowdfunding is not related to this corona pandemic thingy (I prefer to precise).</p></div>
    </content>
    <updated>2020-03-13T16:11:05Z</updated>
    <published>2020-03-13T16:11:05Z</published>
    <category term="gedit"/>
    <category term="GNOME"/>
    <category term="Planet GNOME"/>
    <author>
      <name>Sébastien Wilmet</name>
    </author>
    <source>
      <id>https://swilmet.be</id>
      <link href="https://swilmet.be/blog/category/planet-gnome/feed/" rel="self" type="application/rss+xml"/>
      <link href="https://swilmet.be" rel="alternate" type="text/html"/>
      <subtitle>On text editors and other GNOME-related adventures</subtitle>
      <title>Planet GNOME – Sébastien Wilmet</title>
      <updated>2020-03-14T09:38:46Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:danigm.net,2020-03-13:/outreachy-2019-2.html</id>
    <link href="http://danigm.net/outreachy-2019-2.html" rel="alternate" type="text/html"/>
    <title>End of GNOME Outreachy 2019</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><h2>The Outreachy Program</h2>
<p>The outreachy program ended the past week and we've done great improvements
during this four months of work. I'm very happy with the result and with the
work of the two interns and also the GNOME co-mentors that make this possible.</p>
<p>If we're lucky the interns will continue contributing in the future and we can
see the GNOME comunity growing in developers and diversity ðŸŽ‰.</p>
<h2>GNOME translation editor (Gtranslator)</h2>
<video controls="" width="100%">
    <source src="http://danigm.net/pictures/gtranslator.webm" type="video/webm"/>
    Video showing the new gtranslator search bar
</video>

<p><a href="https://priyankasaggu11929.github.io/outreachy.html">Priyanka Saggu</a> has been working on the new gtranslator search bar. It's a
replacement for the old search dialog with a new and modern search bar, inspired
in the gnome-builder search.</p>
<p>This is how it looks in the current gtranslator version and the video is from
gtranslator master, that I'll try to release as 3.36.0 this weekend.</p>
<p class="img">
    <a href="http://danigm.net/pictures/gtranslator-old-search.png">
        <img src="http://danigm.net/pictures/gtranslator-old-search.png"/>
    </a>
</p>

<p>I want to thank to the other co-mentor of this project, Daniel Mustieles, who
has been testing and reviewing this new functionality.</p>
<h2>Fractal</h2>
<p><a href="https://pitag.home.blog/">Sonja Heinze</a> has been working on the video player for Fractal, so now
we can see videos inside the fractal message history instead of open it with
an external video player.</p>
<video controls="" width="100%">
    <source src="http://danigm.net/pictures/fractal.webm" type="video/webm"/>
    Video showing the new fractal video player
</video>

<p>This is now in master and will appear in the next release, that I'll try to
publish soon, maybe during this month. I want to fix some performance issues
first.</p>
<p>Jordan Petridis (alatiera) has done a great work as co-mentor, guiding the
project and helping with the gstreamer.</p>
<p>I've not presented any project proposal for the next outreachy, I want to take
a break and rest a bit before the Google Summer of Code, when I'll try to get
the multi-account support implemented in Fractal.</p>
<p>This programs give me a bit of work, reviewing and guiding the intern, but it's
really great to have paid people working on free software, so I'm very happy to
be able to be a mentor in GNOME to help to boost some free software projects
using these resources.</p></div>
    </summary>
    <updated>2020-03-12T23:00:00Z</updated>
    <published>2020-03-12T23:00:00Z</published>
    <category term="gnome"/>
    <category term="outreachy"/>
    <author>
      <name>danigm</name>
    </author>
    <source>
      <id>http://danigm.net/</id>
      <link href="http://danigm.net/" rel="alternate" type="text/html"/>
      <link href="http://danigm.net/feeds/tags/gnome.rss.xml" rel="self" type="application/rss+xml"/>
      <title>danigm.net - gnome</title>
      <updated>2020-03-12T23:00:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>https://blogs.gnome.org/aklapper/?p=9107</id>
    <link href="https://blogs.gnome.org/aklapper/2020/03/12/gnome-3-36-user-docs/" rel="alternate" type="text/html"/>
    <title>GNOME 3.36 user documentation updates</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Looks like since the release of GNOME 3.34.0 in September 2019 I made exactly 500 commits in GNOME Git. :) My main focus was on updating documentation. The user help of cheese, gnome-klotski, gnome-mahjongg, gnome-nibbles, gnome-robots, gnome-terminal, gnome-tetravex, iagno, lightsoff, … <a href="https://blogs.gnome.org/aklapper/2020/03/12/gnome-3-36-user-docs/">Continue reading <span class="meta-nav">→</span></a></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Looks like since the release of GNOME 3.34.0 in September 2019 I made exactly 500 commits in GNOME Git. :)</p>
<div class="wp-caption alignright" id="attachment_9116" style="width: 763px;"><img alt="Localized screenshots shipped in GNOME 3.34 versus the same screenshot in 3.36" class="size-full wp-image-9116" height="570" src="https://blogs.gnome.org/aklapper/files/2020/03/gdocs334.jpg" width="753"/><p class="wp-caption-text" id="caption-attachment-9116">Localized screenshots shipped in GNOME 3.34 versus the same screenshot in 3.36</p></div>
<ul>
<li>
<p>My main focus was on updating documentation. The user help of <i>cheese</i>, <i>gnome-klotski</i>, <i>gnome-mahjongg</i>, <i>gnome-nibbles</i>, <i>gnome-robots</i>, <i>gnome-terminal</i>, <i>gnome-tetravex</i>, <i>iagno</i>, <i>lightsoff</i>, <i>quadrapassel</i>, <i>rhythmbox</i>, <i>zenity</i> should be up-to-date in 3.36 again.<br/>(If not, then <a href="https://wiki.gnome.org/Community/GettingInTouch/BugReportingGuidelines">report issues</a> in <a href="https://wiki.gnome.org/GitLab">GNOME GitLab</a> with the label <i>“8. User Docs”</i> or <a href="https://wiki.gnome.org/DocumentationProject">contribute patches yourself</a>.)</p>
</li>
<li>
<p>This also included updating a majority of outdated screenshots (both English and localized versions when feasible) across projects.</p>
</li>
<li>
<p>I also took the liberty to push quite some trivial markup fixes in some translations when a language was not already reserved for translation on <a href="https://l10n.gnome.org/">GNOME’s translation platform</a> (as such actions would interfere).</p>
</li>
</ul>
<p><a href="https://help.gnome.org/misc/release-notes/3.36/">Enjoy 3.36!</a></p></div>
    </content>
    <updated>2020-03-11T22:47:46Z</updated>
    <published>2020-03-11T22:47:46Z</published>
    <category term="gnome"/>
    <category term="lang-en"/>
    <category term="user-documentation"/>
    <author>
      <name>aklapper</name>
    </author>
    <source>
      <id>https://blogs.gnome.org/aklapper</id>
      <link href="https://blogs.gnome.org/aklapper/category/lang-en/feed/" rel="self" type="application/rss+xml"/>
      <link href="https://blogs.gnome.org/aklapper" rel="alternate" type="text/html"/>
      <subtitle>i'm not dead yet, but i'm working on it.</subtitle>
      <title>lang-en – andré klapper's blog.</title>
      <updated>2020-03-12T00:27:55Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>https://blogs.gnome.org/mcatanzaro/?p=8738</id>
    <link href="https://blogs.gnome.org/mcatanzaro/2020/03/11/epiphany-3-36-and-webkitgtk-2-28/" rel="alternate" type="text/html"/>
    <title>Epiphany 3.36 and WebKitGTK 2.28</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">So, what’s new in Epiphany 3.36? PDF.js Once upon a time, beginning with GNOME 3.14, Epiphany had supported displaying PDF documents via the Evince NPAPI browser plugin developed by Carlos Garcia Campos. Unfortunately, because NPAPI plugins have to use X11-specific APIs to draw web content, this didn’t Â suffice for very long. When GNOME switched to … <p class="link-more"><a class="more-link" href="https://blogs.gnome.org/mcatanzaro/2020/03/11/epiphany-3-36-and-webkitgtk-2-28/">Continue reading<span class="screen-reader-text"> "Epiphany 3.36 and WebKitGTK 2.28"</span></a></p></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>So, what’s new in Epiphany 3.36?</p>
<h2>PDF.js</h2>
<p>Once upon a time, beginning with GNOME 3.14, Epiphany had supported displaying PDF documents via the Evince NPAPI browser plugin developed by Carlos Garcia Campos. Unfortunately, because NPAPI plugins have to use X11-specific APIs to draw web content, this didn’t  suffice for very long. When GNOME switched to Wayland by default in GNOME 3.24 (yes, that was three years ago!), this functionality was left behind. Using an NPAPI plugin also meant the code was inherently unsandboxable and tied to a deprecated technology. Epiphany disabled support for NPAPI plugins by default in Epiphany 3.30, hiding the functionality behind a hidden setting, which has now finally been removed for Epiphany 3.36, killing off NPAPI for good.</p>
<p>Jan-Michael Brummer, who comaintains Epiphany with me, tried bringing back PDF support for Epiphany 3.34 using libevince, but eventually we decided to give up on this approach due to difficulty solving some user experience issues. Also, the rendering occurred in the unsandboxed UI process, which was again not good for security.</p>
<p>But PDF support is now back in Epiphany 3.36, and much better than before! Thanks to Jan-Michael, Epiphany now supports displaying PDFs using the amazing <a href="https://github.com/mozilla/pdf.js">PDF.js</a>. We are thankful for Mozilla’s work in developing PDF.js and open sourcing it for us to use. Viewing PDFs in Epiphany using PDF.js is more convenient than downloading them and opening them in Evince, and because the PDF is rendered in the sandboxed web process, using web technologies rather than poppler, it’s also approximately one bazillion times more secure.</p>
<figure class="wp-caption aligncenter" id="attachment_8741" style="width: 1232px;"><a href="https://blogs.gnome.org/mcatanzaro/files/2020/03/Screenshot-from-2020-03-05-16-08-27.png"><img alt="Screenshot of Epiphany displaying a PDF document" class="size-full wp-image-8741" height="954" src="https://blogs.gnome.org/mcatanzaro/files/2020/03/Screenshot-from-2020-03-05-16-08-27.png" width="1232"/></a><figcaption class="wp-caption-text" id="caption-attachment-8741">Look, it’s a PDF!</figcaption></figure>
<p>One limitation of PDF.js is that it does not support forms. If you need to fill out PDF forms, you’ll need to download the PDF and open it in Evince, just as you would if using Firefox.</p>
<h2>Dark Mode</h2>
<p>Thanks to Carlos Garcia, <a href="https://trac.webkit.org/changeset/255342/webkit">it should finally be possible to use Epiphany with dark GTK themes</a>. WebKitGTK has historically rendered HTML elements using the GTK theme, which has not been good for users of dark themes, which broke badly on many websites, usually due to dark text being drawn on dark backgrounds or various other problems with unexpected dark widgets. Since WebKitGTK 2.28, WebKit will try to manually change to a light GTK theme when it thinks a dark theme is in use, then use the light theme to render web content. (This work has actually been backported to WebKitGTK 2.26.4, so you don’t need to upgrade to WebKitGTK 2.28 to benefit, but the work landed very recently and we haven’t blogged about it yet.) Thanks to Cassidy James from elementary for providing example pages for testing dark mode behavior.</p>
<figure class="wp-caption aligncenter" id="attachment_8792" style="width: 1920px;"><a href="https://blogs.gnome.org/mcatanzaro/files/2020/03/Screenshot-from-2020-03-05-19-10-12.png"><img alt="Screenshot demonstrating broken dark mode support" class="size-full wp-image-8792" height="1080" src="https://blogs.gnome.org/mcatanzaro/files/2020/03/Screenshot-from-2020-03-05-19-10-12.png" width="1920"/></a><figcaption class="wp-caption-text" id="caption-attachment-8792">Broken dark mode support prior to WebKitGTK 2.26.4. Notice that the first two pages use dark color schemes when light color schemes are expected, and the dark blue links are hard to read over the dark gray background. Also notice that the text in the second image is unreadable.</figcaption></figure>
<figure class="wp-caption aligncenter" id="attachment_8795" style="width: 1920px;"><a href="https://blogs.gnome.org/mcatanzaro/files/2020/03/Screenshot-from-2020-03-05-19-11-50.png"><img alt="Screenshot demonstrating fixed dark mode support in WebKitGTK 2.26.4" class="wp-image-8795 size-full" height="1080" src="https://blogs.gnome.org/mcatanzaro/files/2020/03/Screenshot-from-2020-03-05-19-11-50.png" width="1920"/></a><figcaption class="wp-caption-text" id="caption-attachment-8795">Since WebKitGTK 2.26.4, dark mode works as it does in most other browsers. Websites that don’t support dark mode are light, and websites that do support dark mode are dark. Widgets themed using GTK are always light.</figcaption></figure>
<p>Since Carlos had <a href="https://trac.webkit.org/changeset/244766/webkit">already added support for the prefers-color-scheme media query</a> last year, this now gets us up to dark mode parity with most browsers, except, notably, Safari. Unlike other browsers, Safari allows websites to opt-in to rendering dark system widgets, like WebKitGTK used to do before these changes. Whether to support this in WebKitGTK <a href="https://bugs.webkit.org/show_bug.cgi?id=208204">remains to-be-determined.</a></p>
<h2>Process Swap on Navigation (PSON)</h2>
<p>PSON, which debuted in Safari 13, is a major change in WebKit’s process model. PSON is the first component of <a href="https://www.chromium.org/developers/design-documents/site-isolation">site isolation</a>, which Chrome has supported for some time, and which Firefox is currently working towards. If you care about web security, you should care a lot about site isolation, because the web browser community has arrived at a consensus that this is the best way to mitigate <a href="https://en.wikipedia.org/wiki/Spectre_(security_vulnerability)">speculative execution attacks</a>.</p>
<p>Nowadays, all modern web browsers use separate, sandboxed helper processes to render web content, ensuring that the main user interface process, which is unsandboxed, does not touch untrusted web content. Prior to 3.36, Epiphany already used a separate web process to display each browser tab (except for “related views,” where one tab opens another and gains scripting ability over the opened tab, subject to the Same Origin Policy). But in Epiphany 3.36, we now also have a separate web process <em>per website</em>. Each tab will swap between different web processes when navigating between different websites, to prevent any one web process from loading content from different websites.</p>
<p>To make these process swap navigations fast, a pool of prewarmed processes is used to hide the startup cost of launching a new process by ensuring the new process exists before it’s needed; otherwise, the overhead of launching a new web process to perform the navigation would become noticeable. And suspended processes live on after they’re no longer in use because they may be needed for back/forward navigations, which use WebKit’s <a href="https://webkit.org/blog/427/webkit-page-cache-i-the-basics/">page cache</a> when possible. (In the page cache, pages are kept in memory indefinitely, to make back/forward navigations fast.)</p>
<p>Due to internal refactoring, PSON previously necessitated some API breakage in WebKitGTK 2.26 that affected Evolution and Geary: WebKitGTK 2.26 deprecated WebKit’s single web process model and required that all applications use one web process per web view, which Evolution and Geary were not, at the time, prepared to handle. We tried hard to avoid this, because we hate to make behavioral changes that break applications, but in this case we decided it was unavoidable. That was the status quo in 2.26, <em>without</em> PSON, which we disabled just before releasing 2.26 in order to limit application breakage to just Evolution and Geary. Now, in WebKitGTK 2.28, PSON is finally available for applications to use on an opt-in basis. (It will become mandatory in the future, for GTK 4 applications.) Epiphany 3.36 opts in. To make this work, Carlos Garcia <a href="https://trac.webkit.org/changeset/251181/webkit">designed new WebKitGTK APIs for cross-process communication</a>, and <a href="https://gitlab.gnome.org/GNOME/epiphany/-/commit/b7381c715dfbf2c89b6face4b7f10e889cfd8e17">used them to replace the private D-Bus server that Epiphany previously used for this purpose</a>.</p>
<p>WebKit still has a long way to go to fully implement site isolation, but PSON is a major step down that road. Thanks to Brady Eidson and Chris Dumez from Apple for making this work, and to Carlos Garcia for handling most of the breakage (there was a lot). As with any major intrusive change of such magnitude, <a href="https://bugs.webkit.org/show_bug.cgi?id=205651">regressions</a> are <a href="https://bugs.webkit.org/show_bug.cgi?id=208091">inevitable</a>, so don’t hesitate to report issues on WebKit Bugzilla.</p>
<h2>highlight.js</h2>
<p>Once upon a time, WebKit had its own implementation for viewing page source, but this was removed from WebKit way back in 2014, in WebKitGTK 2.6. Ever since, Epiphany would open your default text editor, usually gedit, to display page source. Suffice to say that this was not a very satisfactory solution.</p>
<p>I finally managed to implement view source mode at the Epiphany level for Epiphany 3.30, but I had trouble making syntax highlighting work. I tried using various open source syntax highlighting libraries, but most are designed to highlight small amounts of code, not large web pages. The libraries I tried were not fast enough, so I gave up on syntax highlighting at the time.</p>
<p>Thanks to Jan-Michael, Epiphany 3.36 supports syntax highlighting using <a href="https://github.com/highlightjs/highlight.js">highlight.js</a>, so we finally have view source mode working fully properly once again. It works much better than my failed attempts with different JS libraries. Please thank the highlight.js developers for maintaining this library, and for making it open source.</p>
<figure class="wp-caption aligncenter" id="attachment_8744" style="width: 1232px;"><a href="https://blogs.gnome.org/mcatanzaro/files/2020/03/Screenshot-from-2020-03-05-16-30-07.png"><img alt="Screenshot displaying Epiphany's view source mode" class="size-full wp-image-8744" height="954" src="https://blogs.gnome.org/mcatanzaro/files/2020/03/Screenshot-from-2020-03-05-16-30-07.png" width="1232"/></a><figcaption class="wp-caption-text" id="caption-attachment-8744">Colors!</figcaption></figure>
<h2>Service Workers</h2>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API">Service workers</a> are now available in WebKitGTK 2.28. Our friends at Apple had already implemented service worker support a couple years ago for Safari 11, but we were pretty slow in bringing this functionality to Linux. Finally, WebKitGTK should now be up to par with Safari in this regard.</p>
<h2>Cookies!</h2>
<p>Patrick Griffis has updated libsoup and WebKitGTK to support <a href="https://web.dev/samesite-cookies-explained/">SameSite cookies</a>. He’s also tightened up our cookie policy by implementing strict secure cookies, which prevents http:// pages from setting secure cookies (as they could overwrite secure cookies set by https:// pages).</p>
<h2>Adaptive Design</h2>
<p>As usual, there are more adaptive design improvements throughout the browser, to provide a better user experience on the <a href="https://puri.sm/products/librem-5/">Librem 5</a>. There’s still more work to be done here, but Epiphany continues to provide the best user experience of any Linux browser at small screen sizes. Thanks to Adrien Plazas and Jan-Michael for their continued work on this.</p>
<figure class="wp-caption aligncenter" id="attachment_8909" style="width: 445px;"><a href="https://blogs.gnome.org/mcatanzaro/files/2020/03/Screenshot-from-2020-03-06-12-10-26.png"><img alt="Screenshot showing Epiphany running in mobile mode at small window size." class="size-full wp-image-8909" height="737" src="https://blogs.gnome.org/mcatanzaro/files/2020/03/Screenshot-from-2020-03-06-12-10-26.png" width="445"/></a><figcaption class="wp-caption-text" id="caption-attachment-8909">As before, simply resize your browser window to see Epiphany dynamically transition between desktop mode and mobile mode.</figcaption></figure>
<h2>elementary OS</h2>
<p>With help from Alexander Mikhaylenko, we’ve also upstreamed many elementary OS design changes, which will be used when running under the Pantheon desktop (and not impact users on other desktops), so that the elementary developers don’t need to maintain their customizations as separate patches anymore. This will eliminate a few elementary-specific bugs, including some keyboard shortcuts that were previously broken only in elementary, and some odd tab bar behavior. Although Epiphany still doesn’t feel <em>quite</em> as native as an app designed just for elementary OS, it’s getting closer.</p>
<h2>Epiphany 3.34</h2>
<p>I failed to blog about Epiphany 3.34 when I released it last September. Hopefully you have updated to 3.34 already, and are already enjoying the two big features from this release: the new adblocker, and the bubblewrap sandbox.</p>
<p>The new adblocker is based on <a href="https://webkit.org/blog/3476/content-blockers-first-look/">WebKit Content Blockers</a>, which was developed by Apple several years ago. Adrian Perez developed new WebKitGTK API to expose this functionality, changed Epiphany to use it, and deleted Epiphany’s older resource-hungry adblocker that was originally copied from Midori. Previously, Epiphany kept a large GHashMap of compiled regexes in every web process, consuming a very significant amount of RAM for each process. It also took time to compile these regexes when launching each new web process. Now, the adblock filters are instead compiled into an efficient bytecode format that gets mmapped between all web processes to avoid excessive resource use. The bytecode is interpreted by WebKit itself, rather than by Epiphany’s web process extension (which Epiphany uses to execute custom code in WebKit’s web process), for greatly improved performance.</p>
<p>Lastly, Epiphany 3.34 enabled Patrick’s bubblewrap sandbox, which was added in WebKitGTK 2.26. Bubblewrap is an amazing sandboxing tool, already used effectively by flatpak and rpm-ostree, and I’m very pleased with Patrick’s decision to use it for WebKit as well. Because enabling the sandbox can break applications, it is currently opt-in for GTK 3 apps (but will become mandatory for GTK 4 apps). If your application uses WebKitGTK, you <em>really</em> need to take some time to enable this sandbox using <code>webkit_web_context_set_sandbox_enabled()</code>. The sandbox has introduced a couple regressions that we didn’t notice until too late; notably,  <a href="https://bugs.webkit.org/show_bug.cgi?id=202363">printing no longer works</a>, which, half a year later, we still haven’t managed to fix yet. (I’ll try to get to it soon.)</p>
<p>OK, this concludes your 3.36 and 3.34 updates. Onward to 3.38!</p></div>
    </content>
    <updated>2020-03-11T15:00:32Z</updated>
    <published>2020-03-11T15:00:32Z</published>
    <category term="GNOME"/>
    <category term="WebKit"/>
    <author>
      <name>Michael Catanzaro</name>
    </author>
    <source>
      <id>https://blogs.gnome.org/mcatanzaro</id>
      <link href="https://blogs.gnome.org/mcatanzaro/feed/" rel="self" type="application/rss+xml"/>
      <link href="https://blogs.gnome.org/mcatanzaro" rel="alternate" type="text/html"/>
      <title>Michael Catanzaro</title>
      <updated>2020-03-31T15:56:55Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://eischmann.wordpress.com/?p=1596</id>
    <link href="https://eischmann.wordpress.com/2020/03/10/mozilla-makes-firefox-beta-available-on-flathub/" rel="alternate" type="text/html"/>
    <title>Mozilla makes Firefox Beta available on Flathub</title>
    <summary>I’m glad to see that Mozilla has made a significant process with offering Firefox as a flatpak. Having Firefox as a flatpak was one of our long-term goals. Three years ago we started a testing flatpak repo with Firefox Developer Edition and soon after that we added Firefox Nightly. For a long time it was […]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I’m glad to see that <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1441922#c59">Mozilla has made a significant process with offering Firefox as a flatpak</a>. Having Firefox as a flatpak was one of our long-term goals.</p>
<p>Three years ago <a href="https://eischmann.wordpress.com/2017/01/05/firefox-developer-edition-for-flatpak/">we started a testing flatpak repo with Firefox Developer Edition</a> and soon after that we added Firefox Nightly. For a long time it was the only source of Firefox for Flatpak out there. The user base grew into thousands, a level our hosting could barely deal with. Lately we haven’t had much time for its maintenance and at least the nightly builds were often broken.</p>
<p>That’s why from the very beginning we worked with Mozilla to make official Firefox builds available as flatpaks. The effort was later on picked up by Endless.</p>
<p>Now it brings first fruits, Mozilla is already shipping Firefox Beta in the beta channel on Flathub. You just need to enable it by installing this file: <a href="https://flathub.org/beta-repo/appstream/org.mozilla.firefox.flatpakref">https://flathub.org/beta-repo/appstream/org.mozilla.firefox.flatpakref</a></p>
<p>I think it may already be useful for Silverblue users who have relied on our testing repo if they didn’t want to use package overlay.</p>
<p>There are still a few things to polish before making the stable Firefox available in the stable channel. One of them is localization files which has always been a difficult thing with Firefox. Mozilla has traditionally provided official localized builds for each language. This is not how localizations are typically handled in Flatpak or even in Linux distro packages.</p>
<p>For Fedora Firefox RPM we had to write a script that on startup automatically loads a particular localization file in the form of an addon. I suppose the official Firefox flatpak will work in a similar way.</p>
<p>Last year we also started providing Firefox flatpak built from Fedora packages. That has been the only stable Firefox for Flatpak around. And even after Mozilla releases their official Firefox for Flatpak, we will stay committed to it because there is demand among Fedora users for Firefox that is verified and built by the Fedora Project and it’s also a requirement for software included in Fedora anyway. So if we want to have Firefox as a default, pre-installed browser e.g. in <a href="https://silverblue.fedoraproject.org/">Silverblue</a> we’ll have to build the flatpak ourselves. It also gives us flexibility to ship crucial fixes and features important to our users faster than upstream (e.g. Firefox in Fedora already runs natively on Wayland by default, not on XWayland like upstream Firefox).</p>
<p>In the future, users will have a choice. They can either stick with the default Firefox provided by us, or switch to the one provided directly by Mozilla in a more convenient and secure way than the current tarballs with binaries are. We will also keep maintaining our testing repo for those who are interested in Nightly and Developer Edition. And we’ll see if there is sufficient interest in it to continue.</p>
<p> </p></div>
    </content>
    <updated>2020-03-10T15:49:26Z</updated>
    <published>2020-03-10T15:49:26Z</published>
    <category term="Fedora"/>
    <category term="Linux"/>
    <category term="Firefox"/>
    <category term="flathub"/>
    <category term="Flatpak"/>
    <author>
      <name>eischmann</name>
    </author>
    <source>
      <id>https://eischmann.wordpress.com</id>
      <logo>https://s0.wp.com/i/buttonw-com.png</logo>
      <link href="https://eischmann.wordpress.com/feed/" rel="self" type="application/rss+xml"/>
      <link href="https://eischmann.wordpress.com" rel="alternate" type="text/html"/>
      <link href="https://eischmann.wordpress.com/osd.xml" rel="search" title="Brno hat" type="application/opensearchdescription+xml"/>
      <link href="https://eischmann.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Blog of Jiri Eischmann</subtitle>
      <title>Brno hat</title>
      <updated>2020-03-10T15:49:26Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://www.uajain.com/Recapping-my-journey-at-Endless</id>
    <link href="http://www.uajain.com/Recapping-my-journey-at-Endless/" rel="alternate" title="Recapping my journey at Endless" type="text/html"/>
    <title>Recapping my journey at Endless</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>It seemed only yesterday when I joined Endless as a Papercuts Team member after being a GNOME contributor for a while. I was supposed to fix papercuts issues in the OS, package a few electron apps to flatpaks and overall work alongside the desktop team. I am happy to report that the experience almost 2 years now, has been a learning and a positive one that has made me a better developer and human by-and-large.</p>

<p>Endless is a mission. A very tough one, though. Closely working with the team, I learned more about the mission and goals; how our work is going to address the problem-space and K.P.Is to measure the impact made; it was sheer-motivating.
In other words:</p>

<p>“Being a part of something bigger, a movement.”</p>

<p>Over the course, I got shifted to the core desktop team, where I started working directly in the desktop team. I joined the desktop team at a time where the OS had a huge delta(GNOME 3.26) with the upstream GNOME and we needed to fast-forward the rebase over three releases(GNOME 3.32). Naturally rebasing such a delta is no cakewalk, given the desktop team was dealing with fallouts from the rebases until the next 3-to-4 rolling releases. Retrospecting this particular time period, I think we learned three major lessons.</p>

<ul>
  <li>
    <p>Rebase, Rebase, Rebase every six months</p>
  </li>
  <li>
    <p>Upstream all the things!</p>
  </li>
  <li>
    <p>Adopt upstream-first strategy where-ever possible</p>
  </li>
</ul>

<p>The first one is quite obvious as the rebasing over GNOME 3.32 was a very painful one. We took a note of it in the retrospectives and made sure we do not miss a rebase over an upstream release cycle.
The second and third are complementary to each other. Endless has taken great strides in this direction. Projects that were intially started as a downstream project based on the various forms of requests from the field/ground reports, have been upstream-ed across various open source projects, be it Kernel, Flatpak, OSTree and many core GNOME components. Endless also proposes plans that might be useful to the community in general for e.g., I can recommend the talk given by Robert McQueen on <a href="https://www.youtube.com/watch?v=MHVwjHzDkvc">Product Metrics &amp; Respecting Privacy</a> for GNOME from GUADEC-2019, where he talks about how GNOME can benefit on metrics front, using some of the pieces that has already been developed and tested by Endless in the field. This is important as the community gets some food for thought, design and refine their goals and probably helps to develop a roadmap for future releases.</p>

<h3 id="highlights-of-the-work-that-i-have-been-doing">Highlights of the work that I have been doing!</h3>

<h4 id="disk-space-improvements">Disk space improvements:</h4>
<p>Endless suffered from <code class="highlighter-rouge">ENOSPACE</code> on low-cost systems where total disk-space is <code class="highlighter-rouge">32GB</code>. This was due to the OS image size containing all the offline knoweldge-library content and having apps such as encyclopedias. A ton of work went into improving disk space across Flatpak, OSTree and GNOME Software.</p>

<ul>
  <li>
    <p>Eliminating the use of double-disk space temporarily by flatpak on system pull - During a ref-pull for the system-repo, flatpak intially pulled into a temporary child repo and then verify/copy each object into the system repo. This caused the problem of transient double-disk-space usage. Hence an encyclopedia app of size 6GB requires 12 GB of free disk-space in order to get installed. To eliminate this problem, a special FUSE system <a href="https://github.com/flatpak/flatpak/tree/master/revokefs"><code class="highlighter-rouge">revokefs-fuse</code></a> was introduced to mimick <a href="https://lwn.net/Articles/192632/"><code class="highlighter-rouge">revoke(path)</code></a>,  in addition to a trustable-but-not-root user as the initial owner of the files being written to disk. When all objects were pulled in, the FUSE is unmounted (this makes sure that there are no open FDs to <code class="highlighter-rouge">path</code> hence no changes can be done to the underlying pulled-in objects), verification and permissions canoncalization (check for setuid bits) and finally hard-link it to the system’s repo (hardlinks are faster then copying) hence, overall improving system-pulls speeds while reducing ~50% I/O at the same time. A more detailed version of the approach is documented <a href="https://github.com/flatpak/flatpak/wiki/Noncopying-system-app-installation#solution">here</a> and you can also checkout the <a href="https://github.com/flatpak/flatpak">flatpak-source</a>.</p>
  </li>
  <li>
    <p>“<code class="highlighter-rouge">min-free-space-size=X GBs</code>” config parameter for OSTree repo - A gatekeeper check that makes sure that a pull doesn’t fill up the entire’s user disk-space in the background. Plays a important role when the user has opted-in for auto-updates of apps/runtime or the OS itself.</p>
  </li>
  <li>
    <p>Low-disk space heuristics - Some disk-space heuristics and special behavior in GNOME Software to detect if the user will run out of disk-space if they proceed with an install or update operation.</p>
  </li>
</ul>

<h4 id="refreshing-featured-apps-in-gnome-software-without-pushing-an-an-os-upgrade">Refreshing featured apps in GNOME Software without pushing an an OS upgrade:</h4>
<p>I covered this in detail in <a href="http://www.uajain.com/Updating-Featured-apps-independently-in-gnome-software/">my earlier post</a>.</p>
<h4 id="password-peeking-support-in-gnome-shell">Password peeking support in GNOME Shell:</h4>
<p>Endless ground reports always had a request for <a href="https://gitlab.gnome.org/GNOME/gnome-shell/-/merge_requests/619">password-peeking functionality</a> so that was already one of the top priority at Endless. Adopted upstream-first strategy hence, GNOME 3.36 is shipping password-peeking support. This was developed entirely on Endless’ work-time and was one of the top on list of things to watch out for next release at the last GNOME Advisory Board meeting at FOSDEM (as I have been told).</p>
<h4 id="collaborating-on-gnome-new-lock-screen">Collaborating on GNOME new lock screen:</h4>
<p>Few pieces around the new user-avatar at login and lock-screen were contributed out of my Endless’ work-time under the guidance of GNOME Shell and Design team. Not only I started to enjoy developing the Shell(as it’s quite a challenge + fun), I started to take more initiative for shell-related work. Also, to get these specific updates, I strongly recommended following the <a href="https://blogs.gnome.org/shell-dev/">GNOME Shell and Mutter development blog</a>!</p>
<h4 id="hooking-parental-controls-across-the-desktop">Hooking parental-controls across the desktop</h4>
<p>Parental controls has been one of the important focus for Endless for a while now and I fondly remember working on it as it was one of the most productive work-period during the journey. The <a href="https://gitlab.freedesktop.org/pwithnall/malcontent/">project</a> is authored and being led by <a href="https://wiki.gnome.org/PhilipWithnall">Philip Withnall</a> to bring this to the wider community for availability.</p>

<hr/>

<p>Needless to say that all this were unconditionally accompanied by chasing endless bugs/crashes/builds or test failures across various system-components, resolving release blockers, rebases, packaging and dabbling with infrastructure to setup up the pipeline.</p>

<p>Lately I have been doing some basic metrics restructuring work that has been refreshing to work on and also to take a break from doing GNOME-y work.</p>

<h3 id="developing-and-enhancing-soft-skills">Developing and enhancing soft skills</h3>

<p>To be honest, 2 years back when I started, I took soft-skills for granted and I assumed I pretty-much have it - “How hard it could be, right?” I couldn’t have been more wrong. My myth were busted time and again over the course. It takes real work to communicate efficiently while constantly monitoring/maintaining that I am not directing my agreement/disagreement/comments as a personal attack towards a colleague no matter where in corporate heirarchy or team. I tried to demonstrate a kind and humble attitude towards everyone and the work that they did and I have pretty-much got the same in return. Looking back, I see myself how much growth I have internalized in this particular domain which I think will help me in maintaining relationships with the people I have worked with over time.</p>

<h3 id="on-remote-work-and-managing-stress">On remote work and managing stress</h3>

<p>My position as Desktop software developer has been 100% remote. I worked from India (UTC +5:30) most of the times. My experience with remote work has been positive so far and my experience with couple of Google summer of Code rounds had made an eligibility-check of “being able to work remotely” (as Endless is my first-company to work for, after I graduated in 2017) while I was interviewing for the company.</p>

<p>Now to the section of managing stress and burn-out. It’s pretty much established that, at least at some point in work-life, one faces burnout and doesn’t know what to do about it. This was new for me as well. Working, inevitably brings stress especially when you are working against a release deadline and/or being in a deep rabbit-hole or just when things are not going as you would expect. Initially I used to go silent on things like this, fearing that it would affect my performance reviews and being looked down upon as an engineer; but to my suprise opening about it eventually, was one of the best things I have done. Not only was I provided with support but I was made to understand that this is normal and everyone suffers from it at some point in their careers. All we can do is learn from it, listen to warning-signals and take regular time-off to recover from it.</p>

<p>Before closing on this note, I want to just touch upon couple of more points about remote-work that I think are valuable lessons learnt:</p>

<ul>
  <li>
    <p>Be clear in your communications even if it means over-communicating a bit.</p>
  </li>
  <li>
    <p>Being remote is great and all, but also judge if the work isn’t quite async enough beforehand. If the work or iterations requires tight feedback loops to work it through and requires 2 or more persons in opposite timezones, I (personally) have found very difficult to work in that setup. Although this should not be a mandatory rule to follow but I think pro-longed periods of such kind of work might stress you out faster and should be avoided (or be made more async-ed), if possible.</p>
  </li>
</ul>

<h3 id="on-endless-next-steps">On Endless next steps</h3>

<p>As Endless moves <a href="https://www.endlessnetwork.com/blog-1/endless-2-0">ahead to restructure itself</a>; being a full-fledged non-profit foundation, I wish nothing but huge success on their path forwards. Certainly considering working out all these years that have brought learnings and experiences about how the next billion of users will interact with computing; the decisions made in the resturcture makes total sense. I also want to give a huge shout out to the entire team at Endless who has helped my grow in so many aspects. Thank you so much.</p>

<p>Having said that, I will be looking for a job very soon. If you or your org. is looking for a generalist system-developer with track record in GNOME or associated technologies, I am eager to talk to you. Feel free to drop a comment down below or ping me at <a href="https://twitter.com/uajain_">Twitter</a>, <a href="https://www.linkedin.com/in/uajain/">LinkedIn</a> or email at <code class="highlighter-rouge">mailumangjain@gmail.com</code></p>

<p class="center"><img alt="Markdowm Image" src="http://www.uajain.com/assets/images/hallstat-austria.jpg"/></p>

<p>Until the next post,
Happy Hacking everyone!</p></div>
    </content>
    <updated>2020-03-09T15:50:00Z</updated>
    <published>2020-03-09T15:50:00Z</published>
    <category term="GNOME"/>
    <category term="Endless"/>
    <author>
      <name/>
    </author>
    <source>
      <id>http://www.uajain.com/</id>
      <link href="http://www.uajain.com/feed.xml" rel="self" type="application/atom+xml"/>
      <link href="http://www.uajain.com/" rel="alternate" type="text/html"/>
      <title>Umang Jain</title>
      <updated>2020-03-09T17:07:01Z</updated>
    </source>
  </entry>
</feed>

